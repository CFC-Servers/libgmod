[
  {
    "name": "Angle",
    "functions": [
      {
        "name": "IsEqualTol",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns if the angle is equal to another angle with the given tolerance.",
        "arguments": [
          {
            "name": "compare",
            "type": "Angle",
            "description": "The angle to compare to."
          },
          {
            "name": "tolerance",
            "type": "number",
            "description": "The tolerance range."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "eq",
            "description": "Are the angles equal or not."
          }
        ]
      },
      {
        "name": "Random",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Randomizes each element of this Angle object.",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "default": "-360",
            "description": "The minimum value for each component."
          },
          {
            "name": "max",
            "type": "number",
            "default": "360",
            "description": "The maximum value for each component."
          }
        ]
      },
      {
        "name": "ToTable",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the angle as a table with three elements.",
        "returnValues": [
          {
            "type": "table",
            "description": "The table with elements 1 = p, 2 = y, 3 = r."
          }
        ]
      }
    ]
  },
  {
    "name": "CEffectData",
    "functions": [
      {
        "name": "GetStart",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the start position of the effect.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The start position of the effect"
          }
        ]
      },
      {
        "name": "SetMagnitude",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the magnitude of the effect.\n<note>Internally stored as a float with 12 bit precision for networking purposes, limited to range of 0-1023.</note>",
        "arguments": [
          {
            "name": "magnitude",
            "type": "number",
            "description": "The magnitude of the effect."
          }
        ]
      },
      {
        "name": "SetRadius",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the radius of the effect to be created with this effect data.\n\n<note>Internally stored as a float, but networked as a 10bit float, and is clamped to 0-1023 range.</note>",
        "arguments": [
          {
            "name": "radius",
            "type": "number",
            "description": "Radius of the effect."
          }
        ]
      }
    ]
  },
  {
    "name": "CLuaEmitter",
    "functions": [
      {
        "name": "Is3D",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ],
        "description": "Returns whether this emitter is 3D or not. This is set when creating the emitter with <page>Global.ParticleEmitter</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this emitter is 3D or not."
          }
        ]
      },
      {
        "name": "SetParticleCullRadius",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ],
        "description": "The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.",
        "arguments": [
          {
            "name": "radius",
            "type": "number",
            "description": "Particle radius."
          }
        ]
      }
    ]
  },
  {
    "name": "CLuaLocomotion",
    "functions": [
      {
        "name": "Approach",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "description": "Sets the location we want to get to.\n\nEach call of <page text=\"Approach\">CLuaLocomotion:Approach</page> moves the <page text=\"NextBot\">NextBot</page> 1 unit towards the specified goal. The size of this unit is determined by <page text=\"SetDesiredSpeed\">CLuaLocomotion:SetDesiredSpeed</page>; the default is `0` (each call of <page text=\"Approach\">CLuaLocomotion:Approach</page> moves the <page text=\"NextBot\">NextBot</page> 0).\n\nTo achieve smooth movement with <page text=\"Approach\">CLuaLocomotion:Approach</page>, it should be called in a hook like <page text=\"Think\">ENTITY:Think</page>, as shown in the example.",
        "arguments": [
          {
            "name": "goal",
            "type": "Vector",
            "description": "The vector we want to get to."
          },
          {
            "name": "goalweight",
            "type": "number",
            "description": "If unsure then set this to `1`."
          }
        ]
      },
      {
        "name": "GetGroundMotionVector",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "description": "Return unit vector in XY plane describing our direction of motion - even if we are currently not moving",
        "returnValues": [
          {
            "type": "Vector",
            "description": "A vector representing the X and Y movement"
          }
        ]
      },
      {
        "name": "GetGroundNormal",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "description": "Returns the current ground normal.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The current ground normal."
          }
        ]
      },
      {
        "name": "SetDeceleration",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "description": "Sets the deceleration speed.",
        "arguments": [
          {
            "name": "deceleration",
            "type": "number",
            "description": "New deceleration speed (default is 400)"
          }
        ]
      },
      {
        "name": "SetGravity",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "description": "Sets the locomotion's gravity.\n\n<note>With values 0 or below, or even lower positive values, the nextbot will start to drift sideways, use <page>CLuaLocomotion:SetVelocity</page> to counteract this.</note>",
        "arguments": [
          {
            "name": "gravity",
            "type": "number",
            "description": "New gravity to set. Default is 1000."
          }
        ]
      },
      {
        "name": "SetJumpHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "description": "Sets the height of the bot's jump",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "Height (default is 58)"
          }
        ]
      }
    ]
  },
  {
    "name": "CLuaParticle",
    "functions": [
      {
        "name": "GetAirResistance",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Returns the air resistance of the particle.",
        "returnValues": [
          {
            "type": "number",
            "description": "The air resistance of the particle"
          }
        ]
      },
      {
        "name": "GetDieTime",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Returns the amount of time in seconds after which the particle will be destroyed.",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of time in seconds after which the particle will be destroyed"
          }
        ]
      },
      {
        "name": "GetEndAlpha",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Returns the alpha value that the particle will reach on its death.",
        "returnValues": [
          {
            "type": "number",
            "description": "The alpha value the particle will fade to"
          }
        ]
      },
      {
        "name": "GetLifeTime",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Returns the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value will always be between 0 and <page>CLuaParticle:GetDieTime</page>.\n\n\nIt changes automatically as time goes.\n\nIt can be manipulated using <page>CLuaParticle:SetLifeTime</page>.\n\n\nIf the life time of the particle will be more than <page>CLuaParticle:GetDieTime</page>, it will be removed.",
        "returnValues": [
          {
            "type": "number",
            "description": "How long the particle existed, in seconds."
          }
        ]
      },
      {
        "name": "SetEndAlpha",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Sets the alpha value of the particle that it will reach when it dies.",
        "arguments": [
          {
            "name": "endAlpha",
            "type": "number",
            "description": "The new alpha value of the particle that it will reach when it dies."
          }
        ]
      },
      {
        "name": "SetLifeTime",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Sets the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value should always be between 0 and <page>CLuaParticle:GetDieTime</page>.\n\n\nIt changes automatically as time goes.\n\n\nIf the life time of the particle will be more than <page>CLuaParticle:GetDieTime</page>, it will be removed.",
        "arguments": [
          {
            "name": "lifeTime",
            "type": "number",
            "description": "The new life time of the particle."
          }
        ]
      },
      {
        "name": "SetNextThink",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Sets when the particles think function should be called next, this uses the synchronized server time returned by <page>Global.CurTime</page>.",
        "arguments": [
          {
            "name": "nextThink",
            "type": "number",
            "description": "Next think time."
          }
        ]
      },
      {
        "name": "SetStartAlpha",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Sets the initial alpha value of the particle.",
        "arguments": [
          {
            "name": "startAlpha",
            "type": "number",
            "description": "Initial alpha."
          }
        ]
      },
      {
        "name": "SetStartLength",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Sets the initial length value of the particle.",
        "arguments": [
          {
            "name": "startLength",
            "type": "number",
            "description": "Initial length."
          }
        ]
      },
      {
        "name": "SetThinkFunction",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "description": "Sets the think function of the particle.",
        "arguments": [
          {
            "name": "thinkFunc",
            "type": "function",
            "description": "Think function. It has only one argument:\n\n\n<page>CLuaParticle</page> particle - The particle the think hook is set on"
          }
        ]
      }
    ]
  },
  {
    "name": "CMoveData",
    "functions": [
      {
        "name": "AddKey",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adds keys to the move data, as if player pressed them.",
        "arguments": [
          {
            "name": "keys",
            "type": "number",
            "description": "Keys to add, see <page>Enums/IN</page>"
          }
        ]
      },
      {
        "name": "GetAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets the aim angle. On client is the same as <page>Entity:GetAngles</page>.",
        "returnValues": [
          {
            "type": "Angle",
            "description": "Aiming angle"
          }
        ]
      },
      {
        "name": "GetConstraintRadius",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the radius that constrains the players movement. See <page>CMoveData:SetConstraintRadius</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The constraint radius"
          }
        ]
      },
      {
        "name": "GetFinalIdealVelocity",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns an internal player movement variable `m_outWishVel`.",
        "returnValues": [
          {
            "type": "Vector",
            "name": "idealVel"
          }
        ]
      },
      {
        "name": "GetForwardSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the players forward speed.",
        "returnValues": [
          {
            "type": "number",
            "description": "speed"
          }
        ]
      },
      {
        "name": "GetMoveAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the angle the player is moving at. For more info, see <page>CMoveData:SetMoveAngles</page>.",
        "returnValues": [
          {
            "type": "Angle",
            "description": "The move direction"
          }
        ]
      },
      {
        "name": "GetUpSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the vertical speed of the player. ( Z axis of <page>CMoveData:GetVelocity</page> )",
        "returnValues": [
          {
            "type": "number",
            "description": "Vertical speed"
          }
        ]
      },
      {
        "name": "KeyReleased",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether the key was released",
        "arguments": [
          {
            "name": "key",
            "type": "number",
            "description": "A key to test, see <page>Enums/IN</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Was the key released or not."
          }
        ]
      },
      {
        "name": "SetUpSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets vertical speed of the player. ( Z axis of <page>CMoveData:SetVelocity</page> )",
        "arguments": [
          {
            "name": "speed",
            "type": "number",
            "description": "Vertical speed to set"
          }
        ]
      }
    ]
  },
  {
    "name": "CNavArea",
    "functions": [
      {
        "name": "Draw",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Draws this navarea on debug overlay."
      },
      {
        "name": "GetAdjacentCountAtSide",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Returns the amount of <page>CNavArea</page>s that have a connection ( one or two way ) **from** this <page>CNavArea</page> in given direction.\n\nSee <page>CNavArea:GetAdjacentCount</page> for a function that returns <page>CNavArea</page> count from/in all sides/directions.",
        "arguments": [
          {
            "name": "navDir",
            "type": "number",
            "description": "The direction, in which to look for <page>CNavArea</page>s, see <page>Enums/NavDir</page>."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of <page>CNavArea</page>s that have a connection ( one or two way ) **from** this <page>CNavArea</page> in given direction."
          }
        ]
      },
      {
        "name": "GetIncomingConnectionDistances",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Returns a table of all the <page>CNavArea</page>s that have a one-way connection **to** this <page>CNavArea</page> and their pre-computed distances.\n\nIf a <page>CNavArea</page> has a two-way connection **to or from** this <page>CNavArea</page> then it will not be returned from this function, use <page>CNavArea:GetAdjacentAreaDistances</page> to get outgoing (one and two way) connections.",
        "arguments": [
          {
            "name": "dir",
            "type": "number",
            "default": "nil",
            "description": "If set, will only return areas in the specified direction. See <page>Enums/NAVDIR</page>."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A list of tables in the following format:\n* <page>CNavArea</page> **area** - the area that is connected to this area.\n* <page>number</page> **dist** - Distance from the area to this area.\n* <page>number</page> **dir** - Direction in which the area is in relative to this area."
          }
        ]
      },
      {
        "name": "IsDamaging",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Returns whether the <page>CNavArea</page> would damage if traversed, as set by <page>CNavArea:MarkAsDamaging</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the area is damaging or not"
          }
        ]
      },
      {
        "name": "IsPartiallyVisible",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Returns whether this <page>CNavArea</page> can see given position.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position to test."
          },
          {
            "name": "ignoreEnt",
            "type": "Entity",
            "default": "NULL",
            "description": "If set, the given entity will be ignored when doing LOS tests"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the given position is visible from this area"
          }
        ]
      },
      {
        "name": "IsRoughlySquare",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Returns if we're shaped like a square.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If we're a square or not."
          }
        ]
      },
      {
        "name": "MarkAsDamaging",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Marks the area as damaging if traversed, for example when, for example having poisonous or no atmosphere, or a temporary fire present. See <page>CNavArea:IsDamaging</page>.",
        "arguments": [
          {
            "name": "duration",
            "type": "number",
            "description": "For how long the area should stay marked as damaging. Multiple calls will overwrite the previous value."
          }
        ]
      },
      {
        "name": "PlaceOnGround",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Drops a corner or all corners of a <page>CNavArea</page> to the ground below it.",
        "arguments": [
          {
            "name": "corner",
            "type": "number",
            "description": "The corner(s) to drop, uses <page>Enums/NavCorner</page>"
          }
        ]
      },
      {
        "name": "SetPlace",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Sets the Place of the nav area.\n\nThere is a limit of 256 unique places per `.nav` file.",
        "arguments": [
          {
            "name": "place",
            "type": "string",
            "description": "Set to `\"\"` to remove place from the nav area. There's a limit of 255 characters."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns true of operation succeeded, false otherwise."
          }
        ]
      },
      {
        "name": "SetTotalCost",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "description": "Sets the total cost when passing from starting area to the goal area through this node.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "arguments": [
          {
            "name": "cost",
            "type": "number",
            "description": "The total cost of the path to set.\n\nMust be above or equal 0."
          }
        ]
      }
    ]
  },
  {
    "name": "CNavLadder",
    "functions": [
      {
        "name": "GetWidth",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "description": "Returns the width of the ladder in Hammer Units.",
        "returnValues": [
          {
            "type": "number",
            "description": "The width of the ladder in Hammer Units."
          }
        ]
      },
      {
        "name": "SetTopLeftArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "description": "Sets the top left area of the <page>CNavLadder</page>.",
        "arguments": [
          {
            "name": "area",
            "type": "CNavArea"
          }
        ]
      }
    ]
  },
  {
    "name": "CNewParticleEffect",
    "functions": [
      {
        "name": "SetControlPointForwardVector",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "description": "Sets the forward direction for given control point.",
        "arguments": [
          {
            "name": "cpID",
            "type": "number",
            "description": "The control point ID, 0 to 63."
          },
          {
            "name": "forward",
            "type": "Vector",
            "description": "The forward direction for given control point"
          }
        ]
      },
      {
        "name": "SetControlPointOrientation",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "description": "Sets the orientation for given control point.",
        "arguments": [
          {
            "name": "cpID",
            "type": "number",
            "description": "The control point ID, 0 to 63."
          },
          {
            "name": "forward",
            "type": "Vector",
            "description": "The forward direction for given control point.\n\nThis can also be an <page>Angle</page>, in which case the other 2 arguments are not used."
          },
          {
            "name": "right",
            "type": "Vector",
            "description": "The right direction for given control point"
          },
          {
            "name": "up",
            "type": "Vector",
            "description": "The up direction for given control point"
          }
        ]
      },
      {
        "name": "SetControlPointParent",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "description": "Essentially makes child control point follow the parent control point.",
        "arguments": [
          {
            "name": "child",
            "type": "number",
            "description": "The child control point ID, 0 to 63."
          },
          {
            "name": "parent",
            "type": "number",
            "description": "The parent control point ID, 0 to 63."
          }
        ]
      },
      {
        "name": "SetControlPointRightVector",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "description": "Sets the right direction for given control point.",
        "arguments": [
          {
            "name": "cpID",
            "type": "number",
            "description": "The control point ID, 0 to 63."
          },
          {
            "name": "right",
            "type": "Vector",
            "description": "The right direction for given control point."
          }
        ]
      },
      {
        "name": "SetControlPointUpVector",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "description": "Sets the upward direction for given control point.",
        "arguments": [
          {
            "name": "cpID",
            "type": "number",
            "description": "The control point ID, 0 to 63."
          },
          {
            "name": "upward",
            "type": "Vector",
            "description": "The upward direction for given control point"
          }
        ]
      }
    ]
  },
  {
    "name": "Color",
    "description": "List of all possible functions to manipulate colors.\n\nColors are implemented in Lua thus <page>Global.type</page>(color) == \"table\" and <page>Global.TypeID</page>(color) == <page text=\"TYPE_TABLE\">Enums/TYPE#table</page>.\n\nFor type checking use <page>Global.IsColor</page>.\n\nCreated by <page>Global.Color</page>, <page>Global.HSVToColor</page>, and <page>Global.HSLToColor</page>.\n\n| Type                | Name  | Description                       |\n| ------------------- | ----- | --------------------------------- |\n| <page>number</page> | **r** | The red component of the color.   |\n| <page>number</page> | **g** | The green component of the color. |\n| <page>number</page> | **b** | The blue component of the color.  |\n| <page>number</page> | **a** | The alpha component of the color. |",
    "functions": [
      {
        "name": "SetUnpacked",
        "parent": "Color",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the red, green, blue, and alpha of the color.",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "description": "The red component"
          },
          {
            "name": "g",
            "type": "number",
            "description": "The green component"
          },
          {
            "name": "b",
            "type": "number",
            "description": "The blue component"
          },
          {
            "name": "a",
            "type": "number",
            "description": "The alpha component"
          }
        ]
      }
    ]
  },
  {
    "name": "ConVar",
    "functions": [
      {
        "name": "GetBool",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Tries to convert the current string value of a <page>ConVar</page> to a boolean.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "The boolean value of the console variable. If the variable is numeric and not 0, the result will be `true`. Otherwise the result will be `false`."
          }
        ]
      },
      {
        "name": "GetFlags",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the <page>Enums/FCVAR</page> flags of the ConVar",
        "returnValues": [
          {
            "type": "number",
            "name": "flag",
            "description": "The bitflag. See <page>Enums/FCVAR</page>"
          }
        ]
      },
      {
        "name": "GetName",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the name of the <page>ConVar</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The name of the console variable."
          }
        ]
      },
      {
        "name": "SetFloat",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Sets a ConVar's value to the input number.\n<note>This can only be ran on ConVars created from within Lua.</note>",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "Value to set the ConVar to."
          }
        ]
      }
    ]
  },
  {
    "name": "CRecipientFilter",
    "functions": [
      {
        "name": "RemovePAS",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ],
        "description": "Removes all players from the filter that are in [PAS (Potentially Audible Set)](https://developer.valvesoftware.com/wiki/PAS \"PAS - Valve Developer Community\") for given position.",
        "arguments": [
          {
            "name": "position",
            "type": "Vector",
            "description": "The position to test"
          }
        ]
      },
      {
        "name": "RemovePlayer",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ],
        "description": "Removes the player from the recipient filter.",
        "arguments": [
          {
            "name": "Player",
            "type": "Player",
            "description": "The player that should be in the recipient filter if you call this function."
          }
        ]
      }
    ]
  },
  {
    "name": "CSoundPatch",
    "functions": [
      {
        "name": "ChangePitch",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adjust the pitch, alias the speed at which the sound is being played.\n\nThis invokes the <page>GM:EntityEmitSound</page>.",
        "arguments": [
          {
            "name": "pitch",
            "type": "number",
            "description": "The pitch can range from 0-255. Where 100 is the original pitch."
          },
          {
            "name": "deltaTime",
            "type": "number",
            "default": "0",
            "description": "The time to fade from previous to the new pitch."
          }
        ]
      },
      {
        "name": "ChangeVolume",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adjusts the volume of the sound played.<br>\nAppears to only work while the sound is being played.",
        "arguments": [
          {
            "name": "volume",
            "type": "number",
            "description": "The volume ranges from 0 to 1."
          },
          {
            "name": "deltaTime",
            "type": "number",
            "default": "0",
            "description": "Time to fade the volume from previous to new value from."
          }
        ]
      }
    ]
  },
  {
    "name": "CTakeDamageInfo",
    "description": "A class used to store and modify all the data concerning a damage event.\nAn empty CTakeDamageInfo object can be created with <page>Global.DamageInfo</page>\n\nList of hooks that this object is passed to:\n* <page>ENTITY:OnTakeDamage</page>\n* <page>GM:DoPlayerDeath</page>\n* <page>GM:EntityTakeDamage</page>\n* <page>GM:PostEntityTakeDamage</page>\n* <page>GM:OnDamagedByExplosion</page>\n* <page>GM:ScaleNPCDamage</page>\n* <page>GM:ScalePlayerDamage</page>\n* <page>NEXTBOT:OnInjured</page>\n* <page>NEXTBOT:OnKilled</page>\n* <page>NEXTBOT:OnOtherKilled</page>\n\nList of functions that use this object:\n* <page>util.BlastDamageInfo</page>\n* <page>Entity:TakeDamageInfo</page>\n* <page>Entity:TakePhysicsDamage</page>\n* <page>Entity:DispatchTraceAttack</page>",
    "functions": [
      {
        "name": "AddDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Increases the damage by damageIncrease.",
        "arguments": [
          {
            "name": "damageIncrease",
            "type": "number",
            "description": "The damage to add."
          }
        ]
      },
      {
        "name": "GetBaseDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the initial unmodified by skill level ( <page>game.GetSkillLevel</page> ) damage.",
        "returnValues": [
          {
            "type": "number",
            "description": "baseDamage"
          }
        ]
      },
      {
        "name": "IsExplosionDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whenever the damageinfo contains explosion damage.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "isExplDamage"
          }
        ]
      },
      {
        "name": "SetAmmoType",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Changes the ammo type used by the weapon that inflicted the damage.",
        "arguments": [
          {
            "name": "ammoType",
            "type": "number",
            "description": "Ammo type ID"
          }
        ]
      },
      {
        "name": "SetBaseDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the initial unmodified by skill level ( <page>game.GetSkillLevel</page> ) damage. This function will not update or touch <page>CTakeDamageInfo:GetDamage</page>.",
        "arguments": [
          {
            "name": "",
            "type": "number",
            "description": "baseDamage"
          }
        ]
      },
      {
        "name": "SetDamageBonus",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the bonus damage. Bonus damage isn't automatically applied, so this will have no outer effect by default.",
        "arguments": [
          {
            "name": "damage",
            "type": "number",
            "description": "The extra damage to be added."
          }
        ]
      },
      {
        "name": "SetDamageForce",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the directional force of the damage.\n<note>\nThis function seems to have no effect on player knockback. To disable knockback entirely, see [EFL_NO_DAMAGE_FORCES](https://wiki.facepunch.com/gmod/Enums/EFL#EFL_NO_DAMAGE_FORCES) or use workaround example below.\n</note>",
        "arguments": [
          {
            "name": "force",
            "type": "Vector",
            "description": "The vector to set the force to."
          }
        ]
      },
      {
        "name": "SetDamagePosition",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the position of where the damage gets applied to.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position where the damage will be applied."
          }
        ]
      },
      {
        "name": "SetInflictor",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the inflictor of the damage for example a weapon.\n\nFor hitscan/bullet weapons this should the weapon.\n\n\nFor projectile ( rockets, etc ) weapons this should be the projectile.",
        "arguments": [
          {
            "name": "inflictor",
            "type": "Entity",
            "description": "The new inflictor."
          }
        ]
      }
    ]
  },
  {
    "name": "CUserCmd",
    "description": "A class used to store the player inputs, such as mouse movement, view angles, <page>Enums/IN</page> buttons pressed and analog movement, the data from this class is then transfered to a <page>CMoveData</page> during actual movement simulation.\n\nCan be modified during <page>GM:CreateMove</page>, <page>GM:StartCommand</page> and used in read only with <page>GM:SetupMove</page> and <page>Player:GetCurrentCommand</page>.",
    "functions": [
      {
        "name": "ClearMovement",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "Clears the movement from the command.\n\nSee also <page>CUserCmd:SetForwardMove</page>, <page>CUserCmd:SetSideMove</page> and  <page>CUserCmd:SetUpMove</page>."
      },
      {
        "name": "GetButtons",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a bitflag indicating which buttons are pressed.",
        "returnValues": [
          {
            "type": "number",
            "description": "Pressed buttons, see <page>Enums/IN</page>"
          }
        ]
      },
      {
        "name": "GetMouseX",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the delta of the angular horizontal mouse movement of the player.",
        "returnValues": [
          {
            "type": "number",
            "description": "xDelta"
          }
        ]
      },
      {
        "name": "GetSideMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.",
        "returnValues": [
          {
            "type": "number",
            "description": "requestSpeed"
          }
        ]
      },
      {
        "name": "GetUpMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "The speed the client wishes to move up with, negative if the clients wants to move down.",
        "returnValues": [
          {
            "type": "number",
            "description": "requestSpeed"
          }
        ]
      },
      {
        "name": "IsForced",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.\n\nThis will never return true clientside.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "isForced"
          }
        ]
      },
      {
        "name": "RemoveKey",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "Removes a key bit from the current key bitflag.\n\nFor movement you will want to use <page>CUserCmd:SetForwardMove</page>, <page>CUserCmd:SetUpMove</page> and <page>CUserCmd:SetSideMove</page>.",
        "arguments": [
          {
            "name": "button",
            "type": "number",
            "description": "Bitflag to be removed from the key bitflag, see <page>Enums/IN</page>."
          }
        ]
      },
      {
        "name": "SetMouseWheel",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the scroll delta.",
        "arguments": [
          {
            "name": "speed",
            "type": "number",
            "description": "The scroll delta."
          }
        ]
      },
      {
        "name": "SetMouseY",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the delta of the angular vertical mouse movement of the player.\n\nSee also <page>CUserCmd:SetMouseX</page>.",
        "arguments": [
          {
            "name": "speed",
            "type": "number",
            "description": "Angular vertical move delta."
          }
        ]
      },
      {
        "name": "SetSideMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.\n\nSee also <page>CUserCmd:SetForwardMove</page> and  <page>CUserCmd:SetUpMove</page>.",
        "arguments": [
          {
            "name": "speed",
            "type": "number",
            "description": "The new speed to request."
          }
        ]
      }
    ]
  },
  {
    "name": "Entity",
    "functions": [
      {
        "name": "AddCallback",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.\n\nThis also allows you to use certain hooks in engine entities (non-scripted entities).\n\n<warning>This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.</warning>",
        "arguments": [
          {
            "name": "hook",
            "type": "string",
            "description": "The hook name to hook onto. See <page>Entity Callbacks</page>"
          },
          {
            "name": "func",
            "type": "function",
            "description": "The function to call"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The callback ID that was just added, which can later be used in <page>Entity:RemoveCallback</page>.\n\nReturns nothing if the passed callback function was invalid or when asking for a non-existent hook."
          }
        ]
      },
      {
        "name": "AddSolidFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adds solid flag(s) to the entity.",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The flag(s) to apply, see <page>Enums/FSOLID</page>."
          }
        ]
      },
      {
        "name": "AddToMotionController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adds a <page>PhysObj</page>ect to the entity's motion controller so that <page>ENTITY:PhysicsSimulate</page> will be called for given <page>PhysObj</page>ect as well.\n\nYou must first create a motion controller with <page>Entity:StartMotionController</page>.\n\nYou can remove added <page>PhysObj</page>ects by using <page>Entity:RemoveFromMotionController</page>.\n\n<note>Only works on a scripted <page>Entity</page> of anim type</note>",
        "arguments": [
          {
            "name": "physObj",
            "type": "PhysObj",
            "description": "The <page>PhysObj</page> to add to the motion controller."
          }
        ]
      },
      {
        "name": "BodyTarget",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Returns a centered vector of this entity, NPCs use this internally to aim at their targets.\n\n<note>This only works on players and NPCs.</note>",
        "arguments": [
          {
            "name": "origin",
            "type": "Vector",
            "description": "The vector of where the the attack comes from."
          },
          {
            "name": "noisy",
            "type": "boolean",
            "default": "false",
            "description": "Decides if it should return the centered vector with a random offset to it."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The centered vector."
          }
        ]
      },
      {
        "name": "ClearAllOutputs",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Clears all registered events for map I/O outputs on this entity. If a string is given, will use the string as a wildcard to limit removed outputs by name matches.",
        "arguments": [
          {
            "name": "outputName",
            "type": "string",
            "default": "nil",
            "description": "An optional string that will be used to limit removed outputs by name matches, supports wildcards."
          }
        ]
      },
      {
        "name": "ClearPoseParameters",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Resets all pose parameters such as aim_yaw, aim_pitch and rotation."
      },
      {
        "name": "DestroyBoneFollowers",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Destroys bone followers created by <page>Entity:CreateBoneFollowers</page>.\n\n<note>This function only works on `anim` type entities.</note>"
      },
      {
        "name": "DestroyShadow",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "description": "Removes the shadow for the entity.\n\nThe shadow will be recreated as soon as the entity wakes.\n\n<note>\nDoesn't affect shadows from flashlight/lamps/env_projectedtexture.</note>"
      },
      {
        "name": "DispatchTraceAttack",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Performs a trace attack towards the entity this function is called on. Visually identical to <page>Entity:TakeDamageInfo</page>.\n\n<warning>Calling this function on the victim entity in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>",
        "arguments": [
          {
            "name": "damageInfo",
            "type": "CTakeDamageInfo",
            "description": "The damage to apply."
          },
          {
            "name": "traceRes",
            "type": "table",
            "description": "Trace result to use to deal damage. See <page>Structures/TraceResult</page>"
          },
          {
            "name": "dir",
            "type": "Vector",
            "default": "traceRes.HitNormal",
            "description": "Direction of the attack."
          }
        ]
      },
      {
        "name": "Extinguish",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Extinguishes the entity if it is on fire.\n\nHas no effect if called inside <page>GM:EntityTakeDamage</page> (and the attacker is the flame that's hurting the entity)\n\nSee also <page>Entity:Ignite</page>."
      },
      {
        "name": "FollowBone",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Makes an entity follow another entity's bone.\n\nInternally this function calls <page>Entity:SetParent</page>( parent, boneid ), <page>Entity:AddEffects</page>( EF_FOLLOWBONE\n) and sets an internal flag to always rebuild all bones.\n<note>If the entity vibrates or stops following the parent, you probably need to run <page>Entity:SetPredictable</page>( true ) clientside.</note>\n<warning>This function will not work if the target bone's parent bone is invalid or if the bone is not used by VERTEX LOD0</warning>",
        "arguments": [
          {
            "name": "parent",
            "type": "Entity",
            "default": "NULL",
            "description": "The entity to follow the bone of. If unset, removes the FollowBone effect."
          },
          {
            "name": "boneid",
            "type": "number",
            "description": "The bone to follow"
          }
        ]
      },
      {
        "name": "GetAnimTimeInterval",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the amount of time since last animation.\n\nWorks only on `CBaseAnimating` entities.",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of time since last animation."
          }
        ]
      },
      {
        "name": "GetBaseVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity's base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The base velocity of the entity."
          }
        ]
      },
      {
        "name": "GetBoneController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the value of the bone controller with the specified ID.\n\n<note>This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.</note>",
        "arguments": [
          {
            "name": "boneID",
            "type": "number",
            "description": "ID of the bone controller. Goes from 0 to 3."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The value set on the bone controller."
          }
        ]
      },
      {
        "name": "GetBoneCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the amount of bones in the entity.\n\n<note>Will return `0` for <page>Global.ClientsideModel</page> or undrawn entities until <page>Entity:SetupBones</page> is called on the entity.</note>",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of bones in given entity."
          }
        ]
      },
      {
        "name": "GetBonePosition",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the position and angle of the given attachment, relative to the world.\n\n<warning>This function can return entity's `GetPos()` instead if the entity doesn't have it's bone cache set up.\n\nTo ensure the bone position is correct use this:\n```lua\nlocal pos = ent:GetBonePosition(0)\nif pos == ent:GetPos() then\npos = ent:GetBoneMatrix(0):GetTranslation()\nend\n```\n</warning>\n\n<note>This function returns the bone position from the last tick, so if your framerate is higher than the server's tickrate it may appear to lag behind if used on a fast moving entity. You can fix this by using the bone's matrix instead:\n```lua\nlocal matrix = entity:GetBoneMatrix(0)\nlocal pos = matrix:GetTranslation()\nlocal ang = matrix:GetAngles()\n```\n</note>\n\n<bug issue=\"884\">This can return the server's position during server lag.</bug>\n\n<bug issue=\"3285\">This can return garbage serverside or <page>Global.Vector</page>(0,0,0) for v49 models.</bug>\n\n<bug issue=\"3739\">This can return garbage if a trace passed through the target bone during bone matrix access.</bug>",
        "arguments": [
          {
            "name": "boneIndex",
            "type": "number",
            "description": "The bone index of the bone to get the position of, starting at index 0. See <page>Entity:LookupBone</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The bone's position relative to the world. It can return nothing if the requested bone is out of bounds, or the entity has no model."
          },
          {
            "type": "Angle",
            "description": "The bone's angle relative to the world."
          }
        ]
      },
      {
        "name": "GetBrushSurfaces",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a table of brushes surfaces for brush model entities.",
        "returnValues": [
          {
            "type": "table",
            "description": "Table of <page>SurfaceInfo</page>s if the entity has a brush model, or <page>no value</page> otherwise."
          }
        ]
      },
      {
        "name": "GetCallbacks",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the specified hook callbacks for this entity added with <page>Entity:AddCallback</page>\n\nThe callbacks can then be removed with <page>Entity:RemoveCallback</page>.",
        "arguments": [
          {
            "name": "hook",
            "type": "string",
            "description": "The hook to retrieve the callbacks from, see <page>Entity Callbacks</page> for the possible hooks."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing the callbackid and function of all the callbacks for the specified hook"
          }
        ]
      },
      {
        "name": "GetChildBones",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns ids of child bones of given bone.",
        "arguments": [
          {
            "name": "boneid",
            "type": "number",
            "description": "Bone id to lookup children of"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table of bone ids"
          }
        ]
      },
      {
        "name": "GetCollisionGroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity's collision group",
        "returnValues": [
          {
            "type": "number",
            "description": "The collision group. See <page>Enums/COLLISION_GROUP</page>"
          }
        ]
      },
      {
        "name": "GetConstrainedEntities",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "ent1"
          },
          {
            "type": "Entity",
            "description": "ent2"
          }
        ]
      },
      {
        "name": "GetCustomCollisionCheck",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether this entity uses custom collision check set by <page>Entity:SetCustomCollisionCheck</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this entity uses custom collision check or not"
          }
        ]
      },
      {
        "name": "GetCycle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.",
        "returnValues": [
          {
            "type": "number",
            "description": "The frame of the currently played sequence"
          }
        ]
      },
      {
        "name": "GetDTEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nReturns an entity stored in the datatable of the entity.",
        "arguments": [
          {
            "name": "key",
            "type": "number",
            "description": "Goes from 0 to 31.\nSpecifies what key to grab from datatable."
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "Requested entity."
          }
        ]
      },
      {
        "name": "GetEffects",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a bit flag of all engine effect flags of the entity.",
        "returnValues": [
          {
            "type": "number",
            "description": "Engine effect flags, see <page>Enums/EF</page>"
          }
        ]
      },
      {
        "name": "GetElasticity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.",
        "returnValues": [
          {
            "type": "number",
            "description": "elasticity"
          }
        ]
      },
      {
        "name": "GetFlexNum",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the number of flex controllers this entity's model has.\n\n<note>Please note that while this function can return the real number of flex controllers, the game supports only a certain amount due to networking limitations. See <page>Entity:SetFlexWeight</page>.</note>",
        "returnValues": [
          {
            "type": "number",
            "description": "The number of flexes."
          }
        ]
      },
      {
        "name": "GetForward",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the forward vector of the entity, as a normalized direction vector",
        "returnValues": [
          {
            "type": "Vector",
            "description": "forwardDir"
          }
        ]
      },
      {
        "name": "GetGroundEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the object the entity is standing on.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The ground entity."
          }
        ]
      },
      {
        "name": "GetGroundSpeedVelocity",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Returns the entity's ground speed velocity, which is based on the entity's walk/run speed and/or the ground speed of their sequence ( <page>Entity:GetSequenceGroundSpeed</page> ). Will return an empty <page>Vector</page> if the entity isn't moving on the ground.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The ground speed velocity."
          }
        ]
      },
      {
        "name": "GetKeyValues",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Returns a table containing all key values the entity has.\n\nSingle key values can usually be retrieved with <page>Entity:GetInternalVariable</page>.\n\n<note>This only includes engine defined key values. For custom key values, use <page>GM:EntityKeyValue</page> or <page>ENTITY:KeyValue</page> to capture and store them.</note>\n\nHere's a list of keyvalues that will not appear in this list, as they are not stored/defined as actual keyvalues internally:\n* rendercolor - <page>Entity:GetColor</page> (Only RGB)\n* rendercolor32 - <page>Entity:GetColor</page> (RGBA)\n* renderamt - <page>Entity:GetColor</page> (Alpha)\n* disableshadows - <page text=\"EF_NOSHADOW\">Enums/EF#EF_NOSHADOW</page>\n* mins - <page>Entity:GetCollisionBounds</page>\n* maxs - <page>Entity:GetCollisionBounds</page>\n* disablereceiveshadows - <page text=\"EF_NORECEIVESHADOW\">Enums/EF#EF_NORECEIVESHADOW</page>\n* nodamageforces - <page text=\"EFL_NO_DAMAGE_FORCES\">Enums/EFL#EFL_NO_DAMAGE_FORCES</page>\n* angle - <page>Entity:GetAngles</page>\n* angles - <page>Entity:GetAngles</page>\n* origin - <page>Entity:GetPos</page>\n* targetname - <page>Entity:GetName</page>",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of key values."
          }
        ]
      },
      {
        "name": "GetMomentaryRotButtonPos",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.\n\n<warning>This only works on momentary_rot_button entities.</warning>",
        "arguments": [
          {
            "name": "turnAngle",
            "type": "Angle",
            "description": "The angle of rotation to compare - usually should be <page>Entity:GetAngles</page>."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button."
          }
        ]
      },
      {
        "name": "GetMoveType",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity's movetype",
        "returnValues": [
          {
            "type": "number",
            "description": "Move type. See <page>Enums/MOVETYPE</page>"
          }
        ]
      },
      {
        "name": "GetNetworked2Angle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Retrieves a networked angle value at specified index on the entity that is set by <page>Entity:SetNetworked2Angle</page>.\n<deprecated>You should be using <page>Entity:GetNW2Angle</page> instead.</deprecated>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that is associated with the value"
          },
          {
            "name": "fallback",
            "type": "any",
            "default": "Angle( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)"
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The value associated with the key"
          }
        ]
      },
      {
        "name": "GetNetworked2Bool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Retrieves a networked boolean value at specified index on the entity that is set by <page>Entity:SetNetworked2Bool</page>.\n<deprecated>You should be using <page>Entity:GetNW2Bool</page> instead.</deprecated>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that is associated with the value"
          },
          {
            "name": "fallback",
            "type": "any",
            "default": "false",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)"
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The value associated with the key"
          }
        ]
      },
      {
        "name": "GetNetworked2Float",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Retrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNetworked2Float</page>.\n<deprecated>You should be using <page>Entity:GetNW2Float</page> instead.</deprecated>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that is associated with the value"
          },
          {
            "name": "fallback",
            "type": "any",
            "default": "0",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)"
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The value associated with the key"
          }
        ]
      },
      {
        "name": "GetNetworkedInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWInt</page> instead.</deprecated>\n\nRetrieves a networked integer value at specified index on the entity that is set by <page>Entity:SetNetworkedInt</page>.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that is associated with the value"
          },
          {
            "name": "fallback",
            "type": "number",
            "default": "0",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The retrieved value"
          }
        ]
      },
      {
        "name": "GetNetworkedString",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWString</page> instead.</deprecated>\n\nRetrieves a networked string value at specified index on the entity that is set by <page>Entity:SetNetworkedString</page>.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that is associated with the value"
          },
          {
            "name": "fallback",
            "type": "string",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The retrieved value"
          }
        ]
      },
      {
        "name": "GetNW2Entity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Retrieves a networked entity value at specified index on the entity that is set by <page>Entity:SetNW2Entity</page>.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that is associated with the value"
          },
          {
            "name": "fallback",
            "type": "any",
            "default": "NULL",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)"
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The value associated with the key"
          }
        ]
      },
      {
        "name": "GetNWVarTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns all the networked variables in an entity.",
        "returnValues": [
          {
            "type": "table",
            "description": "Key-Value table of all networked variables."
          }
        ]
      },
      {
        "name": "GetParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the parent entity of this entity.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "parentEntity"
          }
        ]
      },
      {
        "name": "GetParentPhysNum",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent.",
        "returnValues": [
          {
            "type": "number",
            "description": "The physics object id, or nil if the entity has no parent"
          }
        ]
      },
      {
        "name": "GetPhysicsObject",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity's physics object, if the entity has physics.\n\n<note>Entities don't have clientside physics objects by default, so this will return `[NULL PHYSOBJ]` on the client in most cases.</note>",
        "returnValues": [
          {
            "type": "PhysObj",
            "description": "The entity's physics object."
          }
        ]
      },
      {
        "name": "GetPos",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets the position of entity in world.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The position of the entity."
          }
        ]
      },
      {
        "name": "GetRagdollOwner",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity which the ragdoll came from. The opposite of <page>Player:GetRagdollEntity</page>.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity who owns the ragdoll."
          }
        ]
      },
      {
        "name": "GetSaveTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a table of save values for an entity.\n\nThese tables are not the same between the client and the server, and different entities may have different fields.\n\nYou can get the list different fields an entity has by looking at it's source code (the 2013 SDK can be found [online](https://github.com/ValveSoftware/source-sdk-2013)). Accessible fields are defined by each `DEFINE_FIELD` and `DEFINE_KEYFIELD` inside the `DATADESC` block.\n\nTake the headcrab, for example:\n\n```\nBEGIN_DATADESC( CBaseHeadcrab )\n// m_nGibCount - don't save\nDEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),\nDEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),\nDEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),\nDEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),\n\nDEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, \"startburrowed\" ),\nDEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),\nDEFINE_FIELD( m_nContext, FIELD_INTEGER ),\nDEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),\nDEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),\n\nDEFINE_INPUTFUNC( FIELD_VOID, \"Burrow\", InputBurrow ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"BurrowImmediate\", InputBurrowImmediate ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"Unburrow\", InputUnburrow ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"StartHangingFromCeiling\", InputStartHangingFromCeiling ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"DropFromCeiling\", InputDropFromCeiling ),\n\n// Function Pointers\nDEFINE_THINKFUNC( EliminateRollAndPitch ),\nDEFINE_THINKFUNC( ThrowThink ),\nDEFINE_ENTITYFUNC( LeapTouch ),\nEND_DATADESC()\n```\n\n* For each **DEFINE_FIELD**, the save table will have a key with name of **first** argument.\n* For each **DEFINE_KEYFIELD**, the save table will have a key with name of the **third** argument.\n\nSee <page>Entity:GetInternalVariable</page> for only retrieving one key of the save table.",
        "arguments": [
          {
            "name": "showAll",
            "type": "boolean",
            "description": "If set, shows all variables, not just the ones for save."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing all save values in key/value format.\n\nThe value may be a sequential table (starting to **1**) if the field in question is an array in engine."
          }
        ]
      },
      {
        "name": "GetSequenceMoveDist",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns an entity's sequence move distance (the change in position over the course of the entire sequence).\n\nSee <page>Entity:GetSequenceMovement</page> for a similar function with more options.",
        "arguments": [
          {
            "name": "sequenceId",
            "type": "number",
            "description": "The sequence index."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The move distance of the sequence."
          }
        ]
      },
      {
        "name": "GetSequenceName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Return the name of the sequence for the index provided.\nRefer to <page>Entity:GetSequence</page> to find the current active sequence on this entity.\n\nSee <page>Entity:LookupSequence</page> for a function that does the opposite.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the sequence to look up."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Name of the sequence."
          }
        ]
      },
      {
        "name": "GetShouldPlayPickupSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Checks if the entity plays a sound when picked up by a player.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` if it plays the pickup sound, `false` otherwise."
          }
        ]
      },
      {
        "name": "GetTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the table that contains all script values saved within the entity.",
        "returnValues": [
          {
            "type": "table",
            "description": "The entity's Lua table."
          }
        ]
      },
      {
        "name": "GibBreakClient",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Causes the entity to break into its current models gibs, if it has any.\n\nYou must call <page>Entity:PrecacheGibs</page> on the entity before using this function, or it will not create any gibs.\n\nIf called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.\n\n<note>\nthis function will not remove or hide the entity it is called on.\nFor more expensive version of this function see <page>Entity:GibBreakServer</page>.\n</note>",
        "arguments": [
          {
            "name": "force",
            "type": "Vector",
            "description": "The force to apply to the created gibs."
          },
          {
            "name": "clr",
            "type": "table",
            "default": "nil",
            "description": "If set, this will be color of the broken gibs instead of the entity's color."
          }
        ]
      },
      {
        "name": "GibBreakServer",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Causes the entity to break into its current models gibs, if it has any.\n\nYou must call <page>Entity:PrecacheGibs</page> on the entity before using this function, or it will not create any gibs.\n\nThe gibs will be spawned on the server and be synchronized with all clients.\n\nNote, that this function will not remove or hide the entity it is called on.\n\nThis function is affected by `props_break_max_pieces_perframe` and `props_break_max_pieces` console variables.\n\n<warning>Large numbers of serverside gibs will cause lag.\n\nYou can avoid this cost by spawning the gibs on the client using <page>Entity:GibBreakClient</page></warning>\n\n<note>Despite existing on client, it doesn't actually do anything on client.</note>",
        "arguments": [
          {
            "name": "force",
            "type": "Vector",
            "description": "The force to apply to the created gibs"
          }
        ]
      },
      {
        "name": "HasSpawnFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether this entity has the specified spawnflags bits set.",
        "arguments": [
          {
            "name": "spawnFlags",
            "type": "number",
            "description": "The spawnflag bits to check, see <page>Enums/SF</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the entity has that spawnflag set or not."
          }
        ]
      },
      {
        "name": "Ignite",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Sets the entity on fire.\n\nSee also <page>Entity:Extinguish</page>.",
        "arguments": [
          {
            "name": "length",
            "type": "number",
            "description": "How long to keep the entity ignited, in seconds."
          },
          {
            "name": "radius",
            "type": "number",
            "default": "0",
            "description": "The radius of the ignition, will ignite everything around the entity that is in this radius."
          }
        ]
      },
      {
        "name": "IsConstraint",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Returns if entity is constraint or not",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is the entity a constraint or not"
          }
        ]
      },
      {
        "name": "IsOnGround",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether the entity is on ground or not.\n\nInternally, this checks if <page text=\"FL_ONGROUND\">Enums/FL</page> is set on the entity.\n\nThis function is an alias of <page>Entity:OnGround</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the entity is on ground or not."
          }
        ]
      },
      {
        "name": "IsPointInBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether a given point is within the entity's Orientated Bounding Box.\n\nThis relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`.",
        "arguments": [
          {
            "name": "point",
            "type": "Vector",
            "description": "The point to test, in world space coordinates."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the point is within the entity's bounds."
          }
        ]
      },
      {
        "name": "IsSolid",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns if the entity is solid or not.\nVery useful for determining if the entity is a trigger or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the entity is solid or not."
          }
        ]
      },
      {
        "name": "IsValid",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether the entity is a valid entity or not.\n\nAn entity is valid if:\n* It is not a <page text=\"NULL\">Global_Variables</page> entity\n* It is not the worldspawn entity (<page>game.GetWorld</page>)\n\n<note>Instead of calling this method directly, it's a good idea to call the global <page>Global.IsValid</page> instead, however if you're sure the variable you're using is always an entity object it's better to use this method</note>\n\nIt will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples.\n\n<warning>NULL entities can still be assigned with key/value pairs, but they will be instantly negated. See example 3</warning>\nThis might be a cause for a lot of headache. Usually happening during networking etc., when completely valid entities suddenly become invalid on the client, but are never filtered with IsValid(). See <page>GM:InitPostEntity</page> for more details.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "true if the entity is valid, false otherwise"
          }
        ]
      },
      {
        "name": "MakePhysicsObjectAShadow",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Turns the <page>Entity:GetPhysicsObject</page> into a physics shadow.\nIt's used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.\n\nA physics shadow can be used to have static entities that never move by setting both arguments to false.\n\n<note>Unlike <page>Entity:PhysicsInitShadow</page>, this function doesn't remove the current physics object.</note>",
        "arguments": [
          {
            "name": "allowPhysicsMovement",
            "type": "boolean",
            "default": "true",
            "description": "Whether to allow the physics shadow to move under stress."
          },
          {
            "name": "allowPhysicsRotation",
            "type": "boolean",
            "default": "true",
            "description": "Whether to allow the physics shadow to rotate under stress."
          }
        ]
      },
      {
        "name": "MarkShadowAsDirty",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "description": "Refreshes the shadow of the entity."
      },
      {
        "name": "NearestPoint",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Performs a Ray-Orientated Bounding Box intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox.\n\nThis relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`",
        "arguments": [
          {
            "name": "position",
            "type": "Vector",
            "description": "The vector to start the intersection from."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The nearest hit point of the entity's bounding box in world coordinates."
          }
        ]
      },
      {
        "name": "NetworkVarNotify",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Creates a callback that will execute when the given network variable changes - that is, when the `Set<name>()` function is run.\n\n<note>The callback is executed **before** the value is changed, and is called even if the new and old values are the same.\n\nThis function does not exist on entities in which <page>Entity:InstallDataTable</page> has not been called. By default, this means this function only exists on SENTs (both serverside and clientside) and on players with a <page text=\"Player Class\">Player_Classes</page> (serverside and clientside <page>Global.LocalPlayer</page> only). It's therefore safest to only use this in <page>ENTITY:SetupDataTables</page>.</note>\n\n<bug request=\"324\">The callback will not be called clientside if the var is changed right after entity spawn.</bug>\n</name>",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of variable to track changes of."
          },
          {
            "name": "callback",
            "type": "function",
            "description": "The function to call when the variable changes. It is passed 4 arguments:\n* <page>Entity</page> entity - Entity whos variable changed.\n* <page>string</page> name - Name of changed variable.\n* <page>any</page> old - Old/current variable value.\n* <page>any</page> new - New variable value that it was set to."
          }
        ]
      },
      {
        "name": "OBBCenter",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the center of an entity's bounding box in local space.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The center of an entity's bounding box relative to its <page>Entity:GetPos</page>."
          }
        ]
      },
      {
        "name": "PassesDamageFilter",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Tests whether the damage passes the entity filter.\n\nThis will call <page>ENTITY:PassesDamageFilter</page> on scripted entities of the type \"filter\".\n\n<note>This function only works on entities of the type \"filter\". ( filter_* entities, including base game filter entites )</note>",
        "arguments": [
          {
            "name": "dmg",
            "type": "CTakeDamageInfo",
            "description": "The damage info to test"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the damage info passes the entity filter."
          }
        ]
      },
      {
        "name": "PhysicsDestroy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Destroys the current physics object of an entity.\n\n<note>Cannot be used on a ragdoll or the world entity.</note>"
      },
      {
        "name": "PhysicsInitSphere",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Makes the physics object of the entity a sphere.\n\nThis function will automatically destroy any previous physics objects and do the following:\n* <page>Entity:SetSolid</page>( `SOLID_BBOX` )\n* <page>Entity:SetMoveType</page>( `MOVETYPE_VPHYSICS` )\n\n<bug issue=\"5060\">Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nA workaround is available on the <page>Entity:PhysicsInitConvex</page> page.</bug>",
        "arguments": [
          {
            "name": "radius",
            "type": "number",
            "description": "The radius of the sphere."
          },
          {
            "name": "physmat",
            "type": "string",
            "default": "default",
            "description": "Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with <page>physenv.AddSurfaceData</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns `true` on success, `false` otherwise"
          }
        ]
      },
      {
        "name": "RagdollStopControlling",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Sets the function to build the ragdoll. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity."
      },
      {
        "name": "RemoveInternalConstraint",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Breaks internal Ragdoll constrains, so you can for example separate an arm from the body of a ragdoll and preserve all physics.\n\nThe visual mesh will still stretch as if it was properly connected unless the ragdoll model is specifically designed to avoid that.",
        "arguments": [
          {
            "name": "num",
            "type": "number",
            "default": "-1",
            "description": "Which constraint to break, values below 0 mean break them all"
          }
        ]
      },
      {
        "name": "ResetSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Plays an animation on the entity. This may not always work on engine entities.\n\n<warning>This will not reset the animation on viewmodels, use <page>Entity:SendViewModelMatchingSequence</page> instead.</warning>\n\n<note>This will not work properly if called directly after calling <page>Entity:SetModel</page>. Consider waiting until the next Tick.\n\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See <page>GM:CalcMainActivity</page>.\n\nFor custom scripted entities you will want to apply example from <page>ENTITY:Think</page> to make animations work.</note>",
        "arguments": [
          {
            "name": "sequence",
            "type": "number",
            "description": "The sequence to play. Also accepts strings.\n\n<note>If set to a string, the function will automatically call <page>Entity:LookupSequence</page> to retrieve the sequence ID as a number.</note>"
          }
        ]
      },
      {
        "name": "SetAnimation",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets a player's third-person animation. Mainly used by <page>Weapon</page>s to start the player's weapon attack and reload animations.",
        "arguments": [
          {
            "name": "playerAnim",
            "type": "number",
            "description": "Player animation, see <page>Enums/PLAYER</page>."
          }
        ]
      },
      {
        "name": "SetBodygroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets an entities' bodygroup.\n<note>If called for Weapon (after Initialize hook) with different body groups on world model and view model, check will occur by view model.</note>",
        "arguments": [
          {
            "name": "bodygroup",
            "type": "number",
            "description": "The id of the bodygroup you're setting. Starts from 0."
          },
          {
            "name": "value",
            "type": "number",
            "description": "The value you're setting the bodygroup to. Starts from 0."
          }
        ]
      },
      {
        "name": "SetCollisionBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the collision bounds for the entity, which are used for triggers (<page>Entity:SetTrigger</page>, <page>ENTITY:Touch</page>), and collision (If <page>Entity:SetSolid</page> set as <page text=\"SOLID_BBOX\">Enums/SOLID</page>).\n\nInput bounds are relative to <page>Entity:GetPos</page>!\nSee also <page>Entity:SetCollisionBoundsWS</page>.\n\n<note>Player collision bounds are reset every frame to player's <page>Player:SetHull</page> values.</note>",
        "arguments": [
          {
            "name": "mins",
            "type": "Vector",
            "description": "The minimum vector of the bounds."
          },
          {
            "name": "maxs",
            "type": "Vector",
            "description": "The maximum vector of the bounds."
          }
        ]
      },
      {
        "name": "SetCollisionBoundsWS",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "A convenience function that sets the collision bounds for the entity in world space coordinates by transforming given vectors to entity's local space and passing them to <page>Entity:SetCollisionBounds</page>",
        "arguments": [
          {
            "name": "vec1",
            "type": "Vector",
            "description": "The first vector of the bounds."
          },
          {
            "name": "vec2",
            "type": "Vector",
            "description": "The second vector of the bounds."
          }
        ]
      },
      {
        "name": "SetCollisionGroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the entity's collision group.",
        "arguments": [
          {
            "name": "group",
            "type": "number",
            "description": "Collision group of the entity, see <page>Enums/COLLISION_GROUP</page>"
          }
        ]
      },
      {
        "name": "SetEyeTarget",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the position an entity's eyes look toward. This works as an override for default behavior. Set to `0,0,0` to disable the override.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "If NPC, the **world position** for the entity to look towards, for Ragdolls, a **local position** in front of their `eyes` attachment."
          }
        ]
      },
      {
        "name": "SetGravity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the gravity multiplier of the entity.\n\n<bug issue=\"3648\">This function is not predicted.</bug>\n<note>This only works on players</note>",
        "arguments": [
          {
            "name": "gravityMultiplier",
            "type": "number",
            "description": "Value which specifies the gravity multiplier."
          }
        ]
      },
      {
        "name": "SetHitboxSet",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the current Hitbox set for the entity.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "The new hitbox set to set. Can be a name as a <page>string</page>, or the ID as a <page>number</page>.\n\nIf the operation failed, the function will silently fail."
          }
        ]
      },
      {
        "name": "SetKeyValue",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets Hammer key values on an entity.\n\nYou can look up which entities have what key values on the [Valve Developer Community](https://developer.valvesoftware.com/wiki/) on entity pages.\n\n\nA  list of basic entities can be found [here](https://developer.valvesoftware.com/wiki/List_of_entities).\n\nAlternatively you can look at the .fgd files shipped with Garry's Mod in the bin/ folder with a text editor to see the key values as they appear in Hammer.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The internal key name"
          },
          {
            "name": "value",
            "type": "string",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetLayerCycle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the animation cycle/frame of given layer.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "arguments": [
          {
            "name": "layerID",
            "type": "number",
            "description": "The Layer ID"
          },
          {
            "name": "cycle",
            "type": "number",
            "description": "The new animation cycle/frame for given layer."
          }
        ]
      },
      {
        "name": "SetLayerPlaybackRate",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the layer playback rate. See also <page>Entity:SetLayerDuration</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "arguments": [
          {
            "name": "layerID",
            "type": "number",
            "description": "The Layer ID"
          },
          {
            "name": "rate",
            "type": "number",
            "description": "The new playback rate."
          }
        ]
      },
      {
        "name": "SetMaxHealth",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Sets the maximum health for entity. Note, that you can still set entity's health above this amount with <page>Entity:SetHealth</page>.",
        "arguments": [
          {
            "name": "maxhealth",
            "type": "number",
            "description": "What the max health should be"
          }
        ]
      },
      {
        "name": "SetModel",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the model of the entity.\n\nThis does not update the physics of the entity - see <page>Entity:PhysicsInit</page>.\n\n<warning>This silently fails when given an empty string.</warning>",
        "arguments": [
          {
            "name": "modelName",
            "type": "string",
            "description": "New model value."
          }
        ]
      },
      {
        "name": "SetModelName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Alter the model name returned by <page>Entity:GetModel</page>. Does not affect the entity's actual model.",
        "arguments": [
          {
            "name": "modelname",
            "type": "string",
            "description": "The new model name."
          }
        ]
      },
      {
        "name": "SetName",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Sets the mapping name of the entity.",
        "arguments": [
          {
            "name": "mappingName",
            "type": "string",
            "description": "The name to set for the entity."
          }
        ]
      },
      {
        "name": "SetNetworkAngles",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "description": "Alters the entity's perceived serverside angle on the client.",
        "arguments": [
          {
            "name": "angle",
            "type": "Angle",
            "description": "Networked angle."
          }
        ]
      },
      {
        "name": "SetNetworked2Int",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets a networked integer (whole number) value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Int</page> both from client and server.\n\nSee <page>Entity:SetNW2Float</page> for numbers that aren't integers.\n<deprecated>You should be using <page>Entity:SetNW2Int</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS.\nThe integer has a 32 bit limit. Use <page>Entity:SetNWInt</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key to associate the value with"
          },
          {
            "name": "value",
            "type": "number",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetNetworked2Vector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets a networked vector value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Vector</page> both from client and server.\n\n<deprecated>You should be using <page>Entity:SetNW2Vector</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWVector</page> instead</warning>\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key to associate the value with"
          },
          {
            "name": "value",
            "type": "Vector",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetNetworkedInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWInt</page> instead.</deprecated>\n\nSets a networked integer value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedInt</page> both from client and server.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key to associate the value with"
          },
          {
            "name": "value",
            "type": "number",
            "default": "0",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetNetworkedVar",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets a networked value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworkedVar</page> both from client and server.\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<deprecated></deprecated>\n<warning>Trying to network a type that is not listed above leads to the value not being networked!\nthe value will only be updated clientside if the entity is or enters the clients PVS.</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key to associate the value with"
          },
          {
            "name": "value",
            "type": "any",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetNW2Bool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets a networked boolean value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Bool</page> both from client and server.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWBool</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key to associate the value with"
          },
          {
            "name": "value",
            "type": "boolean",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetNW2Entity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets a networked entity value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Entity</page> both from client and server.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWEntity</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key to associate the value with"
          },
          {
            "name": "value",
            "type": "Entity",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetNW2Var",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets a networked value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Var</page> both from client and server.\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<warning>Trying to network a type that is not listed above leads to the value not being networked!\nthe value will only be updated clientside if the entity is or enters the clients PVS.</warning>\n\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key to associate the value with"
          },
          {
            "name": "value",
            "type": "any",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetOwner",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the owner of this entity, disabling all physics interaction with it.\n\n<note>This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not.</note>",
        "arguments": [
          {
            "name": "owner",
            "type": "Entity",
            "default": "NULL",
            "description": "The entity to be set as owner."
          }
        ]
      },
      {
        "name": "SetParentPhysNum",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the parent of an entity to another entity with the given physics bone number. Similar to <page>Entity:SetParent</page>, except it is parented to a physbone. This function is useful mainly for ragdolls.\n\n<note>Despite this function being available server side, it doesn't actually do anything server side.</note>",
        "arguments": [
          {
            "name": "bone",
            "type": "number",
            "description": "Physics bone number to attach to. Use 0 for objects with only one physics bone. (See <page>Entity:GetPhysicsObjectNum</page>)"
          }
        ]
      },
      {
        "name": "SetPredictable",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "description": "Sets whether an entity should be predictable or not.\nWhen an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.\n\nAny datatable value that mismatches from the server will be overridden and a prediction error will be spewed.\n\nWeapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.\n\nVisit  for a list of all predicted hooks, and the <page>Prediction</page> page.\nFor further technical information on the subject, visit [valve's wiki](https://developer.valvesoftware.com/wiki/Prediction).\n\n<note>This function resets the datatable variables everytime it's called, it should ideally be called when a player starts using the entity and when he stops</note>\n<note>Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit <page>GM:NotifyShouldTransmit</page></note>",
        "arguments": [
          {
            "name": "setPredictable",
            "type": "boolean",
            "description": "whether to make this entity predictable or not."
          }
        ]
      },
      {
        "name": "SetRenderOrigin",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "description": "Set the render origin override, a position where the Entity will be rendered at.",
        "arguments": [
          {
            "name": "newOrigin",
            "type": "Vector",
            "default": "nil",
            "description": "The new origin in world coordinates where the Entity's model will now be rendered at. To disable the override, set to <page>nil</page>."
          }
        ]
      },
      {
        "name": "SetSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the entity's model sequence.\n\nIf the specified sequence is already active, the animation will not be restarted. See <page>Entity:ResetSequence</page> for a function that restarts the animation even if it is already playing.\n\nIn some cases you want to run <page>Entity:ResetSequenceInfo</page> to make this function run.\n\n<note>This will not work properly if called directly after calling <page>Entity:SetModel</page>. Consider waiting until the next Tick.\n\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See <page>GM:CalcMainActivity</page>.\n\nFor custom scripted entities you will want to apply example from <page>ENTITY:Think</page> to make animations work.</note>",
        "arguments": [
          {
            "name": "sequenceId",
            "type": "number",
            "description": "The sequence to play. Also accepts strings.\n\n<note>If set to a string, the function will automatically call <page>Entity:LookupSequence</page> to retrieve the sequence ID as a number.</note>"
          }
        ]
      },
      {
        "name": "SetSkin",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the skin of the entity.",
        "arguments": [
          {
            "name": "skinIndex",
            "type": "number",
            "description": "0-based index of the skin to use."
          }
        ]
      },
      {
        "name": "SetTransmitWithParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).\n\n<note>In the case of scripted entities, this will override <page>ENTITY:UpdateTransmitState</page></note>",
        "arguments": [
          {
            "name": "onoff",
            "type": "boolean",
            "description": "Will set the TransmitWithParent flag on or off"
          }
        ]
      },
      {
        "name": "SetUnFreezable",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "description": "Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.",
        "arguments": [
          {
            "name": "freezable",
            "type": "boolean",
            "default": "false",
            "description": "True to make the entity unfreezable, false otherwise."
          }
        ]
      },
      {
        "name": "SetupBones",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "description": "Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales or when manually drawing the entity multiple times at different positions.\n\n<note>This calls the BuildBonePositions callback added via <page>Entity:AddCallback</page>, so avoid calling this function inside it to prevent an infinite loop.</note>"
      },
      {
        "name": "SetupPhonemeMappings",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "description": "Initializes the class names of an entity's phoneme mappings (mouth movement data). This is called by default with argument \"phonemes\" when a flex-based entity (such as an <page>NPC</page>) is created.\n\n<note>TF2 phonemes can be accessed by using a path such as \"player/scout/phonemes/phonemes\" , check TF2's \"tf2_misc_dir.vpk\" with GCFScape for other paths, however it seems that TF2 sounds don't contain phoneme definitions anymore after being converted to mp3 and only rely on VCD animations, this needs to be further investigated</note>",
        "arguments": [
          {
            "name": "fileRoot",
            "type": "string",
            "description": "The file prefix of the phoneme mappings (relative to \"garrysmod/expressions/\")."
          }
        ]
      },
      {
        "name": "SetVar",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows to quickly set variable to entity's <page>Entity:GetTable</page>.\n\n<note>This will not network the variable to client(s). You want <page>Entity:SetNWString</page> and similar functions for that</note>",
        "arguments": [
          {
            "name": "key",
            "type": "any",
            "description": "Key of the value to set"
          },
          {
            "name": "value",
            "type": "any",
            "description": "Value to set the variable to"
          }
        ]
      },
      {
        "name": "SetWeaponModel",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the model and associated weapon to this viewmodel entity.\n\nThis is used internally when the player switches weapon.\n\n<note>View models are not drawn without a weapons associated to them.</note>\n<warning>This will silently fail if the entity is not a viewmodel.</warning>",
        "arguments": [
          {
            "name": "viewModel",
            "type": "string",
            "description": "The model string to give to this viewmodel.\nExample: \"models/weapons/c_smg1.mdl\""
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "default": "NULL",
            "description": "The weapon entity to associate this viewmodel to."
          }
        ]
      },
      {
        "name": "StartLoopingSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Starts a \"looping\" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.\n\nThis function is almost identical to <page>Global.CreateSound</page>, with the exception of the sound being created in the STATIC channel and with normal attenuation.\n\nSee also <page>Entity:StopLoopingSound</page>",
        "arguments": [
          {
            "name": "sound",
            "type": "string",
            "description": "Sound to play. Can be either a sound script or a filepath."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The ID number of started sound starting with 0, or -1 if we failed for some reason."
          }
        ]
      },
      {
        "name": "StopParticles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Stops any attached to the entity .pcf particles using <page>Global.ParticleEffectAttach</page> or <page>Global.ParticleEffect</page>.\n\nOn client, this is the same as <page>Entity:StopParticleEmission</page>. ( and you should use StopParticleEmission instead )\n\n\nOn server, this is the same as running <page>Entity:StopParticleEmission</page> on every client."
      },
      {
        "name": "TranslateBoneToPhysBone",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the ID of a <page>PhysObj</page> attached to the given bone. To be used with <page>Entity:GetPhysicsObjectNum</page>.\n\nSee <page>Entity:TranslatePhysBoneToBone</page> for reverse function.",
        "arguments": [
          {
            "name": "boneID",
            "type": "number",
            "description": "The ID of a bone to look up the \"physics root\" bone of."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The <page>PhysObj</page> ID of the given bone.\n\n* -1 if we somehow cannot translate"
          }
        ]
      },
      {
        "name": "WorldSpaceAABB",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns two vectors representing the minimum and maximum extent of the entity's axis-aligned bounding box (which is calculated from entity's collision bounds.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The minimum vector for the entity's bounding box in world space."
          },
          {
            "type": "Vector",
            "description": "The maximum vector for the entity's bounding box in world space."
          }
        ]
      },
      {
        "name": "WorldToLocalAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "description": "Converts world angles to local angles ( local to the entity )",
        "arguments": [
          {
            "name": "ang",
            "type": "Angle",
            "description": "The world angles"
          }
        ],
        "returnValues": [
          {
            "type": "Angle",
            "description": "The local angles"
          }
        ]
      }
    ]
  },
  {
    "name": "File",
    "functions": [
      {
        "name": "ReadULong",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Reads an unsigned little-endian 32-bit integer from the file.",
        "returnValues": [
          {
            "type": "number",
            "description": "An unsigned 32-bit integer"
          }
        ]
      },
      {
        "name": "WriteFloat",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Writes an IEEE 754 little-endian 4-byte float to the file.",
        "arguments": [
          {
            "name": "float",
            "type": "number",
            "description": "The float to be written to the file."
          }
        ]
      }
    ]
  },
  {
    "name": "IGModAudioChannel",
    "description": "A sound channel returned by a callback of <page>sound.PlayURL</page> and <page>sound.PlayFile</page>.",
    "functions": [
      {
        "name": "GetBufferedTime",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Returns the buffered time of the sound channel in seconds, for online streaming sound channels. (<page>sound.PlayURL</page>)\n\nFor offline channels this will be equivalent to <page>IGModAudioChannel:GetLength</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The current buffered time of the stream, in seconds."
          }
        ]
      },
      {
        "name": "Is3D",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Returns if the sound channel is in 3D mode or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is 3D or not."
          }
        ]
      },
      {
        "name": "IsLooping",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Returns if the sound channel is looping or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is looping or not."
          }
        ]
      },
      {
        "name": "IsOnline",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Returns if the sound channel is streamed from the Internet or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is online or not."
          }
        ]
      },
      {
        "name": "Set3DCone",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Sets 3D cone of the sound channel.",
        "arguments": [
          {
            "name": "innerAngle",
            "type": "number",
            "description": "The angle of the inside projection cone in degrees.\n\n\n\n\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current."
          },
          {
            "name": "outerAngle",
            "type": "number",
            "description": "The angle of the outside projection cone in degrees.\n\n\n\n\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current."
          },
          {
            "name": "outerVolume",
            "type": "number",
            "description": "The delta-volume outside the outer projection cone.\n\n\n\n\nRange is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current."
          }
        ]
      },
      {
        "name": "Set3DFadeDistance",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Sets 3D fade distances of a sound channel.",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "description": "The minimum distance. The channel's volume is at maximum when the listener is within this distance.\n\n\n\n\n0 or less = leave current."
          },
          {
            "name": "max",
            "type": "number",
            "description": "The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance.\n\n\n\n\n0 or less = leave current."
          }
        ]
      },
      {
        "name": "SetPan",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Sets the relative volume of the left and right channels.",
        "arguments": [
          {
            "name": "pan",
            "type": "number",
            "description": "Relative volume between the left and right channels. -1 means only in left channel, 0 is center and 1 is only in the right channel."
          }
        ]
      },
      {
        "name": "SetPos",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Sets position of sound channel in case the sound channel has a 3d option set.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position to put the sound into"
          },
          {
            "name": "dir",
            "type": "Vector",
            "default": "Vector( 0, 0, 0 )",
            "description": "The direction of the sound"
          }
        ]
      },
      {
        "name": "SetVolume",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Sets the volume of a sound channel",
        "arguments": [
          {
            "name": "volume",
            "type": "number",
            "description": "Volume to set. 1 meaning 100% volume, 0.5 is 50% and 3 is 300%, etc."
          }
        ]
      },
      {
        "name": "Stop",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "description": "Stop the stream. It can be started again using <page>IGModAudioChannel:Play</page>.\n\n<bug issue=\"1497\">Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions.</bug>"
      }
    ]
  },
  {
    "name": "IMaterial",
    "functions": [
      {
        "name": "GetKeyValues",
        "parent": "IMaterial",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets all the key values defined for the material.",
        "returnValues": [
          {
            "type": "table",
            "description": "The material's key values."
          }
        ]
      },
      {
        "name": "GetString",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.",
        "arguments": [
          {
            "name": "materialString",
            "type": "string",
            "description": "The name of the material string."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The value as a string"
          }
        ]
      },
      {
        "name": "GetVector",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the specified material vector, or nil if the value is not set.\n\nSee also <page>IMaterial:GetVectorLinear</page>",
        "arguments": [
          {
            "name": "materialVector",
            "type": "string",
            "description": "The name of the material vector."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The color vector"
          }
        ]
      },
      {
        "name": "IsError",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns whenever the material is valid, i.e. whether it was not loaded successfully from disk or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is this material the error material? (___error)"
          }
        ]
      },
      {
        "name": "SetInt",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Sets the specified material value to the specified int, does nothing on a type mismatch.\n\n<note>Please note that certain material flags such as `$model` are stored in the `$flags` variable and cannot be directly set with this function. See the full list here: <page>Material Flags</page></note>",
        "arguments": [
          {
            "name": "materialInt",
            "type": "string",
            "description": "The name of the material int."
          },
          {
            "name": "int",
            "type": "number",
            "description": "The new int value."
          }
        ]
      }
    ]
  },
  {
    "name": "IMesh",
    "functions": [
      {
        "name": "IsValid",
        "parent": "IMesh",
        "realms": [
          "client"
        ],
        "description": "Returns whether this <page>IMesh</page> is valid or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this <page>IMesh</page> is valid or not."
          }
        ]
      }
    ]
  },
  {
    "name": "IRestore",
    "description": "The object used in the <page>saverestore</page>, mainly in <page>saverestore.AddRestoreHook</page>.\n\nIt allows you to read blocks directly from the save game files used by Half-Life 2 save system when such save is loaded.",
    "functions": [
      {
        "name": "ReadEntity",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "description": "Reads next bytes from the restore object as an <page>Entity</page>.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity that has been read."
          }
        ]
      },
      {
        "name": "ReadString",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "description": "Reads next bytes from the restore object as a <page>string</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The read string."
          }
        ]
      }
    ]
  },
  {
    "name": "ISave",
    "functions": [
      {
        "name": "WriteString",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ],
        "description": "Writes a **null terminated** <page>string</page> to the save object.",
        "arguments": [
          {
            "name": "str",
            "type": "string",
            "description": "The string to write."
          }
        ]
      }
    ]
  },
  {
    "name": "MarkupObject",
    "functions": [
      {
        "name": "GetMaxWidth",
        "parent": "MarkupObject",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets maximum width for this markup object as defined in <page>markup.Parse</page>.",
        "returnValues": [
          {
            "type": "number",
            "name": "maxWidth",
            "description": "The max width."
          }
        ]
      }
    ]
  },
  {
    "name": "NextBot",
    "functions": [
      {
        "name": "FindSpot",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "description": "Like <page>NextBot:FindSpots</page> but only returns a vector.",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "description": "Either `\"random\"`, `\"near\"`, `\"far\"`."
          },
          {
            "name": "options",
            "type": "table",
            "description": "This table should contain the search info.\n* <page>string</page> type - The type (Only `hiding` for now)\n* <page>Vector</page> pos - the position to search.\n* <page>number</page> radius - the radius to search.\n* <page>number</page> stepup - the highest step to step up.\n* <page>number</page> stepdown - the highest we can step down without being hurt."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "If it finds a spot it will return a vector. If not it will return nil."
          }
        ]
      },
      {
        "name": "FindSpots",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "description": "Returns a table of hiding spots.",
        "arguments": [
          {
            "name": "specs",
            "type": "table",
            "description": "This table should contain the search info.\n* <page>string</page> type - The type (optional, only `hiding` supported)\n* <page>Vector</page> pos - the position to search.\n* <page>number</page> radius - the radius to search.\n* <page>number</page> stepup - the highest step to step up.\n* <page>number</page> stepdown - the highest we can step down without being hurt."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "An unsorted table of tables containing:\n* <page>Vector</page> vector - The position of the hiding spot\n* <page>number</page> distance - the distance to that position"
          }
        ]
      },
      {
        "name": "GetRangeSquaredTo",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "description": "Returns squared distance to an entity or a position.\n\nSee also <page>NextBot:GetRangeTo</page>.",
        "arguments": [
          {
            "name": "to",
            "type": "Vector",
            "description": "The position to measure distance to. Can be an entity."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The squared distance"
          }
        ]
      }
    ]
  },
  {
    "name": "NPC",
    "functions": [
      {
        "name": "CapabilitiesGet",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the NPC's capabilities along the ones defined on its weapon.",
        "returnValues": [
          {
            "type": "number",
            "description": "The capabilities as a bitflag.\nSee <page>Enums/CAP</page>"
          }
        ]
      },
      {
        "name": "CapabilitiesRemove",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Remove a certain capability.",
        "arguments": [
          {
            "name": "capabilities",
            "type": "number",
            "description": "Capabilities to remove, see <page>Enums/CAP</page>"
          }
        ]
      },
      {
        "name": "ClearBlockingEntity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Resets the <page>NPC:GetBlockingEntity</page>."
      },
      {
        "name": "ClearCondition",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Clears out the specified <page>Enums/COND</page> on this NPC.",
        "arguments": [
          {
            "name": "condition",
            "type": "number",
            "description": "The <page>Enums/COND</page> to clear out."
          }
        ]
      },
      {
        "name": "DropWeapon",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Forces the NPC to drop the specified weapon.",
        "arguments": [
          {
            "name": "weapon",
            "type": "Weapon",
            "default": "nil",
            "description": "Weapon to be dropped. If unset, will default to the currently equipped weapon."
          },
          {
            "name": "target",
            "type": "Vector",
            "default": "nil",
            "description": "If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument."
          },
          {
            "name": "velocity",
            "type": "Vector",
            "default": "nil",
            "description": "If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400."
          }
        ]
      },
      {
        "name": "GetActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the NPC's current activity.",
        "returnValues": [
          {
            "type": "number",
            "description": "Current activity, see <page>Enums/ACT</page>."
          }
        ]
      },
      {
        "name": "GetArrivalActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the activity to be played when the NPC arrives at its goal",
        "returnValues": [
          {
            "type": "number",
            "description": "The arrival activity. See <page>Enums/ACT</page>."
          }
        ]
      },
      {
        "name": "GetBlockingEntity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the entity blocking the NPC along its path.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "Blocking entity"
          }
        ]
      },
      {
        "name": "GetCurrentSchedule",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the NPC's current schedule.",
        "returnValues": [
          {
            "type": "number",
            "description": "The NPCs schedule, see <page>Enums/SCHED</page> or -1 if we failed for some reason"
          }
        ]
      },
      {
        "name": "GetEnemy",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the entity that this NPC is trying to fight.\n\n<bug issue=\"3132\">This returns nil if the NPC has no enemy. You should use <page>Global.IsValid</page> (which accounts for nil and NULL) on the return to verify validity of the enemy.</bug>",
        "returnValues": [
          {
            "type": "NPC",
            "description": "Enemy NPC."
          }
        ]
      },
      {
        "name": "GetEnemyLastSeenPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the last seen position of an NPC's enemy.\n\nSimilar to <page>NPC:GetEnemyLastKnownPos</page>, but the known position will be a few seconds ahead of the last seen position.",
        "arguments": [
          {
            "name": "enemy",
            "type": "Entity",
            "default": "GetEnemy()",
            "description": "The enemy to check."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "name": "pos",
            "description": "The last seen position."
          }
        ]
      },
      {
        "name": "GetMinMoveCheckDist",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns how far should the NPC look ahead in its route.",
        "returnValues": [
          {
            "type": "number",
            "description": "How far the NPC checks ahead of its route."
          }
        ]
      },
      {
        "name": "GetMinMoveStopDist",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns how far before the NPC can come to a complete stop.",
        "arguments": [
          {
            "name": "minResult ",
            "type": "number",
            "default": "10",
            "description": "The minimum value that will be returned by this function."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum stop distance."
          }
        ]
      },
      {
        "name": "GetMoveInterval",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the current timestep the internal NPC motor is working on.",
        "returnValues": [
          {
            "type": "number",
            "description": "The current timestep."
          }
        ]
      },
      {
        "name": "GetMovementSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the index of the sequence the NPC uses to move.",
        "returnValues": [
          {
            "type": "number",
            "description": "The movement sequence index"
          }
        ]
      },
      {
        "name": "GetNPCState",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the NPC's state.",
        "returnValues": [
          {
            "type": "number",
            "description": "The NPC's current state, see <page>Enums/NPC_STATE</page>."
          }
        ]
      },
      {
        "name": "GetTaskStatus",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns the status of the current task.",
        "returnValues": [
          {
            "type": "number",
            "description": "The status. See <page>Enums/TASKSTATUS</page>."
          }
        ]
      },
      {
        "name": "GetWeapon",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns a specific weapon the NPC owns.",
        "arguments": [
          {
            "name": "class",
            "type": "string",
            "description": "A classname of the weapon to try to get."
          }
        ],
        "returnValues": [
          {
            "type": "Weapon",
            "name": "wep",
            "description": "The weapon for the specified class, or NULL of the NPC doesn't have given weapon."
          }
        ]
      },
      {
        "name": "HasCondition",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not the NPC has the given condition.",
        "arguments": [
          {
            "name": "condition",
            "type": "number",
            "description": "The condition index, see <page>Enums/COND</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the NPC has the given condition, false otherwise."
          }
        ]
      },
      {
        "name": "HasEnemyEluded",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Polls the enemy memory to check if the given entity has eluded us or not.",
        "arguments": [
          {
            "name": "enemy",
            "type": "Entity",
            "default": "GetEnemy()",
            "description": "The enemy to test."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "eluded",
            "description": "If the enemy has eluded us."
          }
        ]
      },
      {
        "name": "IgnoreEnemyUntil",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Makes the NPC ignore given entity/enemy until given time.",
        "arguments": [
          {
            "name": "enemy",
            "type": "Entity",
            "description": "The enemy to ignore."
          },
          {
            "name": "until",
            "type": "number",
            "description": "How long to ignore the enemy for. This will be compared to <page>Global.CurTime</page>, so your value should be based on it."
          }
        ]
      },
      {
        "name": "IsCurrentSchedule",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not the NPC is performing the given schedule.",
        "arguments": [
          {
            "name": "schedule",
            "type": "number",
            "description": "The schedule number, see <page>Enums/SCHED</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the NPC is performing the given schedule, false otherwise."
          }
        ]
      },
      {
        "name": "IsCurWaypointGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns whether the current navigational waypoint is the final one.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the current navigational waypoint is the final one."
          }
        ]
      },
      {
        "name": "IsFacingIdealYaw",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Returns whether the NPC is facing their ideal yaw. See <page>NPC:SetIdealYaw</page>, <page>NPC:GetIdealYaw</page> and <page>NPC:SetIdealYawAndUpdate</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the NPC is facing their ideal yaw."
          }
        ]
      },
      {
        "name": "MoveOrder",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Makes the NPC walk toward the given position. The NPC will return to the player after amount of time set by **player_squad_autosummon_time** <page>ConVar</page>.\n\nOnly works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.\n\nThe NPC **must** be in the player's squad for this to work.",
        "arguments": [
          {
            "name": "position",
            "type": "Vector",
            "description": "The target position for the NPC to walk to."
          }
        ]
      },
      {
        "name": "MoveStart",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Starts NPC movement?\n\nRelated functions are <page>NPC:MoveStop</page>, <page>NPC:MovePause</page> and <page>NPC:ResetMoveCalc</page>."
      },
      {
        "name": "PickupWeapon",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Forces the NPC to pickup an existing weapon entity. The NPC will not pick up the weapon if they already own a weapon of given type, or if the NPC could not normally have this weapon in their inventory.",
        "arguments": [
          {
            "name": "wep",
            "type": "Weapon",
            "description": "The weapon to try to pick up."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "result",
            "description": "Whether the NPC succeeded in picking up the weapon or not."
          }
        ]
      },
      {
        "name": "PlaySentence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Forces the NPC to play a sentence from scripts/sentences.txt",
        "arguments": [
          {
            "name": "sentence",
            "type": "string",
            "description": "The sentence string to speak."
          },
          {
            "name": "delay",
            "type": "number",
            "description": "Delay in seconds until the sentence starts playing."
          },
          {
            "name": "volume",
            "type": "number",
            "description": "The volume of the sentence, from 0 to 1."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Returns the sentence index, -1 if the sentence couldn't be played."
          }
        ]
      },
      {
        "name": "RunEngineTask",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Starts an engine task.\n\nUsed internally by the <page>ai_task</page>.",
        "arguments": [
          {
            "name": "taskID",
            "type": "number",
            "description": "The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)"
          },
          {
            "name": "taskData",
            "type": "number",
            "description": "The task data."
          }
        ]
      },
      {
        "name": "SentenceStop",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Stops any sounds (speech) the NPC is currently palying.\n\nEquivalent to `Entity:EmitSound( \"AI_BaseNPC.SentenceStop\" )`"
      },
      {
        "name": "SetArrivalSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Sets the sequence to be played when the NPC arrives at its goal.",
        "arguments": [
          {
            "name": "seq",
            "type": "number",
            "description": "See <page>Entity:LookupSequence</page>."
          }
        ]
      },
      {
        "name": "SetArrivalSpeed",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Sets the arrival speed? of the NPC",
        "arguments": [
          {
            "name": "speed",
            "type": "number",
            "description": "The new arrival speed"
          }
        ]
      },
      {
        "name": "SetIdealYaw",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Sets the ideal yaw angle (left-right rotation) for the NPC. Does not actually force the NPC to start turning in that direction. See <page>NPC:UpdateYaw</page>, <page>NPC:GetIdealYaw</page> and <page>NPC:SetIdealYawAndUpdate</page>.",
        "arguments": [
          {
            "name": "angle",
            "type": "number",
            "description": "The aim direction to set, the `yaw` component."
          }
        ]
      },
      {
        "name": "SetIdealYawAndUpdate",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Sets the ideal yaw angle (left-right rotation) for the NPC and forces them to turn to that angle.",
        "arguments": [
          {
            "name": "angle",
            "type": "number",
            "description": "The aim direction to set, the `yaw` component."
          },
          {
            "name": "speed",
            "type": "number",
            "default": "-1",
            "description": "The turn speed. Special values are:\n* `-1` - Calculate automatically\n* `-2` - Keep the previous yaw speed"
          }
        ]
      },
      {
        "name": "SetMaxLookDistance",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Sets NPC's max view distance. An NPC will not be able to see enemies outside of this distance.",
        "arguments": [
          {
            "name": "dist",
            "type": "number",
            "description": "New maximum distance the NPC can see at. Default is 2048 and 6000 for long range NPCs such as the sniper."
          }
        ]
      },
      {
        "name": "SetMovementSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Sets the sequence the NPC navigation path uses for speed calculation. Doesn't seem to have any visible effect on NPC movement.",
        "arguments": [
          {
            "name": "sequenceId",
            "type": "number",
            "description": "The movement sequence index"
          }
        ]
      },
      {
        "name": "SetSquad",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "Assigns the NPC to a new squad. A squad can have up to 16 NPCs. NPCs in a single squad should be friendly to each other.\n\nSee also <page>ai.GetSquadMembers</page> and <page>NPC:GetSquad</page>.\n\nNPCs within the same squad are meant to function more effectively, tactics wise.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The new squad name to set."
          }
        ]
      },
      {
        "name": "UseFollowBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "description": "<note>This function only works on `ai` type [SENTs](Scripted_Entities).</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If we succeeded setting the behavior."
          }
        ]
      }
    ]
  },
  {
    "name": "Panel",
    "description": "This is the base panel for every other [VGUI](vgui) panel.\n\nIt contains all of the basic methods, some of which may only work on certain VGUI elements. As their functionality is provided at the game's C/C++ level rather than by its Lua script extension, they are unfortunately unavailable for most practical purposes, however, they can still be obtained in a way similar to that provided by the <page>baseclass</page> library:\n\n```\n-- Create a new panel type NewPanel that inherits all of its functionality from DLabel,\n-- but has a different SetText method than DLabel does - all without the hassle of that\n-- old DLabel's default text getting in the way. Fun stuff.\n\nlocal PANEL = {}\n\nfunction PANEL:Init()\n\nself:SetText_Base( \"\" )\nself:SetText( \"Time for something different!\" )\n\nend\n\nfunction PANEL:Paint( aWide, aTall )\n\nlocal TextX, TextY = 0, 0\nlocal TextColor = Color( 255, 0, 0, 255 )\n\nsurface.SetFont( self:GetFont() or \"default\" )\nsurface.SetTextColor( TextColor )\nsurface.SetTextPos( TextX, TextY )\nsurface.DrawText( self:GetText() )\n\nend\n\n-- And here we go:\nPANEL.SetText_Base = FindMetaTable( \"Panel\" ).SetText\n\nfunction PANEL:SetText( aText )\n\nself.Text = tostring( aText )\n\nend\n\nfunction PANEL:GetText()\n\nreturn self.Text or \"\"\n\nend\n\nvgui.Register( \"NewPanel\", PANEL, \"DLabel\" )\n```",
    "functions": [
      {
        "name": "Add",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds the specified object to the panel.",
        "arguments": [
          {
            "name": "object",
            "type": "Panel",
            "description": "The panel to be added (parented). Can also be:\n* <page>string</page> Class Name - creates panel with the specified name and adds it to the panel.\n* <page>table</page> PANEL table - creates a panel from table and adds it to the panel."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "New panel"
          }
        ]
      },
      {
        "name": "AlignLeft",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Aligns the panel on the left of its parent with the specified offset.",
        "arguments": [
          {
            "name": "offset",
            "type": "number",
            "default": "0",
            "description": "The align offset."
          }
        ]
      },
      {
        "name": "AlignTop",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Aligns the panel on the top of its parent with the specified offset.",
        "arguments": [
          {
            "name": "offset",
            "type": "number",
            "default": "0",
            "description": "The align offset."
          }
        ]
      },
      {
        "name": "AnimationThinkInternal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Performs the per-frame operations required for panel animations.\n\nThis is called every frame by <page>PANEL:AnimationThink</page>."
      },
      {
        "name": "AppendText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Appends text to a <page>RichText</page> element. This does not automatically add a new line.",
        "arguments": [
          {
            "name": "txt",
            "type": "string",
            "description": "The text to append (add on)."
          }
        ]
      },
      {
        "name": "ApplyGWEN",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used by <page>Panel:LoadGWENFile</page> and <page>Panel:LoadGWENString</page> to apply a GWEN controls table to a panel object.\n\nYou can do this manually using <page>file.Read</page> and <page>util.JSONToTable</page> to import and create a GWEN table structure from a `.gwen` file. This method can then be called, passing the GWEN table's `Controls` member.",
        "arguments": [
          {
            "name": "GWENTable",
            "type": "table",
            "description": "The GWEN controls table to apply to the panel."
          }
        ]
      },
      {
        "name": "ConVarNumberThink",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "A think hook for <page>Panel</page>s using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: checkboxes, sliders, number wangs\n\nFor a string alternative, see <page>Panel:ConVarStringThink</page>.\n\n<note>Make sure your Panel has a SetValue function, else you may get errors.</note>"
      },
      {
        "name": "ConVarStringThink",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "A think hook for <page text=\"panels\">Panel</page> using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: text inputs, read-only inputs, dropdown selects\n\nFor a number alternative, see <page>Panel:ConVarNumberThink</page>.\n\n<note>Make sure your Panel has a SetValue function, else you may get errors.</note>"
      },
      {
        "name": "CopyPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Copies the position of the panel.",
        "arguments": [
          {
            "name": "base",
            "type": "Panel",
            "description": "Panel to position the width from."
          }
        ]
      },
      {
        "name": "CopyWidth",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Copies the width of the panel.",
        "arguments": [
          {
            "name": "base",
            "type": "Panel",
            "description": "Panel to copy the width from."
          }
        ]
      },
      {
        "name": "CursorPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the cursor position relative to the top left of the panel.\n\nThis is equivalent to calling <page>gui.MousePos</page> and then <page>Panel:ScreenToLocal</page>.\n\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.\n\nie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>",
        "returnValues": [
          {
            "type": "number",
            "description": "X coordinate of the cursor, relative to the top left of the panel."
          },
          {
            "type": "number",
            "description": "Y coordinate of the cursor, relative to the top left of the panel."
          }
        ]
      },
      {
        "name": "CutSelected",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Performs the <key>CONTROL</key> + <key>X</key> (delete text and copy it to clipboard buffer) action on selected text in a <page>TextEntry</page> or <page>RichText</page> based element."
      },
      {
        "name": "DoModal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Makes the panel \"lock\" the screen until it is removed. All input will be directed to the given panel.\n\nIt will silently fail if used while cursor is not visible.\nCall <page>Panel:MakePopup</page> before calling this function.\nThis must be called on a panel derived from <page>EditablePanel</page>."
      },
      {
        "name": "DragMousePress",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called to inform the <page>dragndrop</page> that a mouse button is being held down on a panel object.",
        "arguments": [
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The code for the mouse button pressed, passed by, for example, <page>PANEL:OnMousePressed</page>. See the <page>Enums/MOUSE</page>."
          }
        ]
      },
      {
        "name": "DragMouseRelease",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called to inform the <page>dragndrop</page> that a mouse button has been depressed on a panel object.",
        "arguments": [
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The code for the mouse button pressed, passed by, for example, <page>PANEL:OnMouseReleased</page>. See the <page>Enums/MOUSE</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` if an object was being dragged, otherwise `false`."
          }
        ]
      },
      {
        "name": "DrawFilledRect",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using <page>surface.SetDrawColor</page>. This should only be called within the object's <page>PANEL:Paint</page> or <page>PANEL:PaintOver</page> hooks, as a shortcut for <page>surface.DrawRect</page>."
      },
      {
        "name": "DrawTextEntryText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to draw the text in a <page>DTextEntry</page> within a derma skin. This should be called within the <page>SKIN:PaintTextEntry</page> skin hook.\n<note>Will silently fail if any of arguments are not <page>Color</page>.</note>",
        "arguments": [
          {
            "name": "textCol",
            "type": "table",
            "description": "The colour of the main text."
          },
          {
            "name": "highlightCol",
            "type": "table",
            "description": "The colour of the selection highlight (when selecting text)."
          },
          {
            "name": "cursorCol",
            "type": "table",
            "description": "The colour of the text cursor (or caret)."
          }
        ]
      },
      {
        "name": "Exec",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used to run commands within a <page>DHTML</page> window.",
        "arguments": [
          {
            "name": "cmd",
            "type": "string",
            "description": "The command to be run."
          }
        ]
      },
      {
        "name": "FocusNext",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Focuses the next panel in the focus queue."
      },
      {
        "name": "GetChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns a table with all the child panels of the panel.",
        "returnValues": [
          {
            "type": "table",
            "description": "All direct children of this panel."
          }
        ]
      },
      {
        "name": "GetClosestChild",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The horizontal (x) position of the point."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The vertical (y) position of the point."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The child object that was closest to the specified point."
          },
          {
            "type": "number",
            "description": "The distance that this child was from the point."
          }
        ]
      },
      {
        "name": "GetContentSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the size of the content/children within a panel object.\n\nOnly works with <page>Label</page> derived panels by default such as <page>DLabel</page>.\n\n\nWill also work on any panel that manually implements this method.",
        "returnValues": [
          {
            "type": "number",
            "description": "The content width of the object."
          },
          {
            "type": "number",
            "description": "The content height of the object."
          }
        ]
      },
      {
        "name": "GetHTMLMaterial",
        "parent": "Panel",
        "realms": [
          "client"
        ],
        "description": "Returns the panel's HTML material. Only works with <page>Awesomium</page>, <page>HTML</page> and <page>DHTML</page> panels that have been fully loaded.",
        "returnValues": [
          {
            "type": "IMaterial",
            "description": "The HTML material used by the panel. Typically starts with \"__vgui_texture_\" followed by an incremental number."
          }
        ]
      },
      {
        "name": "GetSelectedChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type <page>Panel</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive)."
          }
        ]
      },
      {
        "name": "GetSelectedTextRange",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the currently selected range of text.\n\nThis function will only work on <page>RichText</page> and <page>TextEntry</page> panels and their derivatives.",
        "returnValues": [
          {
            "type": "number",
            "name": "start",
            "description": "The start of the range. If no text is selected it may be 0 and/or equal to the end range."
          },
          {
            "type": "number",
            "name": "endrange",
            "description": "The end of the range. If no text is selected it may be 0 and/or equal to the start range."
          }
        ]
      },
      {
        "name": "GetSkin",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the table for the derma skin currently being used by this panel object.",
        "returnValues": [
          {
            "type": "table",
            "description": "The derma skin table currently being used by this object."
          }
        ]
      },
      {
        "name": "GetText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the panel's text (where applicable).\n\nThis method returns a maximum of 1023 bytes, except for <page>DTextEntry</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The panel's text."
          }
        ]
      },
      {
        "name": "GetTooltipPanel",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the tooltip panel that was set with <page>PANEL:SetTooltipPanel</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "name": "tooltip",
            "description": "The tooltip panel, if it was set."
          }
        ]
      },
      {
        "name": "GetValue",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the value the panel holds.\n\nIn engine is only implemented for <page>CheckButton</page>, <page>Label</page> and <page>TextEntry</page> as a string.\n\n<note>This function is limited to 8092 Bytes. If using <page>DTextEntry</page>, use <page>Panel:GetText</page> for unlimited bytes.</note>",
        "returnValues": [
          {
            "type": "any",
            "description": "The value the panel holds."
          }
        ]
      },
      {
        "name": "GoBack",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Goes back one page in the HTML panel's history if available."
      },
      {
        "name": "GWEN_SetCheckboxText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `CheckboxText` property to a <page>DCheckBoxLabel</page>. This does exactly the same as <page>Panel:GWEN_SetText</page>, but exists to cater for the seperate GWEN properties.",
        "arguments": [
          {
            "name": "txt",
            "type": "string",
            "description": "The text to be applied to the DCheckBoxLabel."
          }
        ]
      },
      {
        "name": "GWEN_SetDock",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Dock` property to a  panel object. This calls <page>Panel:Dock</page>.",
        "arguments": [
          {
            "name": "dockState",
            "type": "string",
            "description": "The dock mode to pass to the panel's `Dock` method. This reads a string and applies the approriate <page>Enums/DOCK</page>.\n* `Right`: Dock right.\n* `Left`: Dock left.\n* `Bottom`: Dock at the bottom.\n* `Top`: Dock at the top.\n* `Fill`: Fill the parent panel."
          }
        ]
      },
      {
        "name": "GWEN_SetHorizontalAlign",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `HorizontalAlign` property to a  panel object. This calls <page>Panel:SetContentAlignment</page>.",
        "arguments": [
          {
            "name": "hAlign",
            "type": "string",
            "description": "The alignment, as a string, to pass to <page>Panel:SetContentAlignment</page>. Accepts:\n* `Right`: Align mid-right.\n* `Left`: Align mid-left.\n* `Center`: Align mid-center."
          }
        ]
      },
      {
        "name": "GWEN_SetText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Text` property to a panel.",
        "arguments": [
          {
            "name": "txt",
            "type": "string",
            "description": "The text to be applied to the panel."
          }
        ]
      },
      {
        "name": "Hide",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Makes a panel invisible."
      },
      {
        "name": "IsDraggable",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this panel is draggable ( if user is able to drag it ) or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this panel is draggable ( if user is able to drag it ) or not."
          }
        ]
      },
      {
        "name": "IsDragging",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this panel is currently being dragged or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this panel is currently being dragged or not."
          }
        ]
      },
      {
        "name": "IsKeyboardInputEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if the panel can receive keyboard input.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "keyboardInputEnabled"
          }
        ]
      },
      {
        "name": "IsLoading",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Determines whether or not a <page>HTML</page> or <page>DHTML</page> element is currently loading a page.\n\n<note>Before calling <page>Panel:SetHTML</page> or <page>DHTML:OpenURL</page>, the result seems to be `false` with the Awesomium web renderer and `true` for the Chromium web renderer. This difference can be used to determine the available HTML5 capabilities.</note>\n<note>On Awesomium, the result remains `true` until the root document is loaded and when in-page content is loading (when adding pictures, frames, etc.). During this state, the HTML texture is not refreshed and the panel is not painted (it becomes invisible).\n\nOn Chromium, the value is only `true` when the root document is not ready. The rendering is not suspended when in-page elements are loading.</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the (D)HTML object is loading."
          }
        ]
      },
      {
        "name": "IsPopup",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns if the panel was made popup or not. See <page>Panel:MakePopup</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` if the panel was made popup."
          }
        ]
      },
      {
        "name": "IsVisible",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns if the panel is visible. This will **NOT** take into account visibility of the parent.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` if the panel ls visible, `false` otherwise."
          }
        ]
      },
      {
        "name": "IsWorldClicker",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns if a panel allows world clicking set by <page>Panel:SetWorldClicker</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If the panel allows world clicking."
          }
        ]
      },
      {
        "name": "LoadControlsFromFile",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n<internal></internal>\nSimilar to <page>Panel:LoadControlsFromString</page> but loads controls from a file.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "The path to load the controls from."
          }
        ]
      },
      {
        "name": "LoadGWENFile",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Loads a .gwen file (created by GWEN Designer) and calls <page>Panel:LoadGWENString</page> with the contents of the loaded file.\n\nUsed to load panel controls from a file.",
        "arguments": [
          {
            "name": "filename",
            "type": "string",
            "description": "The file to open. The path is relative to garrysmod/garrysmod/."
          },
          {
            "name": "path",
            "type": "string",
            "default": "GAME",
            "description": "The path used to look up the file.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting."
          }
        ]
      },
      {
        "name": "LocalToScreen",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the absolute screen position of the position specified relative to the panel.\n\nSee also <page>Panel:ScreenToLocal</page>.\n\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>\n\n<note>If the panel uses <page>Panel:Dock</page>, this function will return 0, 0 when the panel was created. The position will be updated in the next frame.</note>",
        "arguments": [
          {
            "name": "posX",
            "type": "number",
            "description": "The X coordinate of the position on the panel to translate."
          },
          {
            "name": "posY",
            "type": "number",
            "description": "The Y coordinate of the position on the panel to translate."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The X coordinate relative to the screen."
          },
          {
            "type": "number",
            "description": "The Y coordinate relative to the screen."
          }
        ]
      },
      {
        "name": "MoveLeftOf",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Places the panel left to the passed panel with the specified offset.",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "Panel to position relatively to."
          },
          {
            "name": "offset",
            "type": "number",
            "default": "0",
            "description": "The align offset."
          }
        ]
      },
      {
        "name": "MoveTo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Moves the panel to the specified position using animation.\n<note>Setting the ease argument to 0 will result in the animation happening instantly, this applies to all MoveTo/SizeTo functions</note>",
        "arguments": [
          {
            "name": "posX",
            "type": "number",
            "description": "The target x coordinate of the panel."
          },
          {
            "name": "posY",
            "type": "number",
            "description": "The target y coordinate of the panel."
          },
          {
            "name": "time",
            "type": "number",
            "description": "The time to perform the animation within."
          },
          {
            "name": "delay",
            "type": "number",
            "default": "0",
            "description": "The delay before the animation starts."
          },
          {
            "name": "ease",
            "type": "number",
            "default": "-1",
            "description": "The easing of the start and/or end speed of the animation. See <page>Panel:NewAnimation</page> for how this works."
          },
          {
            "name": "callback",
            "type": "function",
            "description": "The function to be called once the animation finishes. Arguments are:\n* <page>table</page> animData - The <page>Structures/AnimationData</page> that was used.\n* <page>Panel</page> pnl - The panel object that was moved."
          }
        ]
      },
      {
        "name": "RebuildSpawnIcon",
        "parent": "Panel",
        "realms": [
          "client"
        ],
        "description": "Causes a <page>SpawnIcon</page> to rebuild its model image."
      },
      {
        "name": "RequestFocus",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Attempts to obtain focus for this panel."
      },
      {
        "name": "SaveUndoState",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Saves the current state (caret position and the text inside) of a <page>TextEntry</page> as an undo state.\n\nSee also <page>Panel:Undo</page>."
      },
      {
        "name": "SelectAllText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Duplicate of <page>Panel:SelectAll</page>.</deprecated>\n\nSelects all the text in a panel object. Will not select non-text items; for this, use <page>Panel:SelectAll</page>.",
        "arguments": [
          {
            "name": "resetCursorPos",
            "type": "boolean",
            "description": "Reset cursor pos?"
          }
        ]
      },
      {
        "name": "SelectNone",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Deselects all items in a panel object. For text-based objects, this will deselect all text.\n\n<note>Only works on <page>RichText</page> and <page>TextEntry</page> and their derived panels by default (such as <page>DTextEntry</page>), and on any panel that manually reimplemented this method.</note>"
      },
      {
        "name": "SetActionFunction",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Does nothing at all.</deprecated>\n\nUsed in <page>Button</page> to call a function when the button is clicked and in <page>Slider</page> when the value changes.",
        "arguments": [
          {
            "name": "func",
            "type": "function",
            "description": "Function to call when the <page>Button</page> is clicked or the <page>Slider</page> value is changed.\n\nArguments given are:\n* <page>Panel</page> self - The panel itself\n* <page>string</page> action - \"Command\" on button press, \"SliderMoved\" on slider move.\n* <page>number</page> val - The new value of the <page>Slider</page>. Will always equal 0 for buttons.\n* <page>number</page> zed - Always equals 0."
          }
        ]
      },
      {
        "name": "SetAllowNonAsciiCharacters",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Configures a <page>TextEntry</page> to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.\n\nCharacters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.",
        "arguments": [
          {
            "name": "allowed",
            "type": "boolean",
            "description": "Set to true in order not to restrict input characters."
          }
        ]
      },
      {
        "name": "SetCaretPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the position of the caret (or text cursor) in a text-based panel object.",
        "arguments": [
          {
            "name": "offset",
            "type": "number",
            "description": "Caret position/offset from the start of text. A value of `0` places the caret before the first character."
          }
        ]
      },
      {
        "name": "SetContentAlignment",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the alignment of the contents.\n\n<note>This function only works on <page>Label</page> panels and its derivatives.</note>",
        "arguments": [
          {
            "name": "alignment",
            "type": "number",
            "description": "The direction of the content, based on the number pad.\n\n<key>1</key>: **bottom-left** <br>\n<key>2</key>: **bottom-center** <br>\n<key>3</key>: **bottom-right** <br>\n<key>4</key>: **middle-left** <br>\n<key>5</key>: **center** <br>\n<key>6</key>: **middle-right** <br>\n<key>7</key>: **top-left** <br>\n<key>8</key>: **top-center** <br>\n<key>9</key>: **top-right** <br>\n<img src=\"DLabel_SetContentAlignment.gif\">"
          }
        ]
      },
      {
        "name": "SetCursor",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the appearance of the cursor. You can find a list of all available cursors with image previews [here](https://wiki.facepunch.com/gmod/Cursors).",
        "arguments": [
          {
            "name": "cursor",
            "type": "string",
            "description": "The cursor to be set. Can be one of the following:\n\n* [arrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=arrow)\n* [beam](https://wiki.facepunch.com/gmod/Cursors#:~:text=beam)\n* [hourglass](https://wiki.facepunch.com/gmod/Cursors#:~:text=hourglass)\n* [waitarrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=waitarrow)\n* [crosshair](https://wiki.facepunch.com/gmod/Cursors#:~:text=crosshair)\n* [up](https://wiki.facepunch.com/gmod/Cursors#:~:text=up)\n* [sizenwse](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenwse)\n* [sizenesw](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenesw)\n* [sizewe](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizewe)\n* [sizens](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizens)\n* [sizeall](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizeall)\n* [no](https://wiki.facepunch.com/gmod/Cursors#:~:text=no)\n* [hand](https://wiki.facepunch.com/gmod/Cursors#:~:text=hand)\n* [blank](https://wiki.facepunch.com/gmod/Cursors#:~:text=blank)\n\nSet to anything else to set it to \"none\", the default fallback. Do note that a value of \"none\" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of \"blank\" instead."
          }
        ]
      },
      {
        "name": "SetDragParent",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the drag parent.\n\nDrag parent means that when we start to drag this panel, we'll really start dragging the defined parent.",
        "arguments": [
          {
            "name": "parent",
            "type": "Panel",
            "description": "The panel to set as drag parent."
          }
        ]
      },
      {
        "name": "SetFGColor",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the foreground color of a panel.\n\nFor a <page>Label</page> or <page>RichText</page>, this is the color of its text.\n\nThis function calls <page>Panel:SetFGColorEx</page> internally.\n\n<note>This doesn't apply to all VGUI elements (such as <page>DLabel</page>) and its function varies between them</note>",
        "arguments": [
          {
            "name": "r or color",
            "type": "number",
            "description": "The red channel of the color, or a <page>Color</page>. If you pass the latter, the following three arguments are ignored."
          },
          {
            "name": "g",
            "type": "number",
            "description": "The green channel of the color."
          },
          {
            "name": "b",
            "type": "number",
            "description": "The blue channel of the color."
          },
          {
            "name": "a",
            "type": "number",
            "description": "The alpha channel of the color."
          }
        ]
      },
      {
        "name": "SetHeight",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the height of the panel.\n\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\n\n\nSee also <page>Panel:SetSize</page>.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The height to be set."
          }
        ]
      },
      {
        "name": "SetKeyboardInputEnabled",
        "parent": "Panel",
        "realms": [
          "client"
        ],
        "description": "Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "Whether keyboard input should be enabled for this panel."
          }
        ]
      },
      {
        "name": "SetMinimumSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum dimensions of the panel or object.\n\nYou can restrict either or both values.\n\nCalling the function without arguments will remove the minimum size.",
        "arguments": [
          {
            "name": "minW",
            "type": "number",
            "default": "nil",
            "description": "The minimum width of the object."
          },
          {
            "name": "minH",
            "type": "number",
            "default": "nil",
            "description": "The minimum height of the object."
          }
        ]
      },
      {
        "name": "SetMouseInputEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables or disables the mouse input for the panel.\n<note>Panels parented to the context menu will not be clickable unless <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page> is enabled or <page>Panel:MakePopup</page> has been called. If you want the panel to have mouse input but you do not want to prevent players from moving, set <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page> to false immediately after calling <page>Panel:MakePopup</page>.</note>",
        "arguments": [
          {
            "name": "mouseInput",
            "type": "boolean",
            "description": "Whenever to enable or disable mouse input."
          }
        ]
      },
      {
        "name": "SetMultiline",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables or disables the multi-line functionality of <page>TextEntry</page> panel and its derivatives.",
        "arguments": [
          {
            "name": "multiline",
            "type": "boolean",
            "description": "Whether to enable multiline or not."
          }
        ]
      },
      {
        "name": "SetSelectable",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding <key>Shift</key>). If enabled, this will affect the function of a <page>DButton</page> whilst <key>Shift</key> is pressed. <page>Panel:SetSelected</page> can be used to select/deselect the object.",
        "arguments": [
          {
            "name": "selectable",
            "type": "boolean",
            "description": "Whether the panel object should be selectable or not."
          }
        ]
      },
      {
        "name": "SetTabPosition",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "When TAB is pressed, the next selectable panel in the number sequence is selected.",
        "arguments": [
          {
            "name": "position",
            "type": "number"
          }
        ]
      },
      {
        "name": "SetTooltipPanelOverride",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the panel class to be created instead of <page>DTooltip</page> when the player hovers over this panel and a tooltip needs creating.",
        "arguments": [
          {
            "name": "override",
            "type": "string",
            "description": "The panel class to override the default <page>DTooltip</page>. The new panel class must have the following methods:\n* <page text=\"SetText\">Panel:SetText</page> - If you are using <page>Panel:SetTooltip</page>.\n* <page text=\"SetContents\">DTooltip:SetContents</page> - If you are using <page>Panel:SetTooltipPanel</page>.\n* <page text=\"OpenForPanel\">DTooltip:OpenForPanel</page> - A \"hook\" type function that gets called shortly after creation (and after the above 2) to open and position the tooltip. You can see this logic in `lua/includes/util/tooltips.lua`."
          }
        ]
      },
      {
        "name": "SetURL",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the URL of a link-based panel such as <page>DLabelURL</page>.",
        "arguments": [
          {
            "name": "url",
            "type": "string",
            "description": "The URL to set. It **must** begin with either `http://` or `https://`."
          }
        ]
      },
      {
        "name": "SetVerticalScrollbarEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the visibility of the vertical scrollbar.\n\nWorks for <page>RichText</page> and <page>TextEntry</page>.",
        "arguments": [
          {
            "name": "display",
            "type": "boolean",
            "default": "false",
            "description": "True to display the vertical text scroll bar, false to hide it."
          }
        ]
      },
      {
        "name": "SetWidth",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the width of the panel.\n\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\n\n\nSee also <page>Panel:SetSize</page>.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The new width of the panel."
          }
        ]
      },
      {
        "name": "SetWrap",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether text wrapping should be enabled or disabled on <page>Label</page> and <page>DLabel</page> panels.\n\nUse <page>DLabel:SetAutoStretchVertical</page> to automatically correct vertical size; <page>Panel:SizeToContents</page> will not set the correct height.",
        "arguments": [
          {
            "name": "wrap",
            "type": "boolean",
            "description": "`True` to enable text wrapping, `false` otherwise."
          }
        ]
      },
      {
        "name": "SetX",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the X position of the panel.\n\nUses <page>Panel:SetPos</page> internally.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The X coordinate of the position."
          }
        ]
      },
      {
        "name": "StopLoading",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Stops the loading of the <page>HTML</page> panel's current page."
      }
    ]
  },
  {
    "name": "PathFollower",
    "description": "Path object for a NextBot NPC and bots created by <page>player.CreateNextbot</page>. Returned by <page>Global.Path</page>.",
    "functions": [
      {
        "name": "Compute",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "description": "Compute shortest path from bot to 'goal' via A* algorithm.",
        "arguments": [
          {
            "name": "from",
            "type": "NextBot",
            "description": "The nextbot we're generating for.  This can also be a nextbot player (<page>player.CreateNextbot</page>)."
          },
          {
            "name": "to",
            "type": "Vector",
            "description": "To point"
          },
          {
            "name": "generator",
            "type": "function",
            "default": "nil",
            "description": "A funtion that allows you to alter the path generation. See example below for the default function."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "* If returns true, path was found to the goal position.\n* If returns false, path may either be invalid (use IsValid() to check), or valid but doesn't reach all the way to the goal."
          }
        ]
      },
      {
        "name": "GetCursorData",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "description": "Returns the cursor data",
        "returnValues": [
          {
            "type": "table",
            "description": "A table with 3 keys:\n<page>number</page> curvature\n\n\n<page>Vector</page> forward\n\n\n<page>Vector</page> pos"
          }
        ]
      },
      {
        "name": "GetGoalTolerance",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "description": "Returns how close we can get to the goal to call it done.",
        "returnValues": [
          {
            "type": "number",
            "description": "The distance we're setting it to"
          }
        ]
      },
      {
        "name": "MoveCursorTo",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "description": "Sets the cursor position to given distance.\n\nFor relative distance, see <page>PathFollower:MoveCursor</page>.",
        "arguments": [
          {
            "name": "distance",
            "type": "number",
            "description": "The distance to move the cursor (in world units)"
          }
        ]
      },
      {
        "name": "SetGoalTolerance",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "description": "How close we can get to the goal to call it done",
        "arguments": [
          {
            "name": "distance",
            "type": "number",
            "description": "The distance we're setting it to"
          }
        ]
      }
    ]
  },
  {
    "name": "PhysCollide"
  },
  {
    "name": "PhysObj",
    "functions": [
      {
        "name": "AddAngleVelocity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adds the specified [angular velocity](https://en.wikipedia.org/wiki/Angular_velocity) velocity to the current <page>PhysObj</page>.",
        "arguments": [
          {
            "name": "angularVelocity",
            "type": "Vector",
            "description": "The additional velocity in `degrees/s`. (Local to the physics object.)\n<note>Does nothing on frozen objects.</note>"
          }
        ]
      },
      {
        "name": "CalculateVelocityOffset",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Calculates the linear and angular velocities on the center of mass for an offset impulse. The outputs can be directly passed to <page>PhysObj:AddVelocity</page> and <page>PhysObj:AddAngleVelocity</page>, respectively.\n\n<warning>This will return zero length vectors if the physics object's motion is disabled. See <page>PhysObj:IsMotionEnabled</page>.</warning>",
        "arguments": [
          {
            "name": "impulse",
            "type": "Vector",
            "description": "The impulse acting on the object in `kg*source_unit/s`. (World frame)"
          },
          {
            "name": "position",
            "type": "Vector",
            "description": "The location of the impulse in world coordinates (`source units`)"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The calculated linear velocity from the impulse on the physics object's center of mass in `source_unit/s`. (World frame)"
          },
          {
            "type": "Vector",
            "description": "The calculated angular velocity from the impulse on the physics object's center of mass in `degrees/s`. (Local frame)"
          }
        ]
      },
      {
        "name": "EnableGravity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets whether the PhysObject should be affected by gravity",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "True to enable, false to disable."
          }
        ]
      },
      {
        "name": "GetAABB",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the mins and max of the physics object.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "Mins"
          },
          {
            "type": "Vector",
            "description": "Maxs"
          }
        ]
      },
      {
        "name": "GetEntity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the parent entity of the physics object.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity this physics object belongs to"
          }
        ]
      },
      {
        "name": "GetPositionMatrix",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the position and angle of the physics object as a 3x4 matrix (<page>VMatrix</page> is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.",
        "returnValues": [
          {
            "type": "VMatrix",
            "description": "The position and angle matrix."
          }
        ]
      },
      {
        "name": "GetStress",
        "parent": "PhysObj",
        "realms": [
          "server"
        ],
        "description": "Returns the internal and external stress of the entity.",
        "returnValues": [
          {
            "type": "number",
            "description": "The external stress (`𝜎𝑒`). It's the value of a giving force to other entities (in kg)."
          },
          {
            "type": "number",
            "description": "The internal stress (`𝜎𝑖`). It's the value of a receiving force from other entities (in kg)."
          }
        ]
      },
      {
        "name": "IsGravityEnabled",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whenever the entity is affected by gravity.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` if the gravity is enabled, `false` otherwise"
          }
        ]
      },
      {
        "name": "IsMotionEnabled",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns if the physics object can move itself (by velocity, acceleration)",
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` if the motion is enabled, `false` otherwise."
          }
        ]
      },
      {
        "name": "IsMoveable",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whenever the entity is able to move.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "movable"
          }
        ]
      },
      {
        "name": "IsValid",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns if the physics object is valid/not NULL.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "isValid"
          }
        ]
      },
      {
        "name": "LocalToWorld",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Mapping a vector in local frame of the physics object to world frame.\n\n<note>this function does translation and rotation, with translation done first.</note>",
        "arguments": [
          {
            "name": "LocalVec",
            "type": "Vector",
            "description": "A vector in the physics object's local frame"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The corresponding vector in world frame"
          }
        ]
      },
      {
        "name": "OutputDebugInfo",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Prints debug info about the state of the physics object to the console."
      },
      {
        "name": "SetAngleDragCoefficient",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the amount of [drag](https://en.wikipedia.org/wiki/Drag_(physics)) to apply to a physics object when attempting to rotate.",
        "arguments": [
          {
            "name": "coefficient",
            "type": "number",
            "description": "[Drag coefficient](https://en.wikipedia.org/wiki/Drag_coefficient). The bigger this value is, the slower the angles will change."
          }
        ]
      },
      {
        "name": "SetInertia",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the angular inertia. See <page>PhysObj:GetInertia</page>.\n\n<note>This does not affect linear inertia.</note>",
        "arguments": [
          {
            "name": "angularInertia",
            "type": "Vector",
            "description": "The angular inertia of the object.<br>"
          }
        ]
      },
      {
        "name": "SetMass",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the mass of the physics object.",
        "arguments": [
          {
            "name": "mass",
            "type": "number",
            "description": "The mass in kilograms, in range `[0, 50000]`"
          }
        ]
      }
    ]
  },
  {
    "name": "Player",
    "functions": [
      {
        "name": "AddCleanup",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adds an entity to the player's clean up list.",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "description": "Cleanup type"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity to add"
          }
        ]
      },
      {
        "name": "AddCount",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "<note>See [GetCount](/gmod/Player:GetCount) for list of types</note>Adds an entity to the total count of entities of same type.",
        "arguments": [
          {
            "name": "str",
            "type": "string",
            "description": "Entity type"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity"
          }
        ]
      },
      {
        "name": "AddFrozenPhysicsObject",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Adds a entity to the player's list of frozen objects.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity"
          },
          {
            "name": "physobj",
            "type": "PhysObj",
            "description": "Physics object belonging to ent"
          }
        ]
      },
      {
        "name": "Alive",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Checks if the player is alive.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the player is alive"
          }
        ]
      },
      {
        "name": "AllowFlashlight",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets if the player can toggle their flashlight. Function exists on both the server and client but has no effect when ran on the client.",
        "arguments": [
          {
            "name": "canFlashlight",
            "type": "boolean",
            "description": "True allows flashlight toggling"
          }
        ]
      },
      {
        "name": "Armor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the player's armor.",
        "returnValues": [
          {
            "type": "number",
            "description": "The player's armor."
          }
        ]
      },
      {
        "name": "CanUseFlashlight",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns true if the player's flashlight hasn't been disabled by <page>Player:AllowFlashlight</page>.\n\n<note>This is not synchronized between clients and server automatically!</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the player can use flashlight."
          }
        ]
      },
      {
        "name": "DebugInfo",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Prints the players' name and position to the console."
      },
      {
        "name": "DoAnimationEvent",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sends a third person animation event to the player.\n\nCalls <page>GM:DoAnimationEvent</page> with <page text=\"PLAYERANIMEVENT_CUSTOM_GESTURE\">Enums/PLAYERANIMEVENT</page> as the event, data as the given data.",
        "arguments": [
          {
            "name": "data",
            "type": "number",
            "description": "The data to send."
          }
        ]
      },
      {
        "name": "DoCustomAnimEvent",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sends a specified third person animation event to the player.\n\nCalls <page>GM:DoAnimationEvent</page> with specified arguments.",
        "arguments": [
          {
            "name": "event",
            "type": "number",
            "description": "The event to send. See <page>Enums/PLAYERANIMEVENT</page>."
          },
          {
            "name": "data",
            "type": "number",
            "description": "The data to send alongside the event."
          }
        ]
      },
      {
        "name": "GetAllowWeaponsInVehicle",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether the player is allowed to use their weapons in a vehicle or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the player is allowed to use their weapons in a vehicle or not."
          }
        ]
      },
      {
        "name": "GetAvoidPlayers",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets if the player will be pushed out of nocollided players.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "pushed"
          }
        ]
      },
      {
        "name": "GetCanWalk",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns true if the player is able to walk using the (default) alt key.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "AbleToWalk"
          }
        ]
      },
      {
        "name": "GetCurrentCommand",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the last command which was sent by the specified player. This can only be called on the player which <page>Global.GetPredictionPlayer</page>() returns.\n\n<note>When called clientside in singleplayer during <page>WEAPON:Think</page>, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.</note>\n\n<bug issue=\"3302\">This will fail in <page>GM:StartCommand</page>.</bug>",
        "returnValues": [
          {
            "type": "CUserCmd",
            "description": "Last user commands"
          }
        ]
      },
      {
        "name": "GetDuckSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a player's duck speed (in seconds)",
        "returnValues": [
          {
            "type": "number",
            "description": "duckspeed"
          }
        ]
      },
      {
        "name": "GetFOV",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the FOV of the player.",
        "returnValues": [
          {
            "type": "number",
            "description": "Field of view as a float"
          }
        ]
      },
      {
        "name": "GetFriendStatus",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "description": "Returns the steam \"relationship\" towards the player.",
        "returnValues": [
          {
            "type": "string",
            "description": "Should return one of four different things depending on their status on your friends list: \"friend\", \"blocked\", \"none\" or \"requested\"."
          }
        ]
      },
      {
        "name": "GetHands",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets the hands entity of a player",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The hands entity if players has one"
          }
        ]
      },
      {
        "name": "GetInfoNum",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The <page>ConVar</page> must have a <page text=\"FCVAR_USERINFO\">Enums/FCVAR</page> flag for this to work.",
        "arguments": [
          {
            "name": "cVarName",
            "type": "string",
            "description": "The name of the <page>ConVar</page> to query the value of"
          },
          {
            "name": "default",
            "type": "number",
            "description": "Default value if we failed to retrieve the number."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The value of the <page>ConVar</page> or the default value"
          }
        ]
      },
      {
        "name": "GetMaxSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the player's maximum movement speed.\n\nSee also <page>Player:SetMaxSpeed</page>, <page>Player:GetWalkSpeed</page> and <page>Player:GetRunSpeed</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum movement speed the player can go at."
          }
        ]
      },
      {
        "name": "GetObserverTarget",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity the player is currently observing.\n\nSet using <page>Player:SpectateEntity</page>.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity the player is currently spectating, or <page text=\"NULL\">Global_Variables</page> if the player has no target."
          }
        ]
      },
      {
        "name": "GetPunchAngle",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "<deprecated>You should use <page>Player:GetViewPunchAngles</page> instead.</deprecated>\nReturns players screen punch effect angle. See <page>Player:ViewPunch</page> and <page>Player:SetViewPunchAngles</page>",
        "returnValues": [
          {
            "type": "Angle",
            "description": "The punch angle"
          }
        ]
      },
      {
        "name": "GetStepSize",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the maximum height player can step onto.",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum height player can get up onto without jumping, in hammer units."
          }
        ]
      },
      {
        "name": "GetSuitPower",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the player's HEV suit power.\n\n<bug issue=\"3449\">This will only work for the local player when used clientside.</bug>",
        "returnValues": [
          {
            "type": "number",
            "description": "The current suit power."
          }
        ]
      },
      {
        "name": "GetUnDuckSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a player's unduck speed (in seconds)",
        "returnValues": [
          {
            "type": "number",
            "description": "unduck speed"
          }
        ]
      },
      {
        "name": "GetViewEntity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).\n<note>This function will return a [NULL Entity] until <page>Player:SetViewEntity</page> has been used</note>",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity the player is using to see from"
          }
        ]
      },
      {
        "name": "GetViewPunchAngles",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns players screen punch effect angle.",
        "returnValues": [
          {
            "type": "Angle",
            "description": "The punch angle"
          }
        ]
      },
      {
        "name": "IPAddress",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Returns the player's IP address and connection port in ip:port form\n<note>Returns `Error!` for bots.</note>",
        "returnValues": [
          {
            "type": "string",
            "name": "ip",
            "description": "The player's IP address and connection port"
          }
        ]
      },
      {
        "name": "IsPlayingTaunt",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns true if the player is playing a taunt.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the player is playing a taunt."
          }
        ]
      },
      {
        "name": "IsTyping",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether the player is typing in their chat.\n\nThis may not work properly if the server uses a custom chatbox.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the player is typing in their chat or not."
          }
        ]
      },
      {
        "name": "IsWalking",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns if the player currently walking. (`+walk` keybind)",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the player is currently walking."
          }
        ]
      },
      {
        "name": "KeyReleased",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets whether a key was just released this tick.",
        "arguments": [
          {
            "name": "key",
            "type": "number",
            "description": "The key, see <page>Enums/IN</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Was released or not"
          }
        ]
      },
      {
        "name": "Kill",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Kills a player and calls <page>GM:PlayerDeath</page>."
      },
      {
        "name": "KillSilent",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Kills a player without notifying the rest of the server.\n\nThis will call <page>GM:PlayerSilentDeath</page> instead of <page>GM:PlayerDeath</page>."
      },
      {
        "name": "PickupWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Forces the player to pickup an existing weapon entity. The player will not pick up the weapon if they already own a weapon of given type, or if the player could not normally have this weapon in their inventory.\n\nThis function **will** bypass <page>GM:PlayerCanPickupWeapon</page>.",
        "arguments": [
          {
            "name": "wep",
            "type": "Weapon",
            "description": "The weapon to try to pick up."
          },
          {
            "name": "ammoOnly",
            "type": "boolean",
            "default": "false",
            "description": "If set to true, the player will only attempt to pick up the ammo from the weapon. The weapon will not be picked up even if the player doesn't have a weapon of this type, and the weapon will be removed if the player picks up any ammo from it."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "result",
            "description": "Whether the player succeeded in picking up the weapon or not."
          }
        ]
      },
      {
        "name": "PlayStepSound",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Plays the correct step sound according to what the player is staying on.",
        "arguments": [
          {
            "name": "volume",
            "type": "number",
            "description": "Volume for the sound, in range from 0 to 1"
          }
        ]
      },
      {
        "name": "RemoveAllItems",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Removes all weapons and ammo from the player."
      },
      {
        "name": "SetActivity",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Sets the player's activity.",
        "arguments": [
          {
            "name": "act",
            "type": "number",
            "description": "The new activity to set. See <page>Enums/ACT</page>."
          }
        ]
      },
      {
        "name": "SetAllowFullRotation",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Set if the players' model is allowed to rotate around the pitch and roll axis.",
        "arguments": [
          {
            "name": "Allowed",
            "type": "boolean",
            "description": "Allowed to rotate"
          }
        ]
      },
      {
        "name": "SetClassID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the player's class id.",
        "arguments": [
          {
            "name": "classID",
            "type": "number",
            "description": "The class id the player is being set with."
          }
        ]
      },
      {
        "name": "SetHands",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the hands entity of a player.\n\nThe hands entity is an entity introduced in Garry's Mod 13 and it's used to show the player's hands attached to the viewmodel.\nThis is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit <page>Using Viewmodel Hands</page>.",
        "arguments": [
          {
            "name": "hands",
            "type": "Entity",
            "description": "The hands entity to set"
          }
        ]
      },
      {
        "name": "SetMaxSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the maximum speed which the player can move at.\n\n<note>This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see <page>CMoveData:SetMaxClientSpeed</page>.</note>",
        "arguments": [
          {
            "name": "walkSpeed",
            "type": "number",
            "description": "The maximum speed."
          }
        ]
      },
      {
        "name": "SetObserverMode",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the players observer mode. You must start the spectating first with <page>Player:Spectate</page>.",
        "arguments": [
          {
            "name": "mode",
            "type": "number",
            "description": "Spectator mode using <page>Enums/OBS_MODE</page>."
          }
        ]
      },
      {
        "name": "SetTeam",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Sets the player to the chosen team.",
        "arguments": [
          {
            "name": "Team",
            "type": "number",
            "description": "The team that the player is being set to."
          }
        ]
      },
      {
        "name": "SetViewOffsetDucked",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the **desired** view offset which equals the difference between the players actual position and their view when crouching.\n\nIf you want to set **actual** view offset, use <page>Player:SetCurrentViewOffset</page>\n\nSee also <page>Player:SetViewOffset</page> for **desired** view offset when standing.",
        "arguments": [
          {
            "name": "viewOffset",
            "type": "Vector",
            "description": "The new desired view offset when crouching."
          }
        ]
      },
      {
        "name": "SetWalkSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the player's normal walking speed. Not sprinting, not slow walking <key>+walk</key>.\n\nSee also <page>Player:SetSlowWalkSpeed</page>, <page>Player:GetWalkSpeed</page>, <page>Player:SetCrouchedWalkSpeed</page>, <page>Player:SetMaxSpeed</page> and <page>Player:SetRunSpeed</page>.\n\n<bug issue=\"2030\">Using a speed of `0` can lead to prediction errors.</bug>\n\n<note>`player_default` class walk speed is: `400`.</note>",
        "arguments": [
          {
            "name": "walkSpeed",
            "type": "number",
            "description": "The new walk speed when `sv_friction` is below `10`. Higher `sv_friction` values will result in slower speed.\n\nHas to be `7` or above or the player **won't** be able to move."
          }
        ]
      },
      {
        "name": "SimulateGravGunDrop",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Signals the entity that it was dropped by the gravity gun.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity that was dropped."
          }
        ]
      },
      {
        "name": "StartWalking",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\n\nWhen used in a <page>GM:SetupMove</page> hook, this function will force the player to walk, as well as preventing the player from sprinting."
      },
      {
        "name": "SteamID64",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the player's full **64-bit SteamID**, also known as **CommunityID**. Information on how data is packed into this value can be found [here](https://developer.valvesoftware.com/wiki/SteamID).\n\nSee <page>Player:AccountID</page> for a function that returns only the Account ID part of the SteamID and <page>Player:SteamID</page> for the text version of the SteamID.\n\n<note>In a `-multirun` environment, this will return `\"0\"` for all \"copies\" of a player because they are not authenticated with Steam.\n\nFor bots, this will return `90071996842377216` (equivalent to `STEAM_0:0:0`) for the first bot to join.\n\nFor each additional bot, the number increases by 1. So the next bot will be `90071996842377217` (`STEAM_0:1:0`) then `90071996842377218` (`STEAM_0:0:1`) and so on.</note>",
        "returnValues": [
          {
            "type": "string",
            "description": "Player's 64-bit SteamID aka CommunityID.\n\n<note>The return value is a string, not a number, since Lua's numbers are unable to store the entire 64bit numbers without data loss.</note>"
          }
        ]
      },
      {
        "name": "StopZooming",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Turns off the zoom mode of the player. (+zoom console command)\n\nBasically equivalent of entering \"-zoom\" into player's console."
      },
      {
        "name": "SuppressHint",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Prevents a hint from showing up.\n\n\n<note>This function is only available in Sandbox and its derivatives</note>",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Hint name/class/index to prevent from showing up. You can find a list of hint names for this function <page text=\"here\">List_of_Hint_Classes</page>."
          }
        ]
      },
      {
        "name": "TimeConnected",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Returns the time in seconds since the player connected.\n<note>Bots will always return value 0.</note>",
        "returnValues": [
          {
            "type": "number",
            "name": "connectTime"
          }
        ]
      },
      {
        "name": "UniqueID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "<deprecated><br>\n**This function has collisions,** where more than one player can have the same UniqueID. It is **highly** recommended to use <page>Player:SteamID64</page> or <page>Player:SteamID</page> instead, which are guaranteed to be unique to each player.</deprecated>\n\nReturns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.\n\n<note>In Singleplayer, this function will always return 1.</note>",
        "returnValues": [
          {
            "type": "number",
            "description": "The player's Unique ID"
          }
        ]
      },
      {
        "name": "UnSpectate",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "description": "Stops the player from spectating another entity."
      },
      {
        "name": "ViewPunch",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Simulates a push on the client's screen. This **adds** view punch velocity, and does not touch the current view punch angle, for which you can use <page>Player:SetViewPunchAngles</page>.",
        "arguments": [
          {
            "name": "PunchAngle",
            "type": "Angle",
            "description": "The angle in which to push the player's screen."
          }
        ]
      }
    ]
  },
  {
    "name": "ProjectedTexture",
    "functions": [
      {
        "name": "GetConstantAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "Returns the constant attenuation of the projected texture, which can also be set by <page>ProjectedTexture:SetConstantAttenuation</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The constant attenuation"
          }
        ]
      },
      {
        "name": "GetLinearAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "Returns the linear attenuation of the projected texture, which can also be set by <page>ProjectedTexture:SetLinearAttenuation</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The linear attenuation."
          }
        ]
      },
      {
        "name": "GetShadowSlopeScaleDepthBias",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "Returns the shadow depth slope scale bias of the projected texture.\n\nSet by <page>ProjectedTexture:SetShadowSlopeScaleDepthBias</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The current shadow depth slope scale bias."
          }
        ]
      },
      {
        "name": "GetTexture",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "Returns the texture of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetTexture</page>",
        "returnValues": [
          {
            "type": "ITexture",
            "description": "The texture of the ProjectedTexture."
          }
        ]
      },
      {
        "name": "GetTextureFrame",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "Returns the texture frame of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetTextureFrame</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The texture frame."
          }
        ]
      },
      {
        "name": "SetPos",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "Move the Projected Texture to the specified position.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "arguments": [
          {
            "name": "position",
            "type": "Vector"
          }
        ]
      },
      {
        "name": "SetQuadraticAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "Sets the quadratic attenuation of the projected texture.\n\nSee also <page>ProjectedTexture:SetLinearAttenuation</page> and <page>ProjectedTexture:SetConstantAttenuation</page>.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "arguments": [
          {
            "name": "quadAtten",
            "type": "number"
          }
        ]
      },
      {
        "name": "SetTextureFrame",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "description": "For animated textures, this will choose which frame in the animation will be projected.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "arguments": [
          {
            "name": "frame",
            "type": "number",
            "description": "The frame index to use."
          }
        ]
      }
    ]
  },
  {
    "name": "Schedule",
    "description": "The object returned by <page>ai_schedule.New</page>."
  },
  {
    "name": "Stack",
    "functions": [
      {
        "name": "PopMulti",
        "parent": "Stack",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Pop an item from the stack",
        "arguments": [
          {
            "name": "amount",
            "type": "number",
            "default": "1",
            "description": "Amount of items you want to pop."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "name": "items",
            "description": "The Popped Items."
          }
        ]
      }
    ]
  },
  {
    "name": "SurfaceInfo",
    "functions": [
      {
        "name": "IsNoDraw",
        "parent": "SurfaceInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Checks if the brush surface is a nodraw surface, meaning it will not be drawn by the engine.\n\n<note>This internally checks the SURFDRAW_NODRAW flag.</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns true if this surface won't be drawn."
          }
        ]
      },
      {
        "name": "IsWater",
        "parent": "SurfaceInfo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Checks if the brush surface is water.\n\n<note>This internally checks the SURFDRAW_WATER flag.</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns true if the surface is water."
          }
        ]
      }
    ]
  },
  {
    "name": "Task",
    "functions": [
      {
        "name": "InitFunctionName",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "description": "Initialises the AI task as NPC method-based.",
        "arguments": [
          {
            "name": "startname",
            "type": "string",
            "description": "The name of the NPC method to call on task start."
          },
          {
            "name": "runname",
            "type": "string",
            "description": "The name of the NPC method to call on task run."
          },
          {
            "name": "taskdata",
            "type": "number"
          }
        ]
      },
      {
        "name": "IsEngineType",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "description": "Determines if the task is an engine task (`TYPE_ENGINE`, 1)."
      },
      {
        "name": "Run_FName",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "description": "<internal></internal> Runs the AI task as an NPC method. This requires the task to be of type `TYPE_FNAME`.",
        "arguments": [
          {
            "name": "target",
            "type": "NPC",
            "description": "The NPC to run the task on."
          }
        ]
      }
    ]
  },
  {
    "name": "Tool",
    "functions": [
      {
        "name": "BuildConVarList",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "description": "Builds a list of all ConVars set via the ClientConVar variable on the <page>Structures/TOOL</page> and their default values. This is used for the preset system.",
        "returnValues": [
          {
            "type": "table",
            "name": "convars",
            "description": "A list of all convars and their default values."
          }
        ]
      },
      {
        "name": "GetHelpText",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a language key based on this tool's name and the current stage it is on.",
        "returnValues": [
          {
            "type": "string",
            "name": "key",
            "description": "The returned language key, for example `\"#tool.weld.1\"`"
          }
        ]
      },
      {
        "name": "GetLocalPos",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "description": "Retrieves an local vector previously stored using <page>Tool:SetObject</page>.\nSee also <page>Tool:GetPos</page>.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "The id of the object which was set in <page>Tool:SetObject</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "Associated local vector with given id."
          }
        ]
      },
      {
        "name": "GetOperation",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the current operation of the tool set by <page>Tool:SetOperation</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The current operation the tool is at."
          }
        ]
      },
      {
        "name": "GetOwner",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the owner of this tool.",
        "returnValues": [
          {
            "type": "Entity",
            "description": "Player using the tool"
          }
        ]
      },
      {
        "name": "ReleaseGhostEntity",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "description": "Removes any ghost entity created for this tool."
      },
      {
        "name": "SetObject",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "description": "Stores an <page>Entity</page> for later use in the tool.\n\nThe stored values can be retrieved by <page>Tool:GetEnt</page>, <page>Tool:GetPos</page>, <page>Tool:GetLocalPos</page>, <page>Tool:GetPhys</page>, <page>Tool:GetBone</page> and <page>Tool:GetNormal</page>",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "The id of the object to store."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to store."
          },
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position to store.\n<note>this position is in **global space** and is internally converted to **local space** relative to the object, so when you retrieve it later it will be corrected to the object's new position</note>"
          },
          {
            "name": "phys",
            "type": "PhysObj",
            "description": "The physics object to store."
          },
          {
            "name": "bone",
            "type": "number",
            "description": "The hit bone to store."
          },
          {
            "name": "normal",
            "type": "Vector",
            "description": "The hit normal to store."
          }
        ]
      }
    ]
  },
  {
    "name": "Vector",
    "functions": [
      {
        "name": "Distance",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the Euclidean distance between the vector and the other vector.\n\n<note>This function is more expensive than <page>Vector:DistToSqr</page>. However, please see the notes for <page>Vector:DistToSqr</page> before using it as squared distances are not the same as euclidean distances.</note>",
        "arguments": [
          {
            "name": "otherVector",
            "type": "Vector",
            "description": "The vector to get the distance to."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Distance between the vectors."
          }
        ]
      },
      {
        "name": "Dot",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the [dot product](https://en.wikipedia.org/wiki/Dot_product#Geometric_definition)  of this vector and the passed one.\n\nThe dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:<br><br>\n**a · b** = |**a**| |**b**| cos(θ) <br><br>\nwhere **a** and **b** are vectors.<br><br>\nSee <page>Vector:Length</page> for obtaining magnitudes.\n\nA dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other.",
        "arguments": [
          {
            "name": "otherVector",
            "type": "Vector",
            "description": "The vector to calculate the dot product with"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The dot product between the two vectors"
          }
        ]
      },
      {
        "name": "Length2DSqr",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the squared length of the vectors x and y value, x² + y².\n\nThis is faster than <page>Vector:Length2D</page> as calculating the square root is an expensive process.",
        "returnValues": [
          {
            "type": "number",
            "description": "Squared length of the vector in two dimensions"
          }
        ]
      },
      {
        "name": "Negate",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Negates this vector, i.e. sets every component to the negative value of itself. Same as `Vector( -vec.x, -vec.y, -vec.z )`"
      }
    ]
  },
  {
    "name": "Vehicle",
    "functions": [
      {
        "name": "BoostTimeLeft",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Returns the remaining boosting time left.",
        "returnValues": [
          {
            "type": "number",
            "description": "The remaining boosting time left"
          }
        ]
      },
      {
        "name": "GetAmmo",
        "parent": "Vehicle",
        "realms": [
          "client"
        ],
        "description": "Returns information about the ammo of the vehicle",
        "returnValues": [
          {
            "type": "number",
            "description": "Ammo type of the vehicle ammo"
          },
          {
            "type": "number",
            "description": "Clip size"
          },
          {
            "type": "number",
            "description": "Count"
          }
        ]
      },
      {
        "name": "GetCameraDistance",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns third person camera distance.",
        "returnValues": [
          {
            "type": "number",
            "description": "Camera distance"
          }
        ]
      },
      {
        "name": "GetMaxSpeed",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Returns the max speed of the vehicle in MPH.",
        "returnValues": [
          {
            "type": "number",
            "description": "The max speed of the vehicle in MPH"
          }
        ]
      },
      {
        "name": "GetPassenger",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets the passenger of the vehicle, returns NULL if no drivers is present.",
        "arguments": [
          {
            "name": "passenger",
            "type": "number",
            "description": "The index of the passenger"
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "The passenger"
          }
        ]
      },
      {
        "name": "GetPassengerSeatPoint",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Returns the seat position and angle of a given passenger seat.",
        "arguments": [
          {
            "name": "role",
            "type": "number",
            "description": "The passenger role. ( 1 is the driver )"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The seat position"
          },
          {
            "type": "Angle",
            "description": "The seat angle"
          }
        ]
      },
      {
        "name": "GetSteeringDegrees",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Returns the maximum steering degree of the vehicle",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum steering degree of the vehicle"
          }
        ]
      },
      {
        "name": "HasBrakePedal",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Returns whether this vehicle has a brake pedal. See <page>Vehicle:SetHasBrakePedal</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this vehicle has a brake pedal or not."
          }
        ]
      },
      {
        "name": "IsBoosting",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Returns whether this vehicle is currently boosting or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this vehicle is currently boosting or not."
          }
        ]
      },
      {
        "name": "IsEngineStarted",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Returns whether the engine is started or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the engine is started or not."
          }
        ]
      },
      {
        "name": "SetCameraDistance",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the third person camera distance of the vehicle.",
        "arguments": [
          {
            "name": "distance",
            "type": "number",
            "description": "Camera distance to set to"
          }
        ]
      },
      {
        "name": "SetVehicleParams",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "description": "Sets the vehicle parameters for given vehicle.\n\n<note>Not all variables from the <page>Structures/VehicleParams</page> can be set.</note>",
        "arguments": [
          {
            "name": "params",
            "type": "table",
            "description": "The new new vehicle parameters. See <page>Structures/VehicleParams</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "VMatrix",
    "functions": [
      {
        "name": "GetInverseTR",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.\n\nUsing this function on a matrix with modified scale may return an incorrect inverted matrix.\n\nTo get the inverse of a matrix that contains other modifications, see <page>VMatrix:GetInverse</page>.",
        "returnValues": [
          {
            "type": "VMatrix",
            "description": "The inverted matrix."
          }
        ]
      },
      {
        "name": "GetScale",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the absolute scale of the matrix.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "Absolute scale of the matrix"
          }
        ]
      },
      {
        "name": "GetTranslation",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the absolute translation of the matrix.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "Absolute translation of the matrix"
          }
        ]
      },
      {
        "name": "IsRotationMatrix",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether the matrix is a rotation matrix or not.\n\nTechnically it checks if the forward, right and up vectors are orthogonal and normalized.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is the matrix a rotation matrix or not"
          }
        ]
      },
      {
        "name": "IsZero",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Checks whenever all fields of the matrix are 0, aka if this is a [null matrix](https://en.wikipedia.org/wiki/Zero_matrix).",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If the matrix is a null matrix."
          }
        ]
      },
      {
        "name": "Mul",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Multiplies this matrix by given matrix.",
        "arguments": [
          {
            "name": "input",
            "type": "VMatrix",
            "description": "The input matrix to multiply by."
          }
        ]
      },
      {
        "name": "Set",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Copies values from the given matrix object.",
        "arguments": [
          {
            "name": "src",
            "type": "VMatrix",
            "description": "The matrix to copy values from."
          }
        ]
      },
      {
        "name": "SetAngles",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the absolute rotation of the matrix.",
        "arguments": [
          {
            "name": "angle",
            "type": "Angle",
            "description": "New angles."
          }
        ]
      },
      {
        "name": "SetUnpacked",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets each component of the matrix.",
        "arguments": [
          {
            "name": "e11",
            "type": "number"
          },
          {
            "name": "e12",
            "type": "number"
          },
          {
            "name": "e13",
            "type": "number"
          },
          {
            "name": "e14",
            "type": "number"
          },
          {
            "name": "e21",
            "type": "number"
          },
          {
            "name": "e22",
            "type": "number"
          },
          {
            "name": "e23",
            "type": "number"
          },
          {
            "name": "e24",
            "type": "number"
          },
          {
            "name": "e31",
            "type": "number"
          },
          {
            "name": "e32",
            "type": "number"
          },
          {
            "name": "e33",
            "type": "number"
          },
          {
            "name": "e34",
            "type": "number"
          },
          {
            "name": "e41",
            "type": "number"
          },
          {
            "name": "e42",
            "type": "number"
          },
          {
            "name": "e43",
            "type": "number"
          },
          {
            "name": "e44",
            "type": "number"
          }
        ]
      },
      {
        "name": "SetUp",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the up direction of the matrix.\n\nie. The third column of the matrix, excluding the w coordinate.",
        "arguments": [
          {
            "name": "forward",
            "type": "Vector",
            "description": "The up direction of the matrix."
          }
        ]
      },
      {
        "name": "Sub",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Subtracts given matrix from this matrix.",
        "arguments": [
          {
            "name": "input",
            "type": "VMatrix",
            "description": "The input matrix to subtract."
          }
        ]
      },
      {
        "name": "ToTable",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "description": "Converts the matrix to a 4x4 table. See <page>Global.Matrix</page> function.",
        "returnValues": [
          {
            "type": "table",
            "description": "The 4x4 table."
          }
        ]
      }
    ]
  },
  {
    "name": "Weapon",
    "functions": [
      {
        "name": "Clip2",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns how much secondary ammo is in the magazine.\n<note>This is not shared between clients and will instead return the maximum secondary clip size.</note>",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of secondary ammo in the magazine."
          }
        ]
      },
      {
        "name": "DefaultReload",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "description": "Forces the weapon to reload while playing given animation.\n<note>\nThis will stop the <page>Weapon:Think</page> function from getting called while the weapon is reloading!\n</note>",
        "arguments": [
          {
            "name": "act",
            "type": "number",
            "description": "Sequence to use as reload animation. Uses the <page>Enums/ACT</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Did reloading actually take place"
          }
        ]
      },
      {
        "name": "GetPrimaryAmmoType",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets the primary ammo type of the given weapon.",
        "returnValues": [
          {
            "type": "number",
            "description": "The ammo type ID, or -1 if not found."
          }
        ]
      },
      {
        "name": "SetActivity",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the activity the weapon is playing.\n\nSee also <page>Weapon:GetActivity</page>.",
        "arguments": [
          {
            "name": "act",
            "type": "number",
            "description": "The new activity to set, see <page>Enums/ACT</page>."
          }
        ]
      }
    ]
  }
]