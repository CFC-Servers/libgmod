[
  {
    "name": "AddonMaterial",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Loads the specified image from the `/cache` folder, used in combination <page>steamworks.Download</page>. Most addons will provide a 512x512 png image.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the file."
      }
    ],
    "returnValues": [
      {
        "type": "IMaterial",
        "description": "The material, returns `nil` if the cached file is not an image."
      }
    ]
  },
  {
    "name": "ChangeTooltip",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Automatically called by the engine when a panel is hovered over with the mouse",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel that has been hovered over"
      }
    ]
  },
  {
    "name": "CloseDermaMenus",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Closes all Derma menus that have been passed to <page>Global.RegisterDermaMenuForClose</page> and calls <page>GM:CloseDermaMenus</page>"
  },
  {
    "name": "collectgarbage",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Executes the specified action on the garbage collector.",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "default": "collect",
        "description": "The action to run.\n\nValid actions are `collect`, `stop`, `restart`, `count`, `step`, `setpause`, `setstepmul` and `isrunning`.\n<note>`isrunning` is only available on the x86-64 versions, because of the difference in the LuaJIT version. [See here](jit.version)</note>"
      },
      {
        "name": "arg",
        "type": "number",
        "description": "The argument of the specified action, only applicable for `step`, `setpause` and `setstepmul`."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "If the action is count this is the number of kilobytes of memory used by Lua.\nIf the action is step this is true if a garbage collection cycle was finished.\n\nIf the action is setpause this is the previous value for the GC's pause.\nIf the action is setstepmul this is the previous value for the GC's step."
      }
    ]
  },
  {
    "name": "Color",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates a <page>Color</page>.\n<warning>This function is very expensive when used in rendering hooks or in operations requiring very frequent calls (like loops for example). It is better to store the color in a variable or to use the [default colors](https://wiki.facepunch.com/gmod/Global_Variables#misc) available.</warning>",
    "arguments": [
      {
        "name": "r",
        "type": "number",
        "description": "An integer from `0-255` describing the red value of the color."
      },
      {
        "name": "g",
        "type": "number",
        "description": "An integer from `0-255` describing the green value of the color."
      },
      {
        "name": "b",
        "type": "number",
        "description": "An integer from `0-255` describing the blue value of the color."
      },
      {
        "name": "a",
        "type": "number",
        "default": "255",
        "description": "An integer from `0-255` describing the alpha (transparency) of the color."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The created <page>Color</page>."
      }
    ]
  },
  {
    "name": "ColorRand",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates a <page>Color</page> with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.",
    "arguments": [
      {
        "name": "a",
        "type": "boolean",
        "default": "false",
        "description": "Should alpha be randomized."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The created <page>Color</page>."
      }
    ]
  },
  {
    "name": "ColorToHSV",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Converts a <page>Color</page> into HSV color space.",
    "arguments": [
      {
        "name": "color",
        "type": "table",
        "description": "The <page>Color</page>."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The hue in degrees `[0, 360]`."
      },
      {
        "type": "number",
        "description": "The saturation in the range `[0, 1]`."
      },
      {
        "type": "number",
        "description": "The value in the range `[0, 1]`."
      }
    ]
  },
  {
    "name": "ConVarExists",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether a <page>ConVar</page> with the given name exists or not",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the <page>ConVar</page>."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the <page>ConVar</page> exists, false otherwise."
      }
    ]
  },
  {
    "name": "CreateMaterial",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates a new material with the specified name and shader.\n\nMaterials created with this function can be used in <page>Entity:SetMaterial</page> and <page>Entity:SetSubMaterial</page> by prepending a `!` to their material name argument.\n\nThis will not create a new material if another material object with the same name already exists. All Materials created by this functions are cleaned up on map shutdown.\n\n<note>This does not work with [patch materials](https://developer.valvesoftware.com/wiki/Patch).</note>\n\n<bug issue=\"1531\">.pngs must be loaded with <page>Global.Material</page> before being used with this function.</bug>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The material name. Must be unique."
      },
      {
        "name": "shaderName",
        "type": "string",
        "description": "The shader name. See <page>Shaders</page>."
      },
      {
        "name": "materialData",
        "type": "table",
        "description": "Key-value table that contains shader parameters and proxies.\n\n* See: [List of Shader Parameters on Valve Developers Wiki](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) and each shader's page from .\n\n<note>Unlike <page>IMaterial:SetTexture</page>, this table will not accept <page>ITexture</page> values. Instead, use the texture's name (see <page>ITexture:GetName</page>).</note>"
      }
    ],
    "returnValues": [
      {
        "type": "IMaterial",
        "description": "Created material"
      }
    ]
  },
  {
    "name": "CreateParticleSystemNoEntity",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a new particle system, and sets control points 0 and 1 to given position, as well as optionally orientation of CP0 to the given angles. See also <page>Global.CreateParticleSystem</page>\n\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>",
    "arguments": [
      {
        "name": "effect",
        "type": "string",
        "description": "The name of the effect to create. It must be precached."
      },
      {
        "name": "pos",
        "type": "Vector",
        "description": "The position for the particle system."
      },
      {
        "name": "ang",
        "type": "Angle",
        "default": "Angle( 0, 0, 0 )",
        "description": "The orientation of the particle system."
      }
    ],
    "returnValues": [
      {
        "type": "CNewParticleEffect",
        "description": "The created particle system."
      }
    ]
  },
  {
    "name": "CreateSound",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a sound parented to the specified entity.\n\n<note>You can only create one CSoundPatch per audio file, per entity at the same time.</note>\n<note>\nValid sample rates: **11025 Hz, 22050 Hz and 44100 Hz**, otherwise you may see this kind of message:\n\n`Unsupported 32-bit wave file your_sound.wav` and\n`Invalid sample rate (48000) for sound 'your_sound.wav'`\n</note>",
    "arguments": [
      {
        "name": "targetEnt",
        "type": "Entity",
        "description": "The target entity."
      },
      {
        "name": "soundName",
        "type": "string",
        "description": "The sound to play."
      },
      {
        "name": "filter",
        "type": "CRecipientFilter",
        "default": "nil",
        "description": "A <page>CRecipientFilter</page> of the players that will have this sound networked to them.\n\nIf not set, the default is a [CPASAttenuationFilter](https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes).\n\n<note>This argument only works serverside.</note>"
      }
    ],
    "returnValues": [
      {
        "type": "CSoundPatch",
        "description": "The sound object. You should keep a reference to this object for as long as you wish the sound to play!"
      }
    ]
  },
  {
    "name": "CreateSprite",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates and returns a new <page>DSprite</page> element with the supplied material.",
    "arguments": [
      {
        "name": "material",
        "type": "IMaterial",
        "description": "Material the sprite should draw."
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "description": "The new <page>DSprite</page> element."
      }
    ]
  },
  {
    "name": "DebugInfo",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.",
    "arguments": [
      {
        "name": "slot",
        "type": "number",
        "description": "The location on the right hand screen to write the debug info to. Starts at 0, no upper limit"
      },
      {
        "name": "info",
        "type": "string",
        "description": "The debugging information to be written to the screen"
      }
    ]
  },
  {
    "name": "Derma_Hook",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates panel method that calls the supplied Derma skin hook via <page>derma.SkinHook</page>",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel to add the hook to"
      },
      {
        "name": "functionName",
        "type": "string",
        "description": "Name of panel function to create"
      },
      {
        "name": "hookName",
        "type": "string",
        "description": "Name of Derma skin hook to call within the function"
      },
      {
        "name": "typeName",
        "type": "string",
        "description": "Type of element to call Derma skin hook for"
      }
    ]
  },
  {
    "name": "DermaMenu",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates a <page>DMenu</page> and closes any current menus.",
    "arguments": [
      {
        "name": "keepOpen",
        "type": "boolean",
        "default": "false",
        "description": "If we should keep other <page>DMenu</page>s open (`true`) or not (`false`)."
      },
      {
        "name": "parent",
        "type": "Panel",
        "default": "nil",
        "description": "The panel to parent the created menu to."
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "name": "menu",
        "description": "The created <page>DMenu</page>."
      }
    ]
  },
  {
    "name": "DrawBloom",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the bloom shader, which creates a glowing effect from bright objects.",
    "arguments": [
      {
        "name": "Darken",
        "type": "number",
        "description": "Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of `1` will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow."
      },
      {
        "name": "Multiply",
        "type": "number",
        "description": "Will affect how bright the glowing spots are. A value of `0` will make the bloom effect unnoticeable."
      },
      {
        "name": "SizeX",
        "type": "number",
        "description": "The size of the bloom effect along the horizontal axis."
      },
      {
        "name": "SizeY",
        "type": "number",
        "description": "The size of the bloom effect along the vertical axis."
      },
      {
        "name": "Passes",
        "type": "number",
        "description": "Determines how much to exaggerate the effect."
      },
      {
        "name": "ColorMultiply",
        "type": "number",
        "description": "Will multiply the colors of the glowing spots, making them more vivid."
      },
      {
        "name": "Red",
        "type": "number",
        "description": "How much red to multiply with the glowing color. Should be between `0` and `1`."
      },
      {
        "name": "Green",
        "type": "number",
        "description": "How much green to multiply with the glowing color. Should be between `0` and `1`."
      },
      {
        "name": "Blue",
        "type": "number",
        "description": "How much blue to multiply with the glowing color. Should be between `0` and `1`."
      }
    ]
  },
  {
    "name": "DrawTexturize",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See <page text=\"g_texturize\">Shaders/g_texturize</page> for information on making the texture.",
    "arguments": [
      {
        "name": "Scale",
        "type": "number",
        "description": "Scale of the texture. A smaller number creates a larger texture."
      },
      {
        "name": "BaseTexture",
        "type": "number",
        "description": "This will be the texture to use in the effect. Make sure you use <page>Global.Material</page> to get the texture number."
      }
    ]
  },
  {
    "name": "DrawToyTown",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.",
    "arguments": [
      {
        "name": "Passes",
        "type": "number",
        "description": "An integer determining how many times to draw the effect. A higher number creates more blur."
      },
      {
        "name": "Height",
        "type": "number",
        "description": "The amount of screen which should be blurred on the top and bottom."
      }
    ]
  },
  {
    "name": "DTVar_ReceiveProxyGL",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Calls all NetworkVarNotify functions of the given entity with the given new value, but doesn't change the real value.\ninternally uses <page>Entity:CallDTVarProxies</page>",
    "arguments": [
      {
        "name": "entity",
        "type": "Entity",
        "description": "The Entity to run the NetworkVarNotify functions from."
      },
      {
        "name": "Type",
        "type": "string",
        "description": "The NetworkVar Type.\n* `String`\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`"
      },
      {
        "name": "index",
        "type": "number",
        "description": "The NetworkVar index."
      },
      {
        "name": "new value",
        "type": "any",
        "description": "The new value."
      }
    ]
  },
  {
    "name": "DynamicLight",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates or replaces a dynamic light with the given id.\n\n<note>Only 32 dlights and 64 elights can be active at once.</note>\n<warning>It is not safe to hold a reference to this object after creation since its data can be replaced by another dlight at any time.</warning>\n<bug issue=\"3798\">The minlight parameter affects the world and entities differently.</bug>",
    "arguments": [
      {
        "name": "index",
        "type": "number",
        "description": "An unsigned Integer. Usually an <page text=\"entity index\">Entity:EntIndex</page> is used here."
      },
      {
        "name": "elight",
        "type": "boolean",
        "default": "false",
        "description": "Allocates an elight instead of a dlight. Elights have a higher light limit and do not light the world (making the \"noworld\" parameter have no effect)."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "A DynamicLight structured table. See <page>Structures/DynamicLight</page>"
      }
    ]
  },
  {
    "name": "DynamicMaterial",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Creates a dynamic Material from the given materialPath\n<warning>This function should never be used in a Rendering Hook because it creates a new dynamic material every time and can fill up your vram.</warning>",
    "arguments": [
      {
        "name": "materialPath",
        "type": "string",
        "description": "The material with path. The path is relative to the `materials/` folder."
      },
      {
        "name": "flags",
        "type": "string",
        "default": "nil",
        "description": "Some bind of bits / byte.\n<validate>What does this argument do / use.</validate> Currently working value: \"0100010\" --nocull smooth"
      }
    ],
    "returnValues": [
      {
        "type": "IMaterial",
        "description": "Generated material."
      }
    ]
  },
  {
    "name": "EffectData",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a <page>CEffectData</page> object to be used with <page>util.Effect</page>.\n\n<bug issue=\"2771\">This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.</bug>",
    "returnValues": [
      {
        "type": "CEffectData",
        "description": "The <page>CEffectData</page> object."
      }
    ]
  },
  {
    "name": "Error",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Throws an error. This is currently an alias of <page>Global.ErrorNoHalt</page> despite it once throwing a halting error like <page text=\"error\">Global.error(lowercase)</page> without the stack trace appended.\n\n<bug issue=\"2113\">This function throws a non-halting error instead of a halting error.</bug>",
    "arguments": [
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Converts all arguments to strings and prints them with no spacing or line breaks."
      }
    ]
  },
  {
    "name": "ErrorNoHalt",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Throws a Lua error but does not break out of the current call stack.\nThis function will not print a stack trace like a normal error would.\nEssentially similar if not equivalent to <page>Global.Msg</page>.",
    "arguments": [
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Converts all arguments to strings and prints them with no spacing."
      }
    ]
  },
  {
    "name": "EyePos",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the origin of the current render context as calculated by <page>GM:CalcView</page>.\n\n<bug issue=\"2516\">This function is only reliable inside rendering hooks.</bug>",
    "returnValues": [
      {
        "type": "Vector",
        "description": "Camera position."
      }
    ]
  },
  {
    "name": "FindMetaTable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the meta table for the class with the matching name.\n\nInternally returns <page>debug.getregistry</page>()[metaName]\n\nYou can learn more about meta tables on the <page>Meta Tables</page> page.\n\nYou can find a list of meta tables that can be retrieved with this function on <page>Enums/TYPE</page>. The name in the description is the string to use with this function.",
    "arguments": [
      {
        "name": "metaName",
        "type": "string",
        "description": "The object type to retrieve the meta table of."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The corresponding meta table."
      }
    ]
  },
  {
    "name": "FindTooltip",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel to find tool-tip of"
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "tool-tip text"
      },
      {
        "type": "Panel",
        "description": "tool-tip panel"
      },
      {
        "type": "Panel",
        "description": "panel that the function was called with"
      }
    ]
  },
  {
    "name": "FireProblemFromEngine",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal>Internally uses <page>Global.FireProblem</page> to create / fire the Problem.</internal>\nThis function is called from the engine to notify the player about a problem in a more user friendly way compared to a console message.",
    "arguments": [
      {
        "name": "id",
        "type": "string",
        "description": "The Problem ID."
      },
      {
        "name": "severity",
        "type": "number",
        "description": "The Problem severity."
      },
      {
        "name": "params",
        "type": "string",
        "description": "Additional Parameters."
      }
    ]
  },
  {
    "name": "FrameNumber",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the number of frames rendered since the game was launched."
  },
  {
    "name": "GenerateSpawnlistFromPath",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "This function adds all models from a specified folder to a custom Spawnlist category. Internally uses <page>Global.AddPropsOfParent</page>\n<warning>Using this function before <page>SANDBOX:PopulateContent</page> has been called will result in an error</warning>",
    "arguments": [
      {
        "name": "folder",
        "type": "string",
        "description": "the folder to search for models"
      },
      {
        "name": "path",
        "type": "string",
        "description": "The path to look for the files and directories in. See <page text=\"this list\">File_Search_Paths</page> for a list of valid paths."
      },
      {
        "name": "name",
        "type": "string",
        "description": "The Spawnmenu Category name"
      },
      {
        "name": "icon",
        "type": "string",
        "default": "icon16/page.png",
        "description": "The Spawnmenu Category Icon to use"
      },
      {
        "name": "appid",
        "type": "number",
        "description": "The AppID which is needed for the Content"
      }
    ]
  },
  {
    "name": "GetDownloadables",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns a table with the names of files needed from the server you are currently joining.",
    "returnValues": [
      {
        "type": "table",
        "description": "table of file names"
      }
    ]
  },
  {
    "name": "GetGlobal2Bool",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a boolean that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "boolean",
        "default": "false",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Entity",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an entity that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "Entity",
        "default": "NULL",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "Entity",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Int",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an integer that is shared between the server and all clients.\n\n<warning>The integer has a 32 bit limit. Use <page>Global.GetGlobalInt</page> for a higher limit</warning>",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "number",
        "default": "0",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetLoadPanel",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns the loading screen panel and creates it if it doesn't exist.",
    "returnValues": [
      {
        "type": "Panel",
        "description": "The loading screen panel"
      }
    ]
  },
  {
    "name": "GetMapList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns a table with the names of all maps and categories that you have on your client.",
    "returnValues": [
      {
        "type": "table",
        "description": "Table of map names and categories."
      }
    ]
  },
  {
    "name": "GetServers",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nStarts Searching for Servers in the given Category. Can be stopped with <page>Global.DoStopServers</page>.\nInternally uses <page>serverlist.Query</page> to search for Servers.",
    "arguments": [
      {
        "name": "category",
        "type": "string",
        "description": "The Category to start searching the Servers in. **Working Values: internet, favorite, history, lan**"
      },
      {
        "name": "id",
        "type": "number",
        "description": "Some ID. can be a random number?"
      }
    ]
  },
  {
    "name": "HSLToColor",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Converts a color from [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a <page>Color</page>.\n\n<bug issue=\"2407\">The returned color will not have the color metatable.</bug>",
    "arguments": [
      {
        "name": "hue",
        "type": "number",
        "description": "The hue in degrees from 0-360."
      },
      {
        "name": "saturation",
        "type": "number",
        "description": "The saturation from 0-1."
      },
      {
        "name": "value",
        "type": "number",
        "description": "The lightness from 0-1."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The <page>Color</page> created from the HSL color space."
      }
    ]
  },
  {
    "name": "include",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Executes a Lua script.\n\n<note>Addon files (.gma files) do not support relative parent folders (`..` notation).\n\nThis function will try to load local client file if `sv_allowcslua` is **1**.</note>\n\n<warning>The file you are attempting to include **MUST NOT** be empty or the include will fail. Files over a certain size may fail as well.\n\nIf the file you are including is clientside or shared, it **must** be <page>Global.AddCSLuaFile</page>'d or this function will error saying the file doesn't exist.</warning>",
    "arguments": [
      {
        "name": "fileName",
        "type": "string",
        "description": "The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the **lua/** folder).\n\n<note>Please make sure your file names are unique, the filesystem is shared across all addons, so a file named `lua/config.lua` in your addon may be overwritten by the same file in another addon.</note>"
      }
    ],
    "returnValues": [
      {
        "type": "vararg",
        "description": "Anything that the executed Lua script returns."
      }
    ]
  },
  {
    "name": "isangle",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is an <page>Angle</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is an <page>Angle</page>."
      }
    ]
  },
  {
    "name": "IsEnemyEntityName",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the given NPC class name is an enemy. Returns `true` if the entity name is one of the following:\n* `monster_alien_grunt`\n* `monster_nihilanth`\n* `monster_tentacle`\n* `monster_alien_slave`\n* `monster_bigmomma`\n* `monster_bullchicken`\n* `monster_gargantua`\n* `monster_human_assassin`\n* `monster_babycrab`\n* `monster_human_grunt`\n* `monster_cockroach`\n* `monster_houndeye`\n* `monster_zombie`\n* `monster_headcrab`\n* `monster_alien_controller`\n* `monster_turret`\n* `monster_miniturret`\n* `monster_sentry`\n* `npc_antlion`\n* `npc_antlionguard`\n* `npc_antlionguardian`\n* `npc_barnacle`\n* `npc_breen`\n* `npc_clawscanner`\n* `npc_combine_s`\n* `npc_cscanner`\n* `npc_fastzombie`\n* `npc_fastzombie_torso`\n* `npc_headcrab`\n* `npc_headcrab_fast`\n* `npc_headcrab_poison`\n* `npc_hunter`\n* `npc_metropolice`\n* `npc_manhack`\n* `npc_poisonzombie`\n* `npc_strider`\n* `npc_stalker`\n* `npc_zombie`\n* `npc_zombie_torso`\n* `npc_zombine`\n* `npc_combine_camera`\n* `npc_turret_ceiling`\n* `npc_combinedropship`\n* `npc_combinegunship`\n* `npc_helicopter`\n* `npc_turret_floor`\n* `npc_antlion_worker`\n* `npc_headcrab_black`",
    "arguments": [
      {
        "name": "className",
        "type": "string",
        "description": "Class name of the entity to check."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Is an enemy?"
      }
    ]
  },
  {
    "name": "isentity",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is an <page>Entity</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to check."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is an <page>Entity</page>."
      }
    ]
  },
  {
    "name": "IsFirstTimePredicted",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns if this is the first time this hook was predicted.\n\nThis is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other  (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.\n\nVisit <page>Prediction</page> for more information about this behavior.\n\n<note>This is already used internally for <page>Entity:EmitSound</page>, <page>Weapon:SendWeaponAnim</page> and <page>Entity:FireBullets</page>, but NOT in  <page>util.Effect</page>.</note>",
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether or not this is the first time being predicted."
      }
    ]
  },
  {
    "name": "IsFriendEntityName",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the given NPC class name is a friend. Returns `true` if the entity name is one of the following:\n* `monster_scientist`\n* `monster_barney`\n* `npc_alyx`\n* `npc_barney`\n* `npc_citizen`\n* `npc_dog`\n* `npc_eli`\n* `npc_fisherman`\n* `npc_gman`\n* `npc_kleiner`\n* `npc_magnusson`\n* `npc_monk`\n* `npc_mossman`\n* `npc_odessa`\n* `npc_vortigaunt`",
    "arguments": [
      {
        "name": "className",
        "type": "string",
        "description": "Class name of the entity to check"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Is a friend"
      }
    ]
  },
  {
    "name": "isnumber",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>number</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>number</page>."
      }
    ]
  },
  {
    "name": "IsServerBlacklisted",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Checks if the given server data is blacklisted or not.",
    "arguments": [
      {
        "name": "address",
        "type": "string",
        "description": "Server ip. can end with *"
      },
      {
        "name": "hostname",
        "type": "string",
        "description": "Server name"
      },
      {
        "name": "description",
        "type": "string",
        "description": "description to check"
      },
      {
        "name": "gm",
        "type": "string",
        "description": "Gamemode name"
      },
      {
        "name": "map",
        "type": "string",
        "description": "Map name"
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "name": "result",
        "description": "Returns the reason why the server is blacklisted or nil if the server is not blacklisted."
      }
    ]
  },
  {
    "name": "isstring",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>string</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>string</page>."
      }
    ]
  },
  {
    "name": "IsTableOfEntitiesValid",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether or not every element within a table is a valid entity",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table containing entities to check"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "All entities valid"
      }
    ]
  },
  {
    "name": "IsUselessModel",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"",
    "arguments": [
      {
        "name": "modelName",
        "type": "string",
        "description": "The model name to be checked"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether or not the model is useless"
      }
    ]
  },
  {
    "name": "LanguageChanged",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Callback function for when the client's language changes. Called by the engine.",
    "arguments": [
      {
        "name": "lang",
        "type": "string",
        "description": "The new language code."
      }
    ]
  },
  {
    "name": "LoadNewsList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nUpdates the News List"
  },
  {
    "name": "Matrix",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a <page>VMatrix</page> object, a 4x4 matrix.",
    "arguments": [
      {
        "name": "data",
        "type": "table",
        "default": "{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}",
        "description": "Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.\n\nCan be a <page>VMatrix</page> to copy its data."
      }
    ],
    "returnValues": [
      {
        "type": "VMatrix",
        "description": "New matrix."
      }
    ]
  },
  {
    "name": "MsgN",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Same as <page>Global.print</page>, except it concatinates the arguments without inserting any whitespace in between them.\n\nSee also <page>Global.Msg</page>, which doesn't add a newline (`\"\\n\"`) at the end.",
    "arguments": [
      {
        "name": "args",
        "type": "vararg",
        "description": "List of values to print. They can be of any type and will be converted to strings with <page>Global.tostring</page>."
      }
    ]
  },
  {
    "name": "NumModelSkins",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the amount of skins the specified model has.\n\nSee also <page>Entity:SkinCount</page> if you have an entity.",
    "arguments": [
      {
        "name": "modelName",
        "type": "string",
        "description": "Model to return amount of skins of"
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "Amount of skins"
      }
    ]
  },
  {
    "name": "OpenProblemsPanel",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Opens the Problems Panel."
  },
  {
    "name": "OrderVectors",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.\n\n<note>This function will irreversibly modify the given vectors</note>",
    "arguments": [
      {
        "name": "vector1",
        "type": "Vector",
        "description": "Bounding box min resultant"
      },
      {
        "name": "vector2",
        "type": "Vector",
        "description": "Bounding box max resultant"
      }
    ]
  },
  {
    "name": "Particle",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Calls <page>game.AddParticles</page> and returns given string.",
    "arguments": [
      {
        "name": "file",
        "type": "string",
        "description": "The particle file."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The particle file."
      }
    ]
  },
  {
    "name": "ParticleEmitter",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a new <page>CLuaEmitter</page>.\n\n<note>Do not forget to delete the emitter with <page>CLuaEmitter:Finish</page> once you are done with it</note>",
    "arguments": [
      {
        "name": "position",
        "type": "Vector",
        "description": "The start position of the emitter.\n\nThis is only used to determine particle drawing order for translucent particles."
      },
      {
        "name": "use3D",
        "type": "boolean",
        "default": "false",
        "description": "Whenever to render the particles in 2D or 3D mode. Supplying \"true\" will enable 3D (non-billboarded), otherwise it will default to 2D."
      }
    ],
    "returnValues": [
      {
        "type": "CLuaEmitter",
        "description": "The new particle emitter."
      }
    ]
  },
  {
    "name": "PositionSpawnIcon",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Moves the given model to the given position and calculates appropriate camera parameters for rendering the model to an icon.\n\nThe output table interacts nicely with <page>Panel:RebuildSpawnIconEx</page> with a few key renames.",
    "arguments": [
      {
        "name": "model",
        "type": "Entity",
        "description": "Model that is being rendered to the spawn icon"
      },
      {
        "name": "position",
        "type": "Vector",
        "description": "Position that the model is being rendered at"
      },
      {
        "name": "noAngles",
        "type": "boolean",
        "description": "If true the function won't reset the angles to 0 for the model."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "Table of information of the view which can be used for rendering"
      }
    ]
  },
  {
    "name": "RealTime",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the uptime of the game/server in seconds (to at least **4** decimal places). This value updates itself once every time the realm thinks. For servers, this is the server tickrate. For clients, its their current FPS.\n\n<note>This is **not** synchronised or affected by the game.\n\nThis will be affected by precision loss if the uptime is more than 30+(?) days, and effectively cease to be functional after 50+(?) days.\n\nChanging the map will **not** fix it like it does with <page>Global.CurTime</page>. A server restart is necessary.</note>\n\nYou should use this function (or <page>Global.SysTime</page>) for timing real-world events such as user interaction, but not for timing game events such as animations.\n\nSee also: <page>Global.CurTime</page>, <page>Global.SysTime</page>",
    "returnValues": [
      {
        "type": "number",
        "description": "Uptime of the game/server."
      }
    ]
  },
  {
    "name": "RemoveTooltip",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Does the removing of the tooltip panel. Called by <page>Global.EndTooltip</page>."
  },
  {
    "name": "SafeRemoveEntity",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Removes the given entity unless it is a player or the world entity",
    "arguments": [
      {
        "name": "ent",
        "type": "Entity",
        "description": "Entity to safely remove."
      }
    ]
  },
  {
    "name": "SafeRemoveEntityDelayed",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Removes entity after delay using <page>Global.SafeRemoveEntity</page>",
    "arguments": [
      {
        "name": "entity",
        "type": "Entity",
        "description": "Entity to be removed"
      },
      {
        "name": "delay",
        "type": "number",
        "description": "Delay for entity removal in seconds"
      }
    ]
  },
  {
    "name": "ScreenScale",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns a number based on the `size` argument and the players' screen width. The width is scaled in relation to `640x480` resolution.  This function is primarily used for scaling font sizes.\n\nSee <page>Global.ScreenScaleH</page> for a function that scales from height.",
    "arguments": [
      {
        "name": "size",
        "type": "number",
        "description": "The number you want to scale."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The scaled number based on your screen's width"
      }
    ]
  },
  {
    "name": "SendUserMessage",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Send a usermessage\n<deprecated>\nThis uses the <page>umsg</page> internally, which has been deprecated. Use the <page>net</page> instead.\n</deprecated>\n\n<note>\nThis does nothing clientside.\n</note>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the usermessage"
      },
      {
        "name": "recipients",
        "type": "any",
        "description": "Can be a <page>CRecipientFilter</page>, <page>table</page> or <page>Player</page> object."
      },
      {
        "name": "args",
        "type": "vararg",
        "description": "Data to send in the usermessage"
      }
    ]
  },
  {
    "name": "SentenceDuration",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns approximate duration of a sentence by name. See <page>Global.EmitSentence</page>.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The sentence name."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The approximate duration."
      }
    ]
  },
  {
    "name": "ServerLog",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Prints `ServerLog: PARAM` without a newline, to the server log and console.\n\nAs of June 2022, if `sv_logecho` is set to `0` (defaults to `1`) the message will not print to console and will only be written to the server's log file.",
    "arguments": [
      {
        "name": "parameter",
        "type": "string",
        "description": "The value to be printed to console."
      }
    ]
  },
  {
    "name": "SetGlobal2Int",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Sets an integer that is shared between the server and all clients.\n<warning>The integer has a 32 bit limit. Use <page>Global.SetGlobalInt</page> instead</warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "value",
        "type": "number",
        "description": "The value to set the global value to"
      }
    ]
  },
  {
    "name": "SetGlobal2Vector",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a vector to be automatically networked to clients\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global vector with"
      },
      {
        "name": "vec",
        "type": "Vector",
        "description": "Vector to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalAngle",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines an angle to be automatically networked to clients\n\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Angle</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global angle with"
      },
      {
        "name": "angle",
        "type": "Angle",
        "description": "Angle to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalVar",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a variable to be automatically networked to clients\n\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<warning>Trying to network a type that is not listed above will result in an error!\nThere's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Var</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global vector with"
      },
      {
        "name": "value",
        "type": "any",
        "description": "Value to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalVector",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a vector to be automatically networked to clients\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Vector</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global vector with"
      },
      {
        "name": "vec",
        "type": "Vector",
        "description": "Vector to be networked"
      }
    ]
  },
  {
    "name": "setmetatable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Sets, changes or removes a table's metatable. Returns Tab (the first argument).",
    "arguments": [
      {
        "name": "Tab",
        "type": "table",
        "description": "The table who's metatable to change."
      },
      {
        "name": "Metatable",
        "type": "table",
        "description": "The metatable to assign. <br> If it's nil, the metatable will be removed."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The first argument."
      }
    ]
  },
  {
    "name": "SortedPairsByValue",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns an iterator function that can be used to loop through a table in order of its **values**.\n\nTo sort by specific **value member**, use <page>Global.SortedPairsByMemberValue</page>.\n\n\nTo sort by **keys**, use <page>Global.SortedPairs</page>.",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table to create iterator for"
      },
      {
        "name": "descending",
        "type": "boolean",
        "default": "false",
        "description": "Whether the iterator should iterate in descending order or not"
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "Iterator function"
      },
      {
        "type": "table",
        "description": "The table which will be iterated over"
      }
    ]
  },
  {
    "name": "SScale",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "<deprecated>You should be using <page>Global.ScreenScale</page> instead.</deprecated>\n\nReturns a number based on the Size argument and your screen's width. Alias of <page>Global.ScreenScale</page>.",
    "arguments": [
      {
        "name": "Size",
        "type": "number",
        "description": "The number you want to scale."
      }
    ]
  },
  {
    "name": "tonumber",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Attempts to convert the value to a number.\n\nReturns nil on failure.",
    "arguments": [
      {
        "name": "value",
        "type": "any",
        "description": "The value to convert. Can be a number or string."
      },
      {
        "name": "base",
        "type": "number",
        "default": "10",
        "description": "The base used in the string. Can be any integer between 2 and 36, inclusive."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The numeric representation of the value with the given base, or nil if the conversion failed."
      }
    ]
  },
  {
    "name": "tostring",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.\n\n<page>Global.print</page> also uses this functionality.",
    "arguments": [
      {
        "name": "value",
        "type": "any",
        "description": "The object to be converted to a string."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The string representation of the value."
      }
    ]
  },
  {
    "name": "TranslateDownloadableName",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<deprecated></deprecated>\n<internal></internal>\nReturns \"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.",
    "arguments": [
      {
        "name": "filename",
        "type": "string",
        "description": "File name to test"
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "\"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise."
      }
    ]
  },
  {
    "name": "type",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a string representing the name of the type of the passed object.\n<warning>This will return `table` if the input is <page>Global.Color</page>, consider using <page>Global.IsColor</page> in that case.</warning>",
    "arguments": [
      {
        "name": "var",
        "type": "any",
        "description": "The object to get the type of."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The name of the object's type."
      }
    ]
  },
  {
    "name": "unpack",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.",
    "arguments": [
      {
        "name": "tbl",
        "type": "table",
        "description": "The table to generate the vararg from."
      },
      {
        "name": "startIndex",
        "type": "number",
        "default": "1",
        "description": "Which index to start from. Optional."
      },
      {
        "name": "endIndex",
        "type": "number",
        "default": "#tbl",
        "description": "Which index to end at. Optional, even if you set StartIndex."
      }
    ],
    "returnValues": [
      {
        "type": "vararg",
        "description": "Output values"
      }
    ]
  },
  {
    "name": "UpdateMapList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal>Called from JS when starting a new game</internal>\nThis function updates the Map List"
  },
  {
    "name": "UpdateSubscribedAddons",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nUpdates the Addons list."
  },
  {
    "name": "VGUIFrameTime",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the time in seconds it took to render the VGUI."
  },
  {
    "name": "xpcall",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Attempts to call the first function. If the execution succeeds, this returns `true` followed by the returns of the function. If execution fails, this returns `false` and the second function is called with the error message.\n\nUnlike in <page>Global.pcall</page>, the stack is not unwound and can therefore be used for stack analyses with the <page>debug</page>.\n\n<bug issue=\"2036\">This cannot stop errors from hooks called from the engine.</bug>\n\n<bug issue=\"2498\">This does not stop <page>Global.Error</page> and <page>Global.ErrorNoHalt</page> (As well as <page>Global.include</page>) from sending error messages to the server (if called clientside) or calling the <page>GM:OnLuaError</page> hook. The success boolean returned will always return true and thus you will not get the error message returned. <page>Global.error</page> does not exhibit these behaviours.</bug>",
    "arguments": [
      {
        "name": "func",
        "type": "function",
        "description": "The function to call initially."
      },
      {
        "name": "errorCallback",
        "type": "function",
        "description": "The function to be called if execution of the first fails; the error message is passed as a string.\n\nYou cannot throw an <page>Global.error</page>() from this callback: it will have no effect (not even stopping the callback)."
      },
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Arguments to pass to the initial function."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Status of the execution; `true` for success, `false` for failure."
      },
      {
        "type": "vararg",
        "description": "The returns of the first function if execution succeeded, otherwise the **first** return value of the error callback."
      }
    ]
  }
]