[
  {
    "name": "AchievementIcon",
    "parent": "Panel",
    "description": "Used to show an icon for any of the [Garry's Mod Steam achievements](http://steamcommunity.com/stats/GarrysMod/achievements).\n\nIf the viewer has not unlocked the achievement on Steam, the icon will be grayed out."
  },
  {
    "name": "Button",
    "parent": "DButton",
    "description": "<deprecated>\nOnly exists for backwards compatibility with <page>Panel:SetActionFunction</page>. Use <page>DButton</page> instead.\n</deprecated>\n\nCreates a button that players can click on."
  },
  {
    "name": "ContentHeader",
    "parent": "DLabelEditable",
    "description": "<internal></internal>\n\nThe ContentHeader is used internally by the Spawnmenu and only use this if you know\nwhat you're doing because you can break a few things with it."
  },
  {
    "name": "ContentIcon",
    "functions": [
      {
        "name": "GetContentType",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "Returns the content type used to save and restore the content icon in a spawnlist.",
        "returnValues": [
          {
            "type": "string",
            "description": "The content type, for example \"entity\" or \"weapon\"."
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "Sets the color for the content icon. Currently is not used by the content icon panel.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "The color to set. See <page>Color</page>"
          }
        ]
      },
      {
        "name": "SetName",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "Sets the tool tip and the \"nice\" name to be displayed by the content icon.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "\"Nice\" name to display."
          }
        ]
      }
    ]
  },
  {
    "name": "ContentSidebar",
    "functions": [
      {
        "name": "CreateSaveNotification",
        "parent": "ContentSidebar",
        "realms": [
          "client"
        ],
        "description": "Creates a Save Notification which will be shown when <page>SANDBOX:SpawnlistContentChanged</page> has been called.",
        "arguments": [
          {
            "name": "style",
            "type": "string"
          },
          {
            "name": "hookname",
            "type": "string",
            "default": "PopulateContent",
            "description": "A Populate Hook like PopulateEntities"
          }
        ]
      }
    ]
  },
  {
    "name": "ControlPanel",
    "functions": [
      {
        "name": "MatSelect",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Creates a <page>MatSelect</page> panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "Calls <page>MatSelect</page>:<page text=\"SetConVar\">ContextBase:SetConVar</page> with this value."
          },
          {
            "name": "options",
            "type": "table",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:AddMaterial</page>(key, value) for each table entry. If the table key is a number, the function will instead be called with the value as both arguments."
          },
          {
            "name": "autostretch",
            "type": "boolean",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetAutoHeight</page> with this value."
          },
          {
            "name": "width",
            "type": "number",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetItemWidth</page> with this value."
          },
          {
            "name": "height",
            "type": "number",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetItemHeight</page> with this value."
          }
        ],
        "returnValues": [
          {
            "type": "MatSelect",
            "description": "The created MatSelect panel."
          }
        ]
      },
      {
        "name": "ToolPresets",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Creates a <page>ControlPresets</page> panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "arguments": [
          {
            "name": "group",
            "type": "string",
            "description": "The <page text=\"preset\">presets</page> group. Must be unique."
          },
          {
            "name": "cvarList",
            "type": "table",
            "description": "A table of <page>convar</page> names as keys and their defaults as the values. Typically the output of <page>Tool:BuildConVarList</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>ControlPresets</page> panel."
          }
        ]
      }
    ]
  },
  {
    "name": "CtrlListBox",
    "parent": "DComboBox",
    "description": "A <page>DComboBox</page> based dropdown menu with build in easy <page>ConVar</page> support.\n\nThis control only exists in Sandbox derived gamemodes."
  },
  {
    "name": "DAdjustableModelPanel",
    "parent": "DModelPanel",
    "description": "A derivative of the DModelPanel in which the user may modify the perspective of the model with their mouse and keyboard by clicking and dragging.\n\nThe keyboard keys <key>W</key> <key>S</key> <key>A</key> <key>D</key> <key>Up</key> <key>Down</key> <key>Left</key> <key>Right</key> <key>Space</key> and <key>Ctrl</key> can be used when the right mouse is held down, with <key>Shift</key> acting as a speed multiplier. When the left mouse is used, the Shift key holds the current `y` angle steady.\n\nThis is used by <page>IconEditor</page> for modifying spawn icons.",
    "functions": [
      {
        "name": "FirstPersonControls",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used."
      },
      {
        "name": "SetFirstPerson",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "Enables mouse and keyboard-based adjustment of the perspective.\n\nThis is set to `true` automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the <page>PANEL:OnMousePressed</page> event.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "Whether to enable/disable first person controls. See <page>DAdjustableModelPanel:FirstPersonControls</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DAlphaBar",
    "functions": [
      {
        "name": "OnChange",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when user changes the desired alpha value with the control.",
        "arguments": [
          {
            "name": "alpha",
            "type": "number",
            "description": "The new alpha value"
          }
        ]
      }
    ]
  },
  {
    "name": "DBinder",
    "parent": "DButton",
    "description": "Input which can bind a command to a key. Used for binding inputs and outputs of TOOLs."
  },
  {
    "name": "DBubbleContainer",
    "functions": [
      {
        "name": "OpenForPos",
        "parent": "DBubbleContainer",
        "realms": [
          "client"
        ],
        "description": "Sets the speech bubble position and size along with the dialog point position.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels."
          },
          {
            "name": "w",
            "type": "number",
            "description": "The width of the bubble container."
          },
          {
            "name": "h",
            "type": "number",
            "description": "The height of the bubble container."
          }
        ]
      }
    ]
  },
  {
    "name": "DButton",
    "functions": [
      {
        "name": "SetIcon",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets an image to be displayed as the button's background. Alias of <page>DButton:SetImage</page>",
        "arguments": [
          {
            "name": "img",
            "type": "string",
            "default": "nil",
            "description": "The image file to use, relative to `/materials`. If this is nil, the image background is removed."
          }
        ]
      }
    ]
  },
  {
    "name": "DCategoryList",
    "functions": [
      {
        "name": "Add",
        "parent": "DCategoryList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DCollapsibleCategory</page> to the list.",
        "arguments": [
          {
            "name": "categoryName",
            "type": "string",
            "description": "The name of the category to add."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DCollapsibleCategory</page>"
          }
        ]
      }
    ]
  },
  {
    "name": "DCheckBox",
    "functions": [
      {
        "name": "SetValue",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the checked state of the checkbox, and calls the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "Whether the box should be checked or not."
          }
        ]
      },
      {
        "name": "Toggle",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the checked state of the checkbox, and calls the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods. This is called by <page>DCheckBox:DoClick</page>."
      }
    ]
  },
  {
    "name": "DCheckBoxLabel",
    "functions": [
      {
        "name": "GetChecked",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the checked state of the checkbox. This calls the checkbox's <page>DCheckBox:GetChecked</page> function.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the box is checked or not."
          }
        ]
      },
      {
        "name": "GetIndent",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the indentation of the element on the X axis.",
        "returnValues": [
          {
            "type": "number",
            "description": "How much the content is moved to the right in pixels"
          }
        ]
      },
      {
        "name": "SetConVar",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the console variable to be set when the checked state of the <page>DCheckBoxLabel</page> changes.",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The name of the convar to set"
          }
        ]
      },
      {
        "name": "SetTextColor",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text color for the <page>DCheckBoxLabel</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The text color. Uses the <page>Color</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DCollapsibleCategory",
    "functions": [
      {
        "name": "GetStartHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nReturns whatever was set by <page>DCollapsibleCategory:SetStartHeight</page>",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "SetDrawBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>You should use <page>DCollapsibleCategory:SetPaintBackground</page> instead.</deprecated>Sets whether or not to draw the panel background. Alias of <page>DCollapsibleCategory:SetPaintBackground</page>.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "True to show the panel's background, false to hide it."
          }
        ]
      },
      {
        "name": "SetPaintBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the background should be painted.",
        "arguments": [
          {
            "name": "paint",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "Toggle",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the expanded state of the <page>DCollapsibleCategory</page>.\n\nSee <page>DCollapsibleCategory:GetExpanded</page> for a function to retrieve the expanded state."
      }
    ]
  },
  {
    "name": "DColorCube",
    "functions": [
      {
        "name": "GetBaseRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the base Color set by <page>DColorCube:SetBaseRGB</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "A <page>Color</page>"
          }
        ]
      },
      {
        "name": "GetHue",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns the value set by <page>DColorCube:SetHue</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the color cube's current set color.",
        "returnValues": [
          {
            "type": "table",
            "description": "The set color, uses <page>Color</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DColorMixer",
    "functions": [
      {
        "name": "ConVarThink",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>"
      },
      {
        "name": "GetAlphaBar",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Return true if alpha bar is shown, false if not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if shown, false if not."
          }
        ]
      },
      {
        "name": "GetConVarA",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarG</page> - For the green channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the alpha channel of the color"
          }
        ]
      },
      {
        "name": "GetConVarG",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel\n* <page>DColorMixer:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the green channel of the color"
          }
        ]
      },
      {
        "name": "SetConVarA",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the alpha channel of the color"
          }
        ]
      },
      {
        "name": "SetConVarG",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the green channel of the color"
          }
        ]
      },
      {
        "name": "SetConVarR",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the red channel of the color"
          }
        ]
      },
      {
        "name": "SetPalette",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Show or hide the palette panel",
        "arguments": [
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Show or hide the palette panel?"
          }
        ]
      },
      {
        "name": "UpdateColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUse <page>DColorMixer:SetColor</page> instead!",
        "arguments": [
          {
            "name": "clr",
            "type": "table"
          }
        ]
      },
      {
        "name": "ValueChanged",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player changes the color of the <page>DColorMixer</page>.\n\n<bug>The returned color will not have the color metatable.</bug>",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The new color. See <page>Color</page>"
          }
        ]
      }
    ]
  },
  {
    "name": "DColorPalette",
    "functions": [
      {
        "name": "GetButtonSize",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the size of each palette button. Set by <page>DColorPalette:SetButtonSize</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The size of each palette button"
          }
        ]
      },
      {
        "name": "GetConVarG",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarR</page> - For the red channel\n* <page>DColorPalette:GetConVarB</page> - For the blue channel\n* <page>DColorPalette:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the green channel of the color"
          }
        ]
      },
      {
        "name": "SetConVarR",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarG</page> - For the green channel\n* <page>DColorPalette:SetConVarB</page> - For the blue channel\n* <page>DColorPalette:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the red channel of the color"
          }
        ]
      },
      {
        "name": "SetNumRows",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Roughly sets the number of colors that can be picked by the user. If the DColorPalette is exactly 6 rows tall, this function will set the number of colors shown per row in the palette.\n<note><page>DColorPalette:Reset</page> or <page>DColorPalette:ResetSavedColors</page> must be called after this function to apply changes.</note>",
        "arguments": [
          {
            "name": "rows",
            "type": "number",
            "description": "Scale for the range of colors that the user can pick. Default is 8."
          }
        ]
      }
    ]
  },
  {
    "name": "DColumnSheet",
    "functions": [
      {
        "name": "GetActiveButton",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the active button of this <page>DColumnSheet</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The active button"
          }
        ]
      }
    ]
  },
  {
    "name": "DComboBox",
    "functions": [
      {
        "name": "AddChoice",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a choice to the combo box.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The text show to the user."
          },
          {
            "name": "data",
            "type": "any",
            "default": "nil",
            "description": "The data accompanying this string. If left empty, the value argument is used instead.\n\nCan be accessed with the second argument of <page>DComboBox:GetSelected</page>, <page>DComboBox:GetOptionData</page> and as an argument of <page>DComboBox:OnSelect</page>."
          },
          {
            "name": "select",
            "type": "boolean",
            "default": "false",
            "description": "Should this be the default selected text show to the user or not."
          },
          {
            "name": "icon",
            "type": "string",
            "default": "nil",
            "description": "Adds an icon for this choice."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The index of the new option."
          }
        ]
      },
      {
        "name": "CheckConVarChanges",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Ran every frame to update the value of this panel to the value of the associated convar. See <page>Panel:SetConvar</page>."
      },
      {
        "name": "ChooseOptionID",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Selects an option within a combo box based on its table index.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "Selects the option with given index."
          }
        ]
      },
      {
        "name": "GetSelected",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the currently selected option's text and data",
        "returnValues": [
          {
            "type": "string",
            "description": "The option's text value."
          },
          {
            "type": "any",
            "description": "The option's stored data."
          }
        ]
      }
    ]
  },
  {
    "name": "DDragBase",
    "functions": [
      {
        "name": "DropAction_Simple",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:DropAction_Normal</page>",
        "arguments": [
          {
            "name": "drops",
            "type": "table"
          },
          {
            "name": "bDoDrop",
            "type": "boolean"
          },
          {
            "name": "command",
            "type": "string"
          },
          {
            "name": "y",
            "type": "number"
          },
          {
            "name": "x",
            "type": "number"
          }
        ]
      },
      {
        "name": "GetUseLiveDrag",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Whether this panel uses live drag'n'drop previews.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetReadOnly",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether this panel is read only or not for drag'n'drop purposes. If set to `true`, you can only copy from this panel, and cannot modify its contents.",
        "arguments": [
          {
            "name": "name",
            "type": "boolean",
            "description": "Whether this panel should be read only or not."
          }
        ]
      }
    ]
  },
  {
    "name": "DDrawer",
    "functions": [
      {
        "name": "Open",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Opens the <page>DDrawer</page>."
      },
      {
        "name": "SetOpenTime",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Set the time (in seconds) for DDrawer to open.",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "Length in seconds. Default is 0.3"
          }
        ]
      }
    ]
  },
  {
    "name": "DEntityProperties",
    "functions": [
      {
        "name": "OnEntityLost",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "description": "Called when we were editing an entity and then it became invalid (probably removed)"
      }
    ]
  },
  {
    "name": "DExpandButton",
    "functions": [
      {
        "name": "SetExpanded",
        "parent": "DExpandButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether this DExpandButton should be expanded or not. Only changes appearance.",
        "arguments": [
          {
            "name": "expanded",
            "type": "boolean",
            "description": "True to expand ( visually will show a \"-\" )"
          }
        ]
      }
    ]
  },
  {
    "name": "DFileBrowser",
    "functions": [
      {
        "name": "GetBaseFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Returns the root directory/folder of the file tree.",
        "returnValues": [
          {
            "type": "string",
            "description": "The path to the root folder."
          }
        ]
      },
      {
        "name": "GetName",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Returns the name being used for the file tree.",
        "returnValues": [
          {
            "type": "string",
            "description": "The name used for the root of the file tree."
          }
        ]
      },
      {
        "name": "GetOpen",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Returns whether or not the file tree is open.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the file tree is open."
          }
        ]
      },
      {
        "name": "GetSearch",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Returns the current search filter on the file tree.",
        "returnValues": [
          {
            "type": "string",
            "description": "The filter in use on the file tree."
          }
        ]
      },
      {
        "name": "SetCurrentFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Sets the directory/folder from which to display the file list.",
        "arguments": [
          {
            "name": "currentDir",
            "type": "string",
            "description": "The directory to display files from."
          }
        ]
      },
      {
        "name": "SetName",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Sets the name to use for the file tree.",
        "arguments": [
          {
            "name": "treeName",
            "type": "string",
            "default": "`baseFolder`",
            "description": "The name for the root of the file tree. Passing no value causes this to be the base folder name. See <page>DFileBrowser:SetBaseFolder</page>."
          }
        ]
      },
      {
        "name": "SetPath",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Sets the access path for the file tree. This is set to `GAME` by default.\n\nSee <page>file.Read</page> for how paths work.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "The access path i.e. \"GAME\", \"LUA\", \"DATA\" etc."
          }
        ]
      },
      {
        "name": "SetSearch",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Sets the search filter for the file tree.\n\nThis accepts the same wildcards as <page>file.Find</page>.",
        "arguments": [
          {
            "name": "filter",
            "type": "string",
            "default": "*",
            "description": "The filter to use on the file tree."
          }
        ]
      }
    ]
  },
  {
    "name": "DForm",
    "functions": [
      {
        "name": "Button",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DButton</page> onto the <page>DForm</page>",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The text on the button"
          },
          {
            "name": "concommand",
            "type": "string",
            "description": "The concommand to run when the button is clicked"
          },
          {
            "name": "args",
            "type": "vararg",
            "description": "The arguments to pass on to the concommand when the button is clicked"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DButton</page>"
          }
        ]
      },
      {
        "name": "ComboBox",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DComboBox</page> onto the <page>DForm</page>",
        "arguments": [
          {
            "name": "title",
            "type": "string",
            "description": "Text to the left of the combo box"
          },
          {
            "name": "convar",
            "type": "string",
            "description": "Console variable to change when the user selects something from the dropdown."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DComboBox</page>"
          },
          {
            "type": "Panel",
            "description": "The created <page>DLabel</page>"
          }
        ]
      },
      {
        "name": "GetSpacing",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "SetAutoSize",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "arguments": [
          {
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "name": "DFrame",
    "functions": [
      {
        "name": "GetBackgroundBlur",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether the background behind the frame is being blurred.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not background blur is enabled."
          }
        ]
      },
      {
        "name": "GetIsMenu",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether or not the frame is part of a derma menu. This is set with <page>DFrame:SetIsMenu</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not this frame is a menu component."
          }
        ]
      },
      {
        "name": "SetSizable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the <page>DFrame</page> can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.\n\nYou can set the minimum size using <page>DFrame:SetMinWidth</page> and <page>DFrame:SetMinHeight</page>.",
        "arguments": [
          {
            "name": "sizeable",
            "type": "boolean",
            "description": "Whether the frame should be resizeable or not."
          }
        ]
      }
    ]
  },
  {
    "name": "DGrid",
    "functions": [
      {
        "name": "RemoveItem",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes given panel from the <page>DGrid:GetItems</page>.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "Item to remove from the grid"
          },
          {
            "name": "bDontDelete",
            "type": "boolean",
            "default": "false",
            "description": "If set to true, the actual panel will not be removed via <page>Panel:Remove</page>."
          }
        ]
      },
      {
        "name": "SetCols",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the number of columns this panel should have.\n\nThe <page>DGrid</page> will resize its width to match this value.",
        "arguments": [
          {
            "name": "cols",
            "type": "number",
            "description": "The desired number of columns"
          }
        ]
      },
      {
        "name": "SortByMember",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sorts the items in the grid. Does not visually update the grid, use <page>Panel:InvalidateLayout</page> for that.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "A key in the panel from <page>DGrid:GetItems</page>. The key's value must be numeric."
          },
          {
            "name": "desc",
            "type": "boolean",
            "default": "true",
            "description": "True for descending order, false for ascending."
          }
        ]
      }
    ]
  },
  {
    "name": "DHorizontalDivider",
    "functions": [
      {
        "name": "GetDragging",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns whether or not the player is currently dragging the middle divider bar.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the player is currently dragging the middle divider bar."
          }
        ]
      },
      {
        "name": "GetHoldPos",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nReturns the local X coordinate of where the player started dragging the thing",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetLeft",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the left side content of the <page>DHorizontalDivider</page>",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The content on the left side"
          }
        ]
      },
      {
        "name": "SetDragging",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nSets whether the player is dragging the divider or not",
        "arguments": [
          {
            "name": "dragonot",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetLeftWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the current/starting width of the left side.\n\nThe width of the right side is automatically calculated by subtracting this from the total width of the <page>DHorizontalDivider</page>.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The current/starting width of the left side"
          }
        ]
      }
    ]
  },
  {
    "name": "DHorizontalScroller",
    "parent": "Panel",
    "description": "A very basic horizontal scrollable panel, similar to <page>DScrollPanel</page>.\n\nUsed internally in <page>DPropertySheet</page>.",
    "functions": [
      {
        "name": "ScrollToChild",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Scrolls the <page>DHorizontalScroller</page> to given child panel.",
        "arguments": [
          {
            "name": "target",
            "type": "Panel",
            "description": "The target child panel. Must be a child of <page>DHorizontalScroller:GetCanvas</page>"
          }
        ]
      },
      {
        "name": "SetUseLiveDrag",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Same as <page>DDragBase:SetUseLiveDrag</page>",
        "arguments": [
          {
            "name": "newState",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "name": "DHScrollBar",
    "functions": [
      {
        "name": "SetHideButtons",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Allows hiding the left and right buttons for better visual stylisation.",
        "arguments": [
          {
            "name": "hide",
            "type": "boolean",
            "description": "True to hide"
          }
        ]
      }
    ]
  },
  {
    "name": "DHTML",
    "functions": [
      {
        "name": "OnBeginLoadingDocument",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called when this panel begins loading a page.",
        "arguments": [
          {
            "name": "url",
            "type": "string",
            "description": "The URL of the current page."
          }
        ]
      },
      {
        "name": "OnChildViewCreated",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).",
        "arguments": [
          {
            "name": "sourceURL",
            "type": "string",
            "description": "The URL of the page requesting to create a child."
          },
          {
            "name": "targetURL",
            "type": "string",
            "description": "The URL of the requested child."
          },
          {
            "name": "isPopup",
            "type": "boolean",
            "description": "True if the requested view is a popup."
          }
        ]
      },
      {
        "name": "QueueJavascript",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Runs/Executes a string as JavaScript code in a panel.\n\n<note>This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use <page>DHTML:AddFunction</page> function to accomplish that job.</note>\n<note>If <page>Panel:IsVisible</page> is `false`, <page>PANEL:Think</page> will **NOT** run, meaning the Javascript Queue will not be processed.<br><br>Consider overriding <page>PANEL:Paint</page> to stop the panel from drawing instead.</note>",
        "arguments": [
          {
            "name": "js",
            "type": "string",
            "description": "Specify JavaScript code to be executed."
          }
        ]
      }
    ]
  },
  {
    "name": "PANEL"
  },
  {
    "name": "DHTMLControls",
    "functions": [
      {
        "name": "SetButtonColor",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the navigation buttons.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "A <page>Color</page>"
          }
        ]
      }
    ]
  },
  {
    "name": "DIconBrowser",
    "functions": [
      {
        "name": "Fill",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nAutomatically called to fill the browser with icons. Will not work if <page>DIconBrowser:SetManual</page> is set to true."
      },
      {
        "name": "FilterByText",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "A simple unused search feature, hides all icons that do not contain given text in their file path.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The text to search for"
          }
        ]
      },
      {
        "name": "SetSelectedIcon",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSet the currently selected file path. Do not use. Use <page>DIconBrowser:SelectIcon</page> instead.",
        "arguments": [
          {
            "name": "str",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "DIconLayout",
    "functions": [
      {
        "name": "LayoutIcons_TOP",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to layout the child elements if the <page>DIconLayout:SetLayoutDir</page> is set to TOP (See <page>Enums/DOCK</page>)."
      }
    ]
  },
  {
    "name": "DImage",
    "functions": [
      {
        "name": "GetFailsafeMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the texture path set by <page>DImage:SetFailsafeMatName</page>.",
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "GetKeepAspect",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DImage</page> should keep the aspect ratio of its image when being resized.\n\nSee <page>DImage:SetKeepAspect</page> for more info on how it works.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the <page>DImage</page> should keep the aspect ratio of its image when being resized."
          }
        ]
      },
      {
        "name": "SetImageColor",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the image's color override.",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The color override of the image. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "SetMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets a <page>Global.Material</page> directly as an image.",
        "arguments": [
          {
            "name": "mat",
            "type": "IMaterial",
            "description": "The material to set"
          }
        ]
      },
      {
        "name": "Unloaded",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if the image is **not** yet loaded.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "name": "DImageButton",
    "functions": [
      {
        "name": "SetImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the \"image\" of the <page>DImageButton</page>. Equivalent of <page>DImage:SetImage</page>.",
        "arguments": [
          {
            "name": "strImage",
            "type": "string",
            "description": "The path of the image to load. When no file extension is supplied the VMT file extension is used."
          },
          {
            "name": "strBackup",
            "type": "string",
            "description": "The path of the backup image."
          }
        ]
      },
      {
        "name": "SetKeepAspect",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DImageButton</page> should keep the aspect ratio of its image. Equivalent of <page>DImage:SetKeepAspect</page>.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.",
        "arguments": [
          {
            "name": "keep",
            "type": "boolean",
            "description": "true to keep the aspect ratio, false not to"
          }
        ]
      }
    ]
  },
  {
    "name": "DKillIcon",
    "parent": "Panel",
    "description": "Uses the <page>killicon</page> to persistently draw a killicon."
  },
  {
    "name": "DLabel",
    "functions": [
      {
        "name": "DoClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the label is left clicked (on key release) by the player.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page>.\n\nThis can be overridden; by default, it calls <page>DLabel:Toggle</page>.\n\nSee also <page>DLabel:DoRightClick</page>, <page>DLabel:DoMiddleClick</page> and <page>DLabel:DoDoubleClick</page>."
      },
      {
        "name": "DoDoubleClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the label is double clicked by the player with left clicks.\n\n<page>DLabel:SetDoubleClickingEnabled</page> must be set to true for this hook to work, which it is by default.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page> and <page>DLabel:DoClick</page>.\n\nSee also <page>DLabel:DoRightClick</page> and <page>DLabel:DoMiddleClick</page>."
      },
      {
        "name": "GetIsMenu",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DComboBox</page>.\n\nReturns whether the frame is part of a derma menu or not.\n\nIf this is `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "isMenu",
            "description": "Whether this panel is a Menu Component"
          }
        ]
      },
      {
        "name": "SetAutoStretchVertical",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Automatically adjusts the height of the label dependent of the height of the text inside of it.",
        "arguments": [
          {
            "name": "stretch",
            "type": "boolean",
            "description": "Whenever to stretch the label vertically or not."
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Changes color of label. Alias of <page>DLabel:SetTextColor</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color to set. Uses the Color structure."
          }
        ]
      },
      {
        "name": "UpdateFGColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled internally to update the color of the text."
      }
    ]
  },
  {
    "name": "DLabelURL",
    "parent": "URLLabel",
    "description": "Underlined link label without a DoClick function. When a valid URL is set and the label is clicked, it will open a browser window and navigate to the address.\n\nThis panel uses <page>gui.OpenURL</page> internally and its restrictions apply.",
    "functions": [
      {
        "name": "SetTextStyleColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the base text color of the <page>DLabelURL</page>. This is overridden by <page>DLabelURL:SetTextColor</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The <page>Global.Color</page> to set"
          }
        ]
      },
      {
        "name": "UpdateFGColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Used internally to set correct text color via <page>Panel:SetFGColor</page> and <page>DLabelURL:GetColor</page>."
      }
    ]
  },
  {
    "name": "DListBox",
    "functions": [
      {
        "name": "SelectItem",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to select a specific panel.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "<page>DListBox</page> to select."
          },
          {
            "name": "onlyme",
            "type": "boolean",
            "description": "Whether to deselect other selected items."
          }
        ]
      }
    ]
  },
  {
    "name": "DListBoxItem",
    "parent": "DLabel",
    "description": "<internal>\nUsed by <page>DListBox</page>.\n</internal>"
  },
  {
    "name": "DListLayout",
    "parent": "DDragBase",
    "description": "A vertical list of panels that optionally allows child elements to be rearranged with the mouse cursor.\n\nChild panels' widths are set to the width of the DListLayout, and it resizes vertically to accommodate the heights of all children. You can place this inside a <page>DScrollPanel</page> when adding many panels.\n\nTo enable the drag & drop rearrangement functionality, call <page>DDragBase:MakeDroppable</page> on the DListLayout with a unique identifier. All panels added following this will be moveable."
  },
  {
    "name": "DListView_Column",
    "functions": [
      {
        "name": "DoClick",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the column is left clicked (on key release) by the client.\n\nSee also <page>DListView_Column:DoRightClick</page>."
      },
      {
        "name": "DoRightClick",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the column is right clicked (on key release) by the client.\n\nSee also <page>DListView_Column:DoClick</page>."
      },
      {
        "name": "SetWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the width of the panel.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The number value which will determine panel width."
          }
        ]
      }
    ]
  },
  {
    "name": "DListView_ColumnPlain",
    "parent": "DListView_Column",
    "description": "<internal>\nUsed by <page>DListView</page>.\n</internal>"
  },
  {
    "name": "DListView Line"
  },
  {
    "name": "DListView_Line",
    "functions": [
      {
        "name": "OnRightClick",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player right clicks this line."
      },
      {
        "name": "SetSortValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Allows you to store data per column.\n\nUsed in the <page>DListView:SortByColumn</page> function in case you want to sort with something else than the text.",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The number of the column to write the text from, starts with 1."
          },
          {
            "name": "data",
            "type": "any",
            "description": "Data for given column on the line you wish to set."
          }
        ]
      }
    ]
  },
  {
    "name": "DListView",
    "functions": [
      {
        "name": "DisableScrollbar",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes the scrollbar."
      },
      {
        "name": "GetCanvas",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the canvas.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The canvas."
          }
        ]
      },
      {
        "name": "GetDirty",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSee <page>DListView:SetDirty</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetInnerTall",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the height of <page>DListView:GetCanvas</page>.\n\nIntended to represent the height of all data lines.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of <page>DListView:GetCanvas</page>."
          }
        ]
      },
      {
        "name": "GetMultiSelect",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether multiple lines can be selected or not.\n\nSee <page>DListView:SetMultiSelect</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether multiple lines can be selected or not."
          }
        ]
      },
      {
        "name": "GetSelected",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets all of the lines that are currently selected.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of <page>DListView_Line</page>s."
          }
        ]
      },
      {
        "name": "OnClickLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal>Use <page>DListView:OnRowSelected</page> instead!</internal>\n\nCalled whenever a line is clicked.",
        "arguments": [
          {
            "name": "line",
            "type": "Panel",
            "description": "The selected line."
          },
          {
            "name": "isSelected",
            "type": "boolean",
            "description": "Boolean indicating whether the line is selected."
          }
        ]
      },
      {
        "name": "SelectItem",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Selects a line in the listview.",
        "arguments": [
          {
            "name": "Line",
            "type": "Panel",
            "description": "The line to select."
          }
        ]
      },
      {
        "name": "SetHideHeaders",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the header line should be visible on not.",
        "arguments": [
          {
            "name": "hide",
            "type": "boolean",
            "description": "Whether the header line should be visible on not."
          }
        ]
      },
      {
        "name": "SortByColumn",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sorts the items in the specified column.",
        "arguments": [
          {
            "name": "columnIndex",
            "type": "number",
            "description": "The index of the column that should be sorted."
          },
          {
            "name": "descending",
            "type": "boolean",
            "default": "false",
            "description": "Whether the items should be sorted in descending order or not."
          }
        ]
      }
    ]
  },
  {
    "name": "DListViewHeaderLabel",
    "parent": "DLabel",
    "description": "<internal>Used by <page>DListView_ColumnPlain</page>.</internal>"
  },
  {
    "name": "DMenu",
    "functions": [
      {
        "name": "ClearHighlights",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nClears all highlights made by <page>DMenu:HighlightItem</page>.\n\nDoesn't appear to be used or do anything."
      },
      {
        "name": "GetChild",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets a child by its index.",
        "arguments": [
          {
            "name": "childIndex",
            "type": "number",
            "description": "The index of the child to get.\n\n<note>Unlike <page>Panel:GetChild</page>, this index starts at 1.</note>"
          }
        ]
      },
      {
        "name": "GetDrawBorder",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns the value set by <page>DMenu:SetDrawBorder</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetMaxHeight",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum height of the <page>DMenu</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum height in pixels"
          }
        ]
      },
      {
        "name": "Hide",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively."
      },
      {
        "name": "HighlightItem",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nHighlights selected item in the <page>DMenu</page> by setting the item's key \"Highlight\" to true.\n\nDoesn't appear to be working or used.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "The item to highlight."
          }
        ]
      },
      {
        "name": "Open",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Opens the DMenu at the current mouse position",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "default": "gui.MouseX()",
            "description": "Position (X coordinate) to open the menu at."
          },
          {
            "name": "y",
            "type": "number",
            "default": "gui.MouseY()",
            "description": "Position (Y coordinate) to open the menu at."
          },
          {
            "name": "skipanimation",
            "type": "any",
            "default": "nil",
            "description": "This argument does nothing."
          },
          {
            "name": "ownerpanel",
            "type": "Panel",
            "default": "nil",
            "description": "If `x` and `y` are not set manually, setting this argument will offset the `y` position of the opened menu by the height of given panel."
          }
        ]
      },
      {
        "name": "OptionSelected",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when a option has been selected",
        "arguments": [
          {
            "name": "option",
            "type": "Panel",
            "description": "The <page>DMenuOption</page> that was selected"
          },
          {
            "name": "optionText",
            "type": "string",
            "description": "The options text"
          }
        ]
      }
    ]
  },
  {
    "name": "DMenuBar",
    "parent": "DPanel",
    "description": "A simple Derma MenuBar",
    "functions": [
      {
        "name": "AddOrGetMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Retrieves a <page>DMenu</page> object from the menu bar. If one with the given label doesn't exist, a new one is created.\n\nTo add a DMenu without checking, use <page>DMenuBar:AddMenu</page>.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The name (label) of the derma menu to get or create."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DMenu</page> with the given label."
          }
        ]
      },
      {
        "name": "GetBackgroundColor",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the DMenuBar's background color",
        "returnValues": [
          {
            "type": "table",
            "description": "The background's color. See <page>Color</page>"
          }
        ]
      },
      {
        "name": "GetDrawBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>DMenuBar:GetPaintBackground</page> instead.</deprecated>\n\nReturns whether or not the background should be painted. Is the same as <page>DMenuBar:GetPaintBackground</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the background be painted"
          }
        ]
      },
      {
        "name": "SetDrawBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>DMenuBar:SetPaintBackground</page></deprecated>\n\nSets whether or not the background should be painted. Is the same as <page>DMenuBar:SetPaintBackground</page>",
        "arguments": [
          {
            "name": "shouldPaint",
            "type": "boolean",
            "description": "Should the background be painted"
          }
        ]
      }
    ]
  },
  {
    "name": "DMenuOption",
    "functions": [
      {
        "name": "GetIsCheckable",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DMenuOption</page> is a checkbox option or a normal button option.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetSubMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally by <page>DMenuOption:AddSubMenu</page> to create the submenu arrow and assign the created submenu to be opened when this option is hovered.",
        "arguments": [
          {
            "name": "menu",
            "type": "Panel",
            "description": "The sub <page>DMenu</page> this option belongs to."
          }
        ]
      }
    ]
  },
  {
    "name": "DMenuOptionCVar",
    "functions": [
      {
        "name": "SetConVar",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Sets the <page text=\"console variable\">ConVars</page> to be used by <page>DMenuOptionCVar</page>.",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": "The <page text=\"console variable\">ConVars</page> name to set"
          }
        ]
      },
      {
        "name": "SetValueOn",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Sets the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is checked.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The value"
          }
        ]
      }
    ]
  },
  {
    "name": "DModelPanel",
    "functions": [
      {
        "name": "GetAmbientLight",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the ambient lighting used on the rendered entity.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color of the ambient lighting."
          }
        ]
      },
      {
        "name": "GetColor",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the color of the rendered entity.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color of the entity, see <page>Color</page>."
          }
        ]
      },
      {
        "name": "PreDrawModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Called **before** the entity of the <page>DModelPanel</page> is drawn.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The clientside entity of the <page>DModelPanel</page> that has been drawn."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to stop the entity from being drawn. This will also cause <page>DModelPanel:PostDrawModel</page> to stop being called."
          }
        ]
      },
      {
        "name": "StartScene",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Runs a <page>Global.ClientsideScene</page> on the panel's entity.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "The path to the scene file. (.vcd)"
          }
        ]
      }
    ]
  },
  {
    "name": "DModelSelect",
    "parent": "DPanelSelect",
    "description": "<deprecated>\nThis is derived from the deprecated <page>DPanelList</page>.\n</deprecated>\n\nA vertical list of models.",
    "functions": [
      {
        "name": "SetModelList",
        "parent": "DModelSelect",
        "realms": [
          "client"
        ],
        "description": "Called to set the list of models within the panel element.",
        "arguments": [
          {
            "name": "models",
            "type": "table",
            "description": "Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar."
          },
          {
            "name": "convar",
            "type": "string",
            "description": "<page>ConVar</page> to set when a model from this list is selected."
          },
          {
            "name": "dontSort",
            "type": "boolean",
            "description": "Do not sort the list. (by the `Model` member)"
          },
          {
            "name": "dontCallListConVars",
            "type": "boolean",
            "description": "If set, only the `convar` from the 2nd argument will be set, not individual convars from the models list."
          }
        ]
      }
    ]
  },
  {
    "name": "DModelSelectMulti"
  },
  {
    "name": "DNotify",
    "parent": "Panel",
    "description": "A panel that fades its contents in and out once, like a notification.",
    "functions": [
      {
        "name": "AddItem",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Adds a panel to the notification",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to add"
          },
          {
            "name": "lifeLength",
            "type": "number",
            "default": "nil",
            "description": "If set, overrides <page>DNotify:SetLife</page> for when the given panel should be removed."
          }
        ]
      },
      {
        "name": "GetAlignment",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Returns the current alignment of this notification panel. Set by <page>DNotify:SetAlignment</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The numpad alignment"
          }
        ]
      }
    ]
  },
  {
    "name": "DNumberScratch",
    "functions": [
      {
        "name": "DrawNotches",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed by <page>DNumberScratch:DrawScreen</page>.",
        "arguments": [
          {
            "name": "level",
            "type": "number"
          },
          {
            "name": "x",
            "type": "number"
          },
          {
            "name": "y",
            "type": "number"
          },
          {
            "name": "w",
            "type": "number"
          },
          {
            "name": "h",
            "type": "number"
          },
          {
            "name": "range",
            "type": "number"
          },
          {
            "name": "value",
            "type": "number"
          },
          {
            "name": "min",
            "type": "number"
          },
          {
            "name": "max",
            "type": "number"
          }
        ]
      },
      {
        "name": "GetDecimals",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the desired amount of numbers after the decimal point.",
        "returnValues": [
          {
            "type": "number",
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc."
          }
        ]
      },
      {
        "name": "GetFloatValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the real value of the <page>DNumberScratch</page> as a number.\n\nSee also <page>DNumberScratch:GetTextValue</page> and <page>DNumberScratch:GetFraction</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The real value of the <page>DNumberScratch</page>"
          }
        ]
      },
      {
        "name": "GetMin",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the minimum value that can be selected on the number scratch",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum value that can be selected on the number scratch"
          }
        ]
      },
      {
        "name": "IsEditing",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the player is currently editing the value of the <page>DNumberScratch</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetDecimals",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the desired amount of numbers after the decimal point.",
        "arguments": [
          {
            "name": "decimals",
            "type": "number",
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc."
          }
        ]
      },
      {
        "name": "SetFloatValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nDoes not trigger <page>DNumberScratch:OnValueChanged</page>\n\nUse <page>DNumberScratch:SetValue</page> instead.",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetZoom",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the zoom level of the scratch panel.",
        "arguments": [
          {
            "name": "zoom",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "name": "DNumberWang",
    "functions": [
      {
        "name": "GetDecimals",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the amount of decimal places allowed in the number selector, set by <page>DNumberWang:SetDecimals</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of decimal places allowed in the number selector."
          }
        ]
      }
    ]
  },
  {
    "name": "DNumSlider",
    "parent": "Panel",
    "description": "The DNumSlider allows you to create a slider, allowing the user to slide it to set a value, or changing the value in the box.",
    "functions": [
      {
        "name": "GetDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the default value of the slider, if one was set by <page>DNumSlider:SetDefaultValue</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The default value of the slider"
          }
        ]
      },
      {
        "name": "IsEditing",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if either the <page>DTextEntry</page>, the <page>DSlider</page> or the <page>DNumberScratch</page> are being edited.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the <page>DNumSlider</page> is being edited by the player."
          }
        ]
      },
      {
        "name": "SetDark",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>Calls <page>DLabel:SetDark</page> on the <page>DLabel</page> part of the <page>DNumSlider</page>.",
        "arguments": [
          {
            "name": "dark",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the default value of the slider, to be used by <page>DNumSlider:ResetToDefaultValue</page> or by middle mouse clicking the draggable knob of the slider.",
        "arguments": [
          {
            "name": "default",
            "type": "number",
            "description": "The new default value of the slider to set"
          }
        ]
      },
      {
        "name": "UpdateNotches",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Updates visual notches on the slider."
      }
    ]
  },
  {
    "name": "DPanel",
    "parent": "Panel",
    "description": "A simple rectangular box, commonly used for parenting other elements to. Pretty much all elements are based on this.",
    "functions": [
      {
        "name": "GetIsMenu",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DMenu</page>.\n\nReturns whether the frame is part of a derma menu or not.\n\nIf this is `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "isMenu",
            "description": "Whether this panel is a Menu Component"
          }
        ]
      },
      {
        "name": "SetIsMenu",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DMenu</page>.\n\n\nSets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "arguments": [
          {
            "name": "isMenu",
            "type": "boolean",
            "description": "Whether this pane is a Menu Component"
          }
        ]
      },
      {
        "name": "SetTabbingDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>Does nothing.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "name": "DPanelList",
    "parent": "DPanel",
    "description": "Displays elements in a horizontal or vertical list. A scrollbar is automatically shown if necessary.\nYou can get its vertical bar via `DPanelList.VBar`.\n<page>DPanelList</page> was succeeded in version 13 by more specialised layout elements.\n\n<deprecated>\n<br> Use a combination of <page>DIconLayout</page>, <page>DListLayout</page> and <page>DScrollPanel</page> instead.\n</deprecated>",
    "functions": [
      {
        "name": "EnableVerticalScrollbar",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables/creates the vertical scroll bar so that the panel list can be scrolled through."
      },
      {
        "name": "Rebuild",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nUsed internally to rebuild the child panel positions."
      }
    ]
  },
  {
    "name": "DPanelSelect",
    "functions": [
      {
        "name": "OnActivePanelChanged",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ],
        "description": "Called when the selected panel changes.",
        "arguments": [
          {
            "name": "oldPnl",
            "type": "Panel",
            "description": "Old selected panel."
          },
          {
            "name": "newPnl",
            "type": "Panel",
            "description": "New selected panel."
          }
        ]
      },
      {
        "name": "SelectPanel",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ],
        "description": "Selects a given panel.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel to select. It should've been added previously via <page>DPanelSelect:AddPanel</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DPanPanel"
  },
  {
    "name": "DProperty_Float",
    "parent": "DProperty_Generic",
    "description": "<internal></internal>\nFloat control for the <page>DProperties</page> panel."
  },
  {
    "name": "DProperty_Generic",
    "functions": [
      {
        "name": "SetRow",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Called internally by <page>DProperties</page>.",
        "arguments": [
          {
            "name": "row",
            "type": "Panel",
            "description": "The new row panel."
          }
        ]
      }
    ]
  },
  {
    "name": "DProperty_VectorColor",
    "functions": [
      {
        "name": "Setup",
        "parent": "DProperty_VectorColor",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called by a property row to setup a color selection control.",
        "arguments": [
          {
            "name": "settings",
            "type": "table",
            "description": "A table of settings. None of the values are used for this property. See <page>Editable Entities</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DPropertySheet",
    "functions": [
      {
        "name": "GetShowIcons",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns whatever value was set by <page>DPropertySheet:SetShowIcons</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SwitchToName",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Switches the active tab to a tab with given name.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Case sensitive name of the tab."
          }
        ]
      }
    ]
  },
  {
    "name": "DRGBPicker",
    "functions": [
      {
        "name": "OnChange",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The color that is selected on the color picker (<page>Color</page> form)."
          }
        ]
      }
    ]
  },
  {
    "name": "DScrollPanel",
    "functions": [
      {
        "name": "GetCanvas",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The canvas"
          }
        ]
      }
    ]
  },
  {
    "name": "DShape",
    "functions": [
      {
        "name": "SetType",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "description": "Sets the shape to be drawn.",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "description": "The render type of the DShape. Only rectangles (`Rect`) work currently. If you don't define a type immediately, the <page>PANEL:Paint</page> method will generate errors until you do."
          }
        ]
      }
    ]
  },
  {
    "name": "DSlider",
    "parent": "Panel",
    "description": "Creates a slider that can be moved along the X and/or Y axis",
    "functions": [
      {
        "name": "GetDragging",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Identical to <page>DSlider:IsEditing</page>",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetNotchColor",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Does not affect anything by default.</deprecated>\nReturns the current notch color, set by <page>DSlider:SetNotchColor</page>",
        "returnValues": [
          {
            "type": "Color",
            "name": "clr",
            "description": "The current color"
          }
        ]
      },
      {
        "name": "GetNotches",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAppears to be non functioning, however is still used by panels such as <page>DNumSlider</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "SetBackground",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the background for the slider.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "Path to the image."
          }
        ]
      },
      {
        "name": "SetLockY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the lock on the Y axis.\n\nFor example the value 0.5 will lock the draggable panel to half the height of the slider's panel.",
        "arguments": [
          {
            "name": "lockY",
            "type": "number",
            "default": "nil",
            "description": "Set to nil to reset lock.\n\nThe value range is from 0 to 1."
          }
        ]
      },
      {
        "name": "SetSlideY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to position the draggable panel of the slider on the Y axis.",
        "arguments": [
          {
            "name": "y",
            "type": "number",
            "description": "The value range seems to be from 0 to 1"
          }
        ]
      }
    ]
  },
  {
    "name": "DSprite",
    "parent": "DPanel",
    "description": "A panel that draws a sprite on the player's HUD with the given <page>IMaterial</page>, <page>Global.Color</page> and rotation.\n\nA shortcut for this is <page>Global.CreateSprite</page>().",
    "functions": [
      {
        "name": "SetColor",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "Sets the color modifier for the sprite.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The <page>Global.Color</page> to use."
          }
        ]
      }
    ]
  },
  {
    "name": "DTab",
    "functions": [
      {
        "name": "GetTabHeight",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the target height of this tab. Used internally by <page>DTab</page>'s <page>PANEL:ApplySchemeSettings</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "Either 20, or 28 if <page>DTab:IsActive</page>."
          }
        ]
      },
      {
        "name": "SetPanel",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used internally by <page>DTab:Setup</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The contents of this tab."
          }
        ]
      }
    ]
  },
  {
    "name": "DTextEntry",
    "functions": [
      {
        "name": "CheckNumeric",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether a string is numeric or not.\nAlways returns false if the <page>DTextEntry:SetNumeric</page> is set to false.",
        "arguments": [
          {
            "name": "strValue",
            "type": "string",
            "description": "The string to check."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the string is numeric or not."
          }
        ]
      },
      {
        "name": "GetPlaceholderText",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the placeholder text set with <page>DTextEntry:SetPlaceholderText</page>.",
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "OnKeyCode",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called from <page>DTextEntry</page>'s <page>TextEntry:OnKeyCodeTyped</page> override whenever a valid character is typed while the text entry is focused.",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "They key code of the key pressed, see <page>Enums/KEY</page>."
          }
        ]
      },
      {
        "name": "SetEnterAllowed",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether pressing the Enter key will cause the DTextEntry to lose focus or not, provided it is not multiline. This is true by default.",
        "arguments": [
          {
            "name": "allowEnter",
            "type": "boolean",
            "description": "If set to false, pressing Enter will not cause the panel to lose focus and will never call <page>DTextEntry:OnEnter</page>."
          }
        ]
      },
      {
        "name": "SetPlaceholderText",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the placeholder text that will be shown while the text entry has no user text. The player will not need to delete the placeholder text if they decide to start typing.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "default": "nil"
          }
        ]
      },
      {
        "name": "SetUpdateOnType",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether we should fire <page>DTextEntry:OnValueChange</page> every time we type or delete a character or only when Enter is pressed.",
        "arguments": [
          {
            "name": "updateOnType",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetValue",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text of the <page>DTextEntry</page> and calls <page>DTextEntry:OnValueChange</page>.\n\n<note>The text of the <page>DTextEntry</page> only changes if it's not currently being typed in. If you would rather set the text regardless, use <page>Panel:SetText</page>.</note>",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The value to set."
          }
        ]
      }
    ]
  },
  {
    "name": "DTileLayout",
    "functions": [
      {
        "name": "ConsumeTiles",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called to designate a range of tiles as occupied by a panel.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the top-left corner of the panel."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the top-left corner of the panel."
          },
          {
            "name": "w",
            "type": "number",
            "description": "The panel's width."
          },
          {
            "name": "h",
            "type": "number",
            "description": "The panel's height."
          }
        ]
      },
      {
        "name": "Copy",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Creates and returns an exact copy of the DTileLayout.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created copy."
          }
        ]
      },
      {
        "name": "FitsInTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Determines if a group of tiles is vacant.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the first tile."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the first tile."
          },
          {
            "name": "w",
            "type": "number",
            "description": "The width needed."
          },
          {
            "name": "h",
            "type": "number",
            "description": "The height needed."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not this group is available for occupation."
          }
        ]
      },
      {
        "name": "GetBaseSize",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Returns the size of each single tile, set with <page>DTileLayout:SetBaseSize</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "Base tile size."
          }
        ]
      },
      {
        "name": "OnModified",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Called when anything is dropped on or rearranged within the DTileLayout."
      },
      {
        "name": "SetBorder",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Sets the spacing between the border/edge of the <page>DTileLayout</page> and all the elements inside.",
        "arguments": [
          {
            "name": "border",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "name": "DTooltip",
    "functions": [
      {
        "name": "DrawArrow",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to draw a triangle beneath the <page>DTooltip</page>\n<note>Requires <page>DTooltip:SetContents</page>, without this it will error</note>",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "arrow location on the x axis"
          },
          {
            "name": "y",
            "type": "number",
            "description": "arrow location on the y axis"
          }
        ]
      }
    ]
  },
  {
    "name": "DTree_Node",
    "functions": [
      {
        "name": "ChildExpanded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.",
        "arguments": [
          {
            "name": "expanded",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "DoChildrenOrder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically to update the status of <page>DTree_Node:GetLastChild</page> on children of this node."
      },
      {
        "name": "ExpandRecurse",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Expands or collapses this node, as well as ALL child nodes of this node.\n\nWorks opposite of <page>DTree_Node:ExpandTo</page>.",
        "arguments": [
          {
            "name": "expand",
            "type": "boolean",
            "description": "Whether to expand (true) or collapse (false)"
          }
        ]
      },
      {
        "name": "GetChildNodeCount",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the number of child nodes this node has. For use with <page>DTree_Node:GetChildNode</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "Number of child nodes."
          }
        ]
      },
      {
        "name": "GetPathID",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the path ID (<page>File Search Paths</page>) used in populating the <page>DTree</page> from the filesystem.\n\nSee <page>DTree_Node:SetPathID</page> and <page>DTree_Node:MakeFolder</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The Path ID"
          }
        ]
      },
      {
        "name": "InstallDraggable",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically internally.\n\nMakes the target node compatible with this node's drag'n'drop.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": "The <page>DTree_Node</page>."
          }
        ]
      },
      {
        "name": "MakeFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Makes this node a folder in the filesystem. This will make it automatically populated.\n\nSee also <page>DTree_Node:AddFolder</page>.",
        "arguments": [
          {
            "name": "folder",
            "type": "string",
            "description": "The folder in the filesystem to use, relative to the garrysmod/ folder."
          },
          {
            "name": "path",
            "type": "string",
            "description": "The path to search in. See <page>File Search Paths</page>"
          },
          {
            "name": "showFiles",
            "type": "boolean",
            "default": "false",
            "description": "Should files be added as nodes (true) or folders only (false)"
          },
          {
            "name": "wildcard",
            "type": "string",
            "default": "*",
            "description": "The wildcard to use when searching for files."
          },
          {
            "name": "dontForceExpandable",
            "type": "boolean",
            "default": "false",
            "description": "If set to true, don't show the expand buttons on empty nodes."
          }
        ]
      },
      {
        "name": "OnModified",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when sub-nodes of this <page>DTree_Node</page> were changed, such as being rearranged if that functionality is enabled."
      },
      {
        "name": "PerformRootNodeLayout",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically to perform layout on this node if this node <page>DTree_Node:IsRootNode</page>."
      },
      {
        "name": "SetDirty",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAppears to have no effect on the <page>DTree_Node</page>.",
        "arguments": [
          {
            "name": "dirty",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetDraggableName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed to store name for sub elements for a <page>Panel:Droppable</page> call.",
        "arguments": [
          {
            "name": "name",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "DTree Node"
  },
  {
    "name": "DTree",
    "functions": [
      {
        "name": "ChildExpanded",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalls directly to <page>Panel:InvalidateLayout</page>.\nCalled by <page>DTree_Node</page>s when a sub element has been expanded or collapsed.\n\nUsed as a placeholder function alongside <page>DTree:ExpandTo</page>, <page>DTree:SetExpanded</page> and <page>DTree:MoveChildTo</page>.\n\nThe <page>DTree</page> acts a root node and methods with the same name in <page>DTree_Node</page> call to the parent.",
        "arguments": [
          {
            "name": "bExpand",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "LayoutTree",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing."
      },
      {
        "name": "SetExpanded",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nDoes nothing. Is not called by the <page>DTree</page> itself.\n\nUsed as a placeholder empty function alongside <page>DTree:ExpandTo</page>, <page>DTree:MoveChildTo</page> and <page>DTree:ChildExpanded</page> to prevent errors when <page>DTree_Node:SetExpanded</page> is incorrectly used on a <page>DTree</page>.",
        "arguments": [
          {
            "name": "bExpand",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetIndentSize",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the indentation size of the <page>DTree</page>, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the <page>DTree</page> element.",
        "arguments": [
          {
            "name": "size",
            "type": "number",
            "description": "The new indentation size."
          }
        ]
      }
    ]
  },
  {
    "name": "DVerticalDivider",
    "functions": [
      {
        "name": "GetTopHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the current height of the top content panel set by <page>DVerticalDivider:SetTopHeight</page> or by the user.",
        "returnValues": [
          {
            "type": "number",
            "description": "The current height of the <page>DVerticalDivider</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DVScrollBar",
    "functions": [
      {
        "name": "AnimateTo",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Smoothly scrolls to given level.",
        "arguments": [
          {
            "name": "scroll",
            "type": "number",
            "description": "The scroll level to animate to. In pixels from the top ( from 0 )"
          },
          {
            "name": "length",
            "type": "number",
            "description": "Length of the animation in seconds"
          },
          {
            "name": "delay",
            "type": "number",
            "default": "0",
            "description": "Delay of the animation in seconds"
          },
          {
            "name": "ease",
            "type": "number",
            "default": "-1",
            "description": "See <page>Panel:NewAnimation</page> for explanation."
          }
        ]
      }
    ]
  },
  {
    "name": "FingerVar",
    "parent": "Panel",
    "description": "<internal>\nUsed by the <page>fingerposer</page> panel.\n</internal>\n\nA panel used by Sandbox's Finger Poser tool."
  },
  {
    "name": "IconEditor",
    "functions": [
      {
        "name": "BestGuessLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Applies the best camera settings for the model in the <page>DAdjustableModelPanel</page>, using the values returned by <page>Global.PositionSpawnIcon</page>.\n\nCalled when a user clicks the `wand` button (See the ) and when <page>IconEditor:Refresh</page> is called."
      },
      {
        "name": "FillAnimations",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Fills the <page>DListView</page> on the left of the editor with the model entity's animation list. Called by <page>IconEditor:Refresh</page>.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity being rendered within the model panel."
          }
        ]
      },
      {
        "name": "RenderIcon",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Re-renders the <page>SpawnIcon</page>.\n\nCalled when a user clicks the `RENDER` button, this retrieves the render data from the internal <page>DAdjustableModelPanel</page> and passes it as a table to <page>Panel:RebuildSpawnIconEx</page>."
      }
    ]
  },
  {
    "name": "SpawnmenuContentPanel",
    "functions": [
      {
        "name": "CallPopulateHook",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "description": "Changes the Spawnmenu category to search in",
        "arguments": [
          {
            "name": "hookname",
            "type": "string",
            "description": "The Hook name"
          }
        ]
      },
      {
        "name": "EnableModify",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "description": "Allows the modification of the ContentSidebar"
      }
    ]
  }
]