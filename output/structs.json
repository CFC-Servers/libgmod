[
  {
    "fields": [
      {
        "name": "StartTime",
        "type": "number",
        "description": "The system time value returned by <page>Global.SysTime</page> when the animation starts/will start."
      },
      {
        "name": "EndTime",
        "type": "number",
        "description": "The system time value returned by <page>Global.SysTime</page> when the animation ends/will end."
      },
      {
        "name": "Ease",
        "type": "number",
        "default": "-1",
        "description": "The ease in/out level of the animation."
      },
      {
        "name": "OnEnd",
        "type": "function",
        "description": "The callback function that will be called upon completion of the animation. The arguments passed to it are:\n* <page>table</page> animData - This structure.\n* <page>Panel</page> tgtPanel - The panel the animation was run on."
      },
      {
        "name": "Think",
        "type": "function",
        "description": "The `think` function called every frame that will animate the panel object. This varies based on the animation. You can create a custom function for this if you aren't using the stock panel methods. The arguments passed to it are:\n* <page>table</page> animData - This structure.\n* <page>Panel</page> tgtPanel - The panel the animation is being run on.\n* <page>number</page> fraction - The progress fraction of the animation, between 0 and 1. The change rate of this number will not be linear if you are easing."
      },
      {
        "name": "Pos",
        "type": "Vector",
        "description": "The target position, or target translation of the panel object. Used by <page>Panel:MoveTo</page> and <page>Panel:MoveBy</page> respectively."
      },
      {
        "name": "StartPos",
        "type": "Vector",
        "description": "The position of the panel object when the animation started. Used by <page>Panel:MoveTo</page> and <page>Panel:MoveBy</page>."
      },
      {
        "name": "SizeX",
        "type": "boolean",
        "description": "Whether to resize the panel horizontally or not. Only used by <page>Panel:SizeTo</page>."
      },
      {
        "name": "SizeY",
        "type": "boolean",
        "description": "Whether to resize the panel vertically or not. Only used by <page>Panel:SizeTo</page>."
      },
      {
        "name": "Size",
        "type": "Vector",
        "default": "(0, 0, 0)",
        "description": "The target size of the panel object. Only used by <page>Panel:SizeTo</page>."
      },
      {
        "name": "StartSize",
        "type": "Vector",
        "description": "The size of the panel object when the animation started. Only used by <page>Panel:SizeTo</page>."
      },
      {
        "name": "Color",
        "type": "table",
        "description": "The target colour of the panel object. Only used by <page>Panel:ColorTo</page>."
      },
      {
        "name": "StartColor",
        "type": "table",
        "description": "The colour of the panel object when the animation started. Only used by <page>Panel:ColorTo</page>."
      },
      {
        "name": "Alpha",
        "type": "number",
        "description": "The target alpha (0-255) of the panel object. Only used by <page>Panel:AlphaTo</page>."
      },
      {
        "name": "StartAlpha",
        "type": "number",
        "description": "The alpha (0-255) of the panel object when the animation started. Only used by <page>Panel:AlphaTo</page>."
      },
      {
        "name": "Speed",
        "type": "number",
        "description": "The speed to use for transitions when using linear interpolation (Lerp) animations. Only used by <page>Panel:LerpPositions</page>."
      },
      {
        "name": "UseGravity",
        "type": "boolean",
        "description": "Whether or not to use easing to make the panel 'jump' at its target, slowing as it approaches. Only used by <page>Panel:LerpPositions</page>."
      }
    ],
    "realms": [
      "client"
    ],
    "description": "Table used by panel animation methods, primarily <page>Panel:AnimationThinkInternal</page>, and returned by <page>Panel:NewAnimation</page>.",
    "name": "AnimationData"
  },
  {
    "fields": [
      {
        "name": "id",
        "type": "number",
        "description": "Index of the attachment."
      },
      {
        "name": "name",
        "type": "string",
        "description": "Name of the attachment."
      }
    ],
    "realms": [
      "client",
      "server"
    ],
    "description": "Table returned by <page>Entity:GetAttachments</page>.",
    "name": "AttachmentData"
  },
  {
    "fields": [
      {
        "name": "Attacker",
        "type": "Entity",
        "default": "self",
        "description": "The entity that should be reported as attacker eg. a player\n\nBy default this would be set to the entity <page>Entity:FireBullets</page> is called on."
      },
      {
        "name": "Callback",
        "type": "function",
        "default": "nil",
        "description": "Function to be called **after** the bullet was fired but **before** the damage is applied (the callback is called even if no damage is applied). The arguments are:\n* <page>Entity</page> attacker\n* <page>table</page> tr - See <page>Structures/TraceResult</page>\n* <page>CTakeDamageInfo</page> dmgInfo\n\nThe return value can be a table with following keys:\n* <page>boolean</page> effects - `false` to not do any of the effects.\n* <page>boolean</page> damage - `false` to not do any damage."
      },
      {
        "name": "Damage",
        "type": "number",
        "default": "1",
        "description": "The damage dealt by the bullet.\n\nIf set to `0`, it means the damage should be calculated from the ammo type's <page>ConVar</page>s if  the ammo type has `AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER` flag set.\nSee <page>Structures/AmmoData</page>."
      },
      {
        "name": "Force",
        "type": "number",
        "default": "1",
        "description": "The force of the bullets"
      },
      {
        "name": "Distance",
        "type": "number",
        "default": "56756",
        "description": "Maximum distance the bullet can travel"
      },
      {
        "name": "HullSize",
        "type": "number",
        "default": "0",
        "description": "The hull size of the bullet"
      },
      {
        "name": "Num",
        "type": "number",
        "default": "1",
        "description": "The amount of bullets to fire"
      },
      {
        "name": "Tracer",
        "type": "number",
        "default": "1",
        "description": "Show tracer for every x bullets"
      },
      {
        "name": "AmmoType",
        "type": "string",
        "default": "<empty string>",
        "description": "The ammunition name"
      },
      {
        "name": "TracerName",
        "type": "string",
        "default": "nil",
        "description": "The tracer name. You can find a list of default effects <page text=\"here\">Effects</page>."
      },
      {
        "name": "Dir",
        "type": "Vector",
        "default": "Vector( 0, 0, 0 )",
        "description": "The fire direction"
      },
      {
        "name": "Spread",
        "type": "Vector",
        "default": "Vector( 0, 0, 0 )",
        "description": "The spread, only x and y are needed"
      },
      {
        "name": "Src",
        "type": "Vector",
        "default": "Vector( 0, 0, 0 )",
        "description": "The position to fire the bullets from"
      },
      {
        "name": "IgnoreEntity",
        "type": "Entity",
        "default": "NULL",
        "description": "The entity that the bullet will ignore when it will be shot."
      }
    ],
    "realms": [
      "client",
      "server"
    ],
    "description": "Tables used for bullets see <page>Entity:FireBullets</page> and <page>GM:EntityFireBullets</page>.",
    "name": "Bullet"
  },
  {
    "fields": [
      {
        "name": "SoundName",
        "type": "string",
        "description": "The file path of the played sound.\n\nSounds prefixed with ) tell the sound engine that it is a spatial sound; this allows the sound to emit from a specific location within the world.\n\nSounds prefixed with ^ tell the sound engine that it is a distance based sound. The left channel of the .wav is the 'near' sound that will play when the sound originates close to you, and the right channel is the 'far' sound that will play when the sound originates far from you."
      },
      {
        "name": "OriginalSoundName",
        "type": "string",
        "description": "The original file path or soundscript name.\n\nEven if the SoundName value is changed, the OriginalSoundName value will remain the same.\n\nSounds may be returned as soundscripts (for example, \"Weapon_357.Single\") instead of the sound's file path. You can use <page>sound.GetProperties</page> to retrieve the actual file path."
      },
      {
        "name": "SoundTime",
        "type": "number",
        "default": "0",
        "description": "The time at which the sound should be played.\n\nIf equal to 0 or CurTime(), the sound is played immediately. If greater than CurTime(), the sound is played with a delay. If less than CurTime(), part of the sound is skipped."
      },
      {
        "name": "DSP",
        "type": "number",
        "default": "0",
        "description": "The DSP (digital signal processing) preset applied to the sound.\n\nThere are approximately 134 different presets defined by the Source engine between 0 and 133. These presets represent different types of 'rooms' or environments.\n\n[List of DSP's](https://developer.valvesoftware.com/wiki/Dsp_presets)"
      },
      {
        "name": "SoundLevel",
        "type": "number",
        "default": "75",
        "description": "The sound's attenuation, a number between 0 (low) and 511 (high)\n\nThis determines how fast the sound drops away. A higher value means the sound can be heard farther away.\n\nSee <page>Enums/SNDLVL</page>."
      },
      {
        "name": "Pitch",
        "type": "number",
        "default": "100",
        "description": "The pitch of the played sound, a number between 0 (low) and 255 (high), where 100 is the sound's original pitch."
      },
      {
        "name": "Flags",
        "type": "number",
        "default": "0",
        "description": "The bit flags of the played sound. See <page>Enums/SND</page> for available options."
      },
      {
        "name": "Channel",
        "type": "number",
        "description": "The sound's channel. See <page>Enums/CHAN</page> for available options."
      },
      {
        "name": "Volume",
        "type": "number",
        "description": "The volume of the played sound, return as a decimal number between 0 (low) and 1 (high)."
      },
      {
        "name": "Entity",
        "type": "Entity",
        "description": "The entity that played the sound."
      },
      {
        "name": "Pos",
        "type": "Vector",
        "description": "The origin of the played sound."
      }
    ],
    "realms": [
      "client",
      "server"
    ],
    "description": "Passed as argument of <page>GM:EntityEmitSound</page>.",
    "name": "EmitSoundInfo"
  },
  {
    "fields": [
      {
        "name": "Base",
        "type": "string",
        "description": "The base entity to derive from. This **must** be a valid Lua entity"
      },
      {
        "name": "Type",
        "type": "string",
        "description": "Type of the entity. This **must** be one of these:\n* **anim**\n* **brush**\n* **point**\n* **ai**\n* **nextbot**\n* **filter**\n\nSee <page>Scripted Entities</page> for a more detailed explanation of what each one is."
      },
      {
        "name": "ClassName",
        "type": "string",
        "description": "The class name of the entity (File or folder name of your entity).\n**This is set automatically _after_ the entity file is loaded.**"
      },
      {
        "name": "ClassNameOverride",
        "type": "string",
        "description": "If set, overrides the classname of the SWEP."
      },
      {
        "name": "Folder",
        "type": "string",
        "description": "The folder from where the entity was loaded. This should always be \"entity/ent_myentity\", regardless whether your entity is stored as a file, or multiple files in a folder. **This is set automatically _before_ the entity file is loaded.**"
      },
      {
        "name": "AutomaticFrameAdvance",
        "type": "boolean",
        "default": "false",
        "description": "Set this to true if your entity has animations. You should also apply changes to the <page>ENTITY:Think</page> function from the example on that page."
      },
      {
        "name": "Category",
        "type": "string",
        "default": "Other",
        "description": "Spawnmenu category to put the entity into"
      },
      {
        "name": "Spawnable",
        "type": "boolean",
        "default": "false",
        "description": "Whether this entity should be displayed and is spawnable in the spawn menu"
      },
      {
        "name": "Editable",
        "type": "boolean",
        "default": "false",
        "description": "Whether the entity supports Editing. See <page>Editable Entities</page> for more info."
      },
      {
        "name": "AdminOnly",
        "type": "boolean",
        "default": "false",
        "description": "Whether or not only admins can spawn the entity from their spawn menu"
      },
      {
        "name": "PrintName",
        "type": "string",
        "description": "Nice name of the entity to appear in the spawn menu"
      },
      {
        "name": "Author",
        "type": "string",
        "description": "The author of the entity"
      },
      {
        "name": "Contact",
        "type": "string",
        "description": "The contacts of the entity creator"
      },
      {
        "name": "Purpose",
        "type": "string",
        "description": "The purpose of the entity creation"
      },
      {
        "name": "Instructions",
        "type": "string",
        "description": "How to use your entity"
      },
      {
        "name": "RenderGroup",
        "type": "number",
        "default": "RENDERGROUP_OPAQUE",
        "description": "The entity's render group, see <page>Enums/RENDERGROUP</page>."
      },
      {
        "name": "DisableDuplicator",
        "type": "boolean",
        "default": "false",
        "description": "Disable the ability for players to duplicate this entity."
      },
      {
        "name": "ScriptedEntityType",
        "type": "string",
        "description": "Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.\nSee <page>spawnmenu.AddContentType</page> for more information."
      },
      {
        "name": "DoNotDuplicate",
        "type": "boolean",
        "default": "false",
        "description": "If set, the entity will not be duplicated via the built-in duplicator system."
      },
      {
        "name": "IconOverride",
        "type": "string",
        "default": "materials/entities/<ClassName>.png",
        "description": "If set, overrides the icon path to be displayed in the Spawnmenu for this entity."
      },
      {
        "name": "PhysgunDisabled",
        "type": "boolean",
        "default": "false",
        "description": "If set, the entity forbid physgun interaction."
      }
    ],
    "realms": [
      "client",
      "server"
    ],
    "description": "Information about the ENT structure.\n\nTo learn more about scripted entities, <page text=\"see this page\">Scripted_Entities</page>.\n\nWhile some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.\n\n<note>Values defined in ENT table can't be changed per instance. Initialize default values in <page>ENTITY:Initialize</page> or other hook.</note>",
    "name": "ENT"
  },
  {
    "fields": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the material proxy"
      },
      {
        "name": "init",
        "type": "function",
        "description": "The function used to get variables from the \".vmt\". Called once per each \".vmt\". Arguments are:\n* <page>table</page> self\n* <page>string</page> materialName\n* <page>table</page> values"
      },
      {
        "name": "bind",
        "type": "function",
        "description": "The function used to apply the proxy. This is called every frame while any materials with this proxy are used in world. Arguments are:\n* <page>table</page> self\n* <page>string</page> materialName\n* <page>Entity</page> ent"
      }
    ],
    "realms": [
      "client"
    ],
    "description": "Table structure used by <page>matproxy.Add</page>.",
    "name": "MatProxyData"
  },
  {
    "fields": [
      {
        "name": "Name",
        "type": "string",
        "description": "The nice name of the NPC for UI display."
      },
      {
        "name": "Class",
        "type": "string",
        "description": "Class name of the entity to spawn."
      },
      {
        "name": "Category",
        "type": "string",
        "default": "Other",
        "description": "Spawnmenu category to put the NPCinto."
      },
      {
        "name": "Weapons",
        "type": "table",
        "default": "{}",
        "description": "A list of weapons this NPC is typically meant to use. One will be picked on spawn at random, unless overwritten by the player."
      },
      {
        "name": "KeyValues",
        "type": "table",
        "default": "{}",
        "description": "Key-value pairs to apply to the NPC on spawn. See <page>Entity:SetKeyValue</page>."
      },
      {
        "name": "Model",
        "type": "string",
        "default": "nil",
        "description": "Model override for this NPC."
      },
      {
        "name": "SpawnFlags",
        "type": "number",
        "default": "0",
        "description": "Additional spawnflags for this NPC. See <page>Entity:GetSpawnFlags</page>.\n\nIgnored if `TotalSpawnFlags` key is present."
      },
      {
        "name": "TotalSpawnFlags",
        "type": "number",
        "default": "nil",
        "description": "Total spawnflags override for this NPC."
      },
      {
        "name": "OnCeiling",
        "type": "boolean",
        "default": "false",
        "description": "If set to `true`, this NPC can only be spawned on the ceiling. Stacks with `OnFloor`."
      },
      {
        "name": "OnFloor",
        "type": "boolean",
        "default": "false",
        "description": "If set to `true`, this NPC can only be spawned on the floor. Stacks with `OnCeiling`."
      },
      {
        "name": "Offset",
        "type": "number",
        "default": "0",
        "description": "Offset, in Hammer units, away from the surface where the player is looking at for the NPC spawn position."
      },
      {
        "name": "Material",
        "type": "string",
        "description": "Material override for this NPC. See <page>Entity:SetMaterial</page>."
      },
      {
        "name": "Skin",
        "type": "number",
        "default": "nil",
        "description": "Skin override for the NPC. See <page>Entity:SetSkin</page>."
      },
      {
        "name": "NoDrop",
        "type": "boolean",
        "default": "false",
        "description": "If set to `true`, do not try to teleport the NPC to the ground."
      },
      {
        "name": "Rotate",
        "type": "Angle",
        "default": "Angle( 0, 0, 0 )",
        "description": "Used to add additional rotation the NPC post spawn. Usually all NPCs would be facing the player on spawn. Value of `Angle( 0, 180, 0 )` would make the NPC face away from the player."
      },
      {
        "name": "Health",
        "type": "number",
        "default": "nil",
        "description": "Health override for this NPC. Also sets <page>Entity:SetMaxHealth</page>."
      },
      {
        "name": "OnDuplicated",
        "type": "function",
        "default": "nil",
        "description": "If set, a function to be called when the NPC is pasted using the <page>duplicator</page> library."
      }
    ],
    "realms": [
      "client",
      "server"
    ],
    "description": "Information about the NPC data structure, used to define spawnable NPCs for the Sandbox gamemode.\n\nExample usage:\n```\nlist.Set( \"NPC\", \"npc_tf2_ghost\", {\nName = \"Example NPC\",\nClass = \"npc_tf2_ghost\",\nCategory = \"Nextbot\"\n} )\n```",
    "name": "NPCData"
  },
  {
    "fields": [
      {
        "name": "x",
        "type": "number",
        "description": "The x coordinate of the vertex."
      },
      {
        "name": "y",
        "type": "number",
        "description": "The y coordinate of the vertex."
      },
      {
        "name": "u",
        "type": "number",
        "description": "The u texture coordinate of the vertex. `Can be left blank.`"
      },
      {
        "name": "v",
        "type": "number",
        "description": "The v texture coordinate of the vertex. `Can be left blank.`"
      }
    ],
    "realms": [
      "client",
      "menu"
    ],
    "description": "A structure containing vertex information for use with <page>surface.DrawPoly</page>.\n\nUV coordinates describe which part of a given texture should be drawn at a vertex - your graphics card's interpolator will fill in space between vertices. UV coords range from `0-1`, with `0` being top/left and `1` being bottom/right. If you're using a texture these are mandatory.\n\n<note>You must pass a table of tables with this structure to the function. **You need to pass at least 3 points.**\n\nYour points must be defined in a **clockwise order.** Otherwise, your shape will not render properly.</note>",
    "name": "PolygonVertex"
  },
  {
    "fields": [
      {
        "name": "texture",
        "type": "number",
        "description": "surface.GetTextureID number of the texture to be drawn."
      },
      {
        "name": "x",
        "type": "number",
        "description": "The x Coordinate."
      },
      {
        "name": "y",
        "type": "number",
        "description": "The y Coordinate."
      },
      {
        "name": "w",
        "type": "number",
        "description": "The width of the texture."
      },
      {
        "name": "h",
        "type": "number",
        "description": "The height of the texture."
      },
      {
        "name": "color",
        "type": "table",
        "default": "color_white",
        "description": "The texture color. See <page>Color</page>."
      }
    ],
    "realms": [
      "client",
      "menu"
    ],
    "description": "Used for <page>draw.TexturedQuad</page>.",
    "name": "TextureData"
  },
  {
    "fields": [
      {
        "name": "origin",
        "type": "Vector",
        "description": "The view's original position"
      },
      {
        "name": "angles",
        "type": "Angle",
        "description": "The view's angles"
      },
      {
        "name": "aspect",
        "type": "number",
        "description": "Default width divided by height. Has a deprecated alias `aspectratio`."
      },
      {
        "name": "x",
        "type": "number",
        "description": "The x position of the viewport to render in"
      },
      {
        "name": "y",
        "type": "number",
        "description": "The y position of the viewport to render in"
      },
      {
        "name": "w",
        "type": "number",
        "description": "The width of the viewport to render in"
      },
      {
        "name": "h",
        "type": "number",
        "description": "The height of the viewport to render in"
      },
      {
        "name": "drawhud",
        "type": "boolean",
        "default": "false",
        "description": "Draw the HUD and call the hud painting related hooks"
      },
      {
        "name": "drawmonitors",
        "type": "boolean",
        "default": "false",
        "description": "Draw monitors"
      },
      {
        "name": "drawviewmodel",
        "type": "boolean",
        "default": "true",
        "description": "The weapon's viewmodel"
      },
      {
        "name": "viewmodelfov",
        "type": "number",
        "description": "The viewmodel's FOV"
      },
      {
        "name": "fov",
        "type": "number",
        "description": "The main view's FOV"
      },
      {
        "name": "ortho",
        "type": "table",
        "description": "If set, renders the view orthogonally. A table with these keys:\n* left\n* right\n* top\n* bottom"
      },
      {
        "name": "ortholeft",
        "type": "number",
        "description": "Coordinate for the left clipping plane. Requires `ortho` to be set to `true`.\n\n**Deprecated**: Use `ortho` table instead!"
      },
      {
        "name": "orthoright",
        "type": "number",
        "description": "Coordinate for the right clipping plane. Requires `ortho` to be set to `true`.\n\n**Deprecated**: Use `ortho` table instead!"
      },
      {
        "name": "orthotop",
        "type": "number",
        "description": "Coordinate for the top clipping plane. Requires `ortho` to be set to `true`.\n\n**Deprecated**: Use `ortho` table instead!"
      },
      {
        "name": "orthobottom",
        "type": "number",
        "description": "Coordinate for the bottom clipping plane. Requires `ortho` to be set to `true`.\n\n**Deprecated**: Use `ortho` table instead!"
      },
      {
        "name": "znear",
        "type": "number",
        "description": "The distance of the view's origin to the near clipping plane"
      },
      {
        "name": "zfar",
        "type": "number",
        "description": "The distance of the view's origin to the far clipping plane"
      },
      {
        "name": "znearviewmodel",
        "type": "number",
        "description": "The distance of the view's origin to the near clipping plane for the viewmodel"
      },
      {
        "name": "zfarviewmodel",
        "type": "number",
        "description": "The distance of the view's origin to the far clipping plane for the viewmodel"
      },
      {
        "name": "dopostprocess",
        "type": "boolean",
        "default": "false",
        "description": "Currently works identically to the \"bloomtone\" option (it also overrides it if you set this to false)."
      },
      {
        "name": "bloomtone",
        "type": "boolean",
        "default": "true",
        "description": "Disables default engine bloom and pauses the \"brightness changes\" on HDR maps."
      },
      {
        "name": "viewid",
        "type": "number",
        "default": "0",
        "description": "This is identifying which logical part of the scene an entity is being redered in, see <page>Enums/VIEW</page>."
      },
      {
        "name": "offcenter",
        "type": "table",
        "description": "This allows you to \"zoom in\" on a part of the screen - for example, the top-left quarter of the screen. This is similar to how [poster splits the screen](https://garry.blog/poster-screenshots/) into separate renders.\n\nIt's a table with 4 keys, controlling what portion of the screen to draw:\n* left - where the left edge starts. Natural value is 0.\n* right - where the right edge ends. Natural value is equal to w (the width of the viewport).\n* top - where the `bottom` edge starts. Natural value is 0.\n* bottom - where the `top` edge ends. Natural value is equal to h (the height of the viewport).\n\nNote that top and bottom are reversed.\n\nValues outside the viewport are allowed, but not recommended - instead you should increase the view FOV."
      }
    ],
    "realms": [
      "client"
    ],
    "description": "Table structure used for <page>render.RenderView</page>.\n\nUnless stated otherwise, the default values for all these keys would be inherited from the engine's CViewSetup and do not have static representations.",
    "name": "ViewData"
  }
]