[
  {
    "name": "EFFECT",
    "functions": [
      {
        "name": "GetTracerShootPos",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Used to get the \"real\" start position of a trace, for weapon tracer effects.\n\n\"real\" meaning in 3rd person, the 3rd person position will be used, in first person the first person position will be used.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "Default position if we fail"
          },
          {
            "name": "ent",
            "type": "Weapon",
            "description": "The weapon to use."
          },
          {
            "name": "attachment",
            "type": "number",
            "description": "Attachment ID of on the weapon \"muzzle\", to use as the start position.\n\n<note>Please note that it is expected that the same attachment ID is used on both, the world and the view model.</note>"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The \"real\" start position."
          }
        ]
      },
      {
        "name": "PhysicsCollide",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Called when the effect collides with anything.",
        "arguments": [
          {
            "name": "colData",
            "type": "table",
            "description": "Information regarding the collision. See <page>Structures/CollisionData</page>"
          },
          {
            "name": "collider",
            "type": "PhysObj",
            "description": "The physics object of the entity that collided with the effect."
          }
        ]
      },
      {
        "name": "Think",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Called when the effect should think, return false to kill the effect.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to remove this effect."
          }
        ]
      }
    ]
  },
  {
    "name": "ENTITY",
    "functions": [
      {
        "name": "AddOutputFromAcceptInput",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "A helper function for creating <page>Scripted Entities</page>.\n\nSimilar to <page>ENTITY:AddOutputFromKeyValue</page>, call it from <page>ENTITY:AcceptInput</page> and it'll return true if it successfully added an output from the passed input data.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The input name from <page>ENTITY:AcceptInput</page>."
          },
          {
            "name": "data",
            "type": "string",
            "description": "The input data from <page>ENTITY:AcceptInput</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether any outputs were added or not."
          }
        ]
      },
      {
        "name": "CreateSchedulesInternal",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "<internal></internal>Called just before <page>ENTITY:Initialize</page> for \"ai\" type entities only."
      },
      {
        "name": "GetAttackSpread",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called to determine how good an NPC is at using a particular weapon.\n\n<note>\"ai\" base only</note>",
        "arguments": [
          {
            "name": "wep",
            "type": "Entity",
            "description": "The weapon being used by the NPC."
          },
          {
            "name": "target",
            "type": "Entity",
            "description": "The target the NPC is attacking"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The number of degrees of inaccuracy in the NPC's attack."
          }
        ]
      },
      {
        "name": "GetRenderMesh",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Specify a mesh that should be rendered instead of this SENT's model.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing the following keys:\n* <page>IMesh</page> Mesh - Required\n* <page>IMaterial</page> Material - Required\n* <page>VMatrix</page> Matrix - Optional"
          }
        ]
      },
      {
        "name": "GravGunPunt",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when this entity is about to be punted with the gravity gun (primary fire).\n\nOnly works in Sandbox derived gamemodes and only if <page>GM:GravGunPunt</page> is not overridden.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player pressing left-click with the gravity gun at an entity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true or false to enable or disable punting respectively."
          }
        ]
      },
      {
        "name": "ImpactTrace",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called when a bullet trace hits this entity and allows you to override the default behavior by returning true.",
        "arguments": [
          {
            "name": "traceResult",
            "type": "table",
            "description": "The trace that hit this entity as a <page>Structures/TraceResult</page>."
          },
          {
            "name": "damageType",
            "type": "number",
            "description": "The damage bits associated with the trace, see <page>Enums/DMG</page>"
          },
          {
            "name": "customImpactName",
            "type": "string",
            "default": "nil",
            "description": "The effect name to override the impact effect with.\nPossible arguments are ImpactJeep, AirboatGunImpact, HelicopterImpact, ImpactGunship."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to override the default impact effects."
          }
        ]
      },
      {
        "name": "IsJumpLegal",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when deciding if the Scripted NPC should be able to perform a certain jump or not.\n<note>This is only called for \"ai\" type entities</note>",
        "arguments": [
          {
            "name": "startPos",
            "type": "Vector",
            "description": "Start of the jump"
          },
          {
            "name": "apex",
            "type": "Vector",
            "description": "Apex point of the jump"
          },
          {
            "name": "endPos",
            "type": "Vector",
            "description": "The landing position"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if this jump should be allowed to be performed, false otherwise.\n\nNot returning anything, or returning a non boolean will perform the default action."
          }
        ]
      },
      {
        "name": "NextTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Start the next task in specific schedule.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "sched",
            "type": "table",
            "description": "The schedule to start next task in."
          }
        ]
      },
      {
        "name": "OnDuplicated",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called on any entity after it has been created by the <page>duplicator</page> and before any bone/entity modifiers have been applied.\n\nThis hook is called after <page>ENTITY:Initialize</page> and before <page>ENTITY:PostEntityPaste</page>.",
        "arguments": [
          {
            "name": "entTable",
            "type": "table",
            "description": "The stored data about the original entity that was duplicated. This would typically contain the <page>Entity:GetTable</page> fields that are serializalble. See <page>Structures/EntityCopyData</page>."
          }
        ]
      },
      {
        "name": "OnEntityCopyTableFinish",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called after duplicator finishes saving the entity, allowing you to modify the save data.\n\nThis is called after <page>ENTITY:PostEntityCopy</page>.",
        "arguments": [
          {
            "name": "data",
            "type": "table",
            "description": "The save <page>Structures/EntityCopyData</page> that you can modify."
          }
        ]
      },
      {
        "name": "OnMovementComplete",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the SNPC completes its movement to its destination.\n<note>This hook only works on `ai` type entities.</note>"
      },
      {
        "name": "OnReloaded",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the entity is reloaded by the lua auto-refresh system, i.e. when the developer edits the lua file for the entity while the game is running."
      },
      {
        "name": "RenderOverride",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called instead of the engine drawing function of the entity. This hook works on any entity (scripted or not) it is applied on.\n\nThis does not work on \"physgun_beam\", use <page>GM:DrawPhysgunBeam</page> instead.\n\n<note>As a downside of this implementation, only one RenderOverride may be applied at a time.</note>\n\n<bug issue=\"3292\">Drawing a viewmodel in this function will cause <page>GM:PreDrawViewModel</page>, <page>WEAPON:PreDrawViewModel</page>, <page>WEAPON:ViewModelDrawn</page>, <page>GM:PostDrawViewModel</page>, and <page>WEAPON:PostDrawViewModel</page> to be called twice.</bug>\n\n<bug issue=\"3299\">This is called before PrePlayerDraw for players. If this function exists at all on a player, their worldmodel will always be rendered regardless of PrePlayerDraw's return.</bug>",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The <page text=\"STUDIO_\">Enums/STUDIO</page> flags for this render operation."
          }
        ]
      },
      {
        "name": "RunEngineTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when an engine task is ran on the entity.\n\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "taskID",
            "type": "number",
            "description": "The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)"
          },
          {
            "name": "taskData",
            "type": "number",
            "description": "The task data."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "true to prevent default action"
          }
        ]
      },
      {
        "name": "StartEngineSchedule",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Starts an engine schedule.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "scheduleID",
            "type": "number",
            "description": "Schedule ID to start. See <page>Enums/SCHED</page>"
          }
        ]
      },
      {
        "name": "Think",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every frame on the client.\nCalled about 5-6 times per second on the server.\n\n<note>You may need to call <page>Entity:Spawn</page> to get this hook to run server side.\n\nYou can force it to run at servers tickrate using the example below.</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` if you used <page>Entity:NextThink</page> to override the next execution time."
          }
        ]
      },
      {
        "name": "Use",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when an entity \"uses\" this entity, for example a player pressing their `+use` key (default <key>E</key>) on this entity.\n\nTo change how often the hook is called, see <page>Entity:SetUseType</page>.\n\n<note>This hook only works for `nextbot`, `ai` and `anim` scripted entity types.</note>",
        "arguments": [
          {
            "name": "activator",
            "type": "Entity",
            "description": "The entity that caused this input. This will usually be the player who pressed their use key."
          },
          {
            "name": "caller",
            "type": "Entity",
            "description": "The entity responsible for the input. This will typically be the same as `activator` unless some other entity is acting as a proxy"
          },
          {
            "name": "useType",
            "type": "number",
            "description": "Use type, see <page>Enums/USE</page>."
          },
          {
            "name": "value",
            "type": "number",
            "description": "Any passed value."
          }
        ]
      }
    ]
  },
  {
    "name": "GM",
    "functions": [
      {
        "name": "ChatTextChanged",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever the content of the user's chat input box is changed.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The new contents of the input box"
          }
        ]
      },
      {
        "name": "CheckPassword",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a non local player connects to allow the Lua system to check the password.\n\nThe default behaviour in the base gamemodes emulates what would normally happen. If sv_password is set and its value matches the password passed in by the client - then they are allowed to join. If it isn't set it lets them in too.",
        "arguments": [
          {
            "name": "steamID64",
            "type": "string",
            "description": "The 64bit Steam ID of the joining player, use <page>util.SteamIDFrom64</page> to convert it to a `STEAM_0:` one."
          },
          {
            "name": "ipAddress",
            "type": "string",
            "description": "The IP of the connecting client"
          },
          {
            "name": "svPassword",
            "type": "string",
            "description": "The current value of sv_password (the password set by the server)"
          },
          {
            "name": "clPassword",
            "type": "string",
            "description": "The password provided by the client"
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name of the joining player"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "If the hook returns false then the player is disconnected"
          },
          {
            "type": "string",
            "description": "If returning false in the first argument, then this should be the disconnect message. This will default to `#GameUI_ServerRejectBadPassword`, which is `Bad Password.` translated to the client's language."
          }
        ]
      },
      {
        "name": "CloseDermaMenus",
        "parent": "GM",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when derma menus are closed with <page>Global.CloseDermaMenus</page>."
      },
      {
        "name": "EntityTakeDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an entity takes damage. You can modify all parts of the damage info in this hook.\n\n<warning>Applying damage from this hook to the entity taking damage will lead to infinite loop/crash.</warning>",
        "arguments": [
          {
            "name": "target",
            "type": "Entity",
            "description": "The entity taking damage"
          },
          {
            "name": "dmg",
            "type": "CTakeDamageInfo",
            "description": "Damage info"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to completely block the damage event"
          }
        ]
      },
      {
        "name": "GetPreferredCarryAngles",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to determine preferred carry angles for the entity. It works for both, +use pickup and gravity gun pickup.\n\n<warning>Due to nature of the gravity gun coding in multiplayer, this hook **MAY** seem to not work ( but rest assured it does ), due to clientside prediction not knowing the carry angles. The +use pickup doesn't present this issue as it doesn't predict the player carrying the object clientside ( as you may notice by the prop lagging behind in multiplayer )</warning>\n\n<note>This hook can **not** override preferred carry angles of props such as the sawblade and the harpoon.</note>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to generate carry angles for"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who is holding the object"
          }
        ],
        "returnValues": [
          {
            "type": "Angle",
            "description": "The preferred carry angles for the entity."
          }
        ]
      },
      {
        "name": "GravGunOnPickedUp",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an entity is picked up by a gravity gun.\n\nSee <page>GM:OnPlayerPhysicsPickup</page> for the player `+use` pickup variant.<br>\nSee <page>GM:OnPhysgunPickup</page> for the Physics Gun pickup variant.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player wielding the gravity gun"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that has been picked up by the gravity gun"
          }
        ]
      },
      {
        "name": "GravGunPickupAllowed",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called every tick to poll whether a player is allowed to pick up an entity with the gravity gun or not.\n\nSee <page>GM:AllowPlayerPickup</page> for the +USE pickup variant.<br>\nSee <page>GM:PhysgunPickup</page> for the Physics Gun pickup variant.\n\nCalls <page>ENTITY:GravGunPickupAllowed</page> on the entity being hovered every frame in Sandbox-derived gamemodes.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player wielding the gravity gun"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity the player is attempting to pick up"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow entity pick up"
          }
        ]
      },
      {
        "name": "GUIMousePressed",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever a players presses a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by <page>gui.EnableScreenClicker</page> and the panel used by <page>Panel:ParentToHUD</page>.\n\nSee <page>GM:VGUIMousePressed</page> for a hook that is called on all VGUI elements.",
        "arguments": [
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The key that the player pressed using <page>Enums/MOUSE</page>."
          },
          {
            "name": "aimVector",
            "type": "Vector",
            "description": "A normalized direction vector local to the camera. Internally, this is  <page>gui.ScreenToVector</page>( <page>gui.MousePos</page>() )."
          }
        ]
      },
      {
        "name": "HandlePlayerJumping",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every frame by the player model animation system. Allows to override player jumping animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "velocity",
            "type": "number",
            "description": "Players velocity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HideTeam",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Hides the team selection panel."
      },
      {
        "name": "HUDPaintBackground",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before <page>GM:HUDPaint</page> when the HUD background is being drawn.\n\nJust like <page>GM:HUDPaint</page>, this hook will not be called when the main menu is visible. <page>GM:PostDrawHUD</page> does not have this behavior.\n\nThings rendered in this hook will **always** appear behind things rendered in <page>GM:HUDPaint</page>.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "HUDWeaponPickedUp",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a weapon has been picked up. Override to disable the default HUD notification.",
        "arguments": [
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "The picked up weapon"
          }
        ]
      },
      {
        "name": "InitPostEntity",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after all the entities are initialized. Starting from this hook <page>Global.LocalPlayer</page> will return valid object.\n\n<note>At this point the client only knows about the entities that are within the spawnpoints' [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\"). For instance, if the server sends an entity that is not within this PVS, the client will receive it as NULL entity.</note>"
      },
      {
        "name": "LoadGModSaveFailed",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel.",
        "returnValues": [
          {
            "type": "string",
            "name": "reason",
            "description": "Failure Reason."
          },
          {
            "type": "string",
            "name": "workshopid",
            "description": "the workshop ID of the missing map (if found). Can be an empty string"
          }
        ]
      },
      {
        "name": "MouthMoveAnimation",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Override this gamemode function to disable mouth movement when talking on voice chat.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player in question"
          }
        ]
      },
      {
        "name": "OnLuaError",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when a Lua error occurs, only works in the Menu realm.\n\n<warning>Modify menu state Lua code at your own risk!</warning>",
        "arguments": [
          {
            "name": "error",
            "type": "string",
            "description": "The error that occurred."
          },
          {
            "name": "realm",
            "type": "number",
            "description": "Where the Lua error took place"
          },
          {
            "name": "stack",
            "type": "table",
            "description": "The Lua error stack trace"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Title of the addon that is creating the Lua errors."
          },
          {
            "name": "id",
            "type": "number",
            "description": "Steam Workshop ID of the addon creating Lua errors, if it is an addon."
          }
        ]
      },
      {
        "name": "OnPermissionsChanged",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when a permission gets Granted or Revoked."
      },
      {
        "name": "OnPlayerPhysicsDrop",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player +use drops an entity.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that dropped the object"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The object that was dropped."
          },
          {
            "name": "thrown",
            "type": "boolean",
            "description": "Whether the object was throw or simply let go of."
          }
        ]
      },
      {
        "name": "OnSpawnMenuClose",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a player releases the `+menu` bind on their keyboard, which is bound to Q by default."
      },
      {
        "name": "OnTextEntryGetFocus",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a <page>DTextEntry</page> gets focus.\n\nThis hook is run from <page>DTextEntry:OnGetFocus</page> and <page>PANEL:OnMousePressed</page> of <page>DTextEntry</page>.",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "The panel that got focus"
          }
        ]
      },
      {
        "name": "OnViewModelChanged",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the player changes their weapon to another one - and their viewmodel model changes.\n\n<bug issue=\"2473\">This is not always called clientside.</bug>",
        "arguments": [
          {
            "name": "viewmodel",
            "type": "Entity",
            "description": "The viewmodel that is changing"
          },
          {
            "name": "oldModel",
            "type": "string",
            "description": "The old model"
          },
          {
            "name": "newModel",
            "type": "string",
            "description": "The new model"
          }
        ]
      },
      {
        "name": "PhysgunDrop",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player drops an entity with the Physgun.\n\nSee <page>GM:GravGunOnDropped</page> for the Gravity Gun drop variant.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who dropped an entitiy"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The dropped entity"
          }
        ]
      },
      {
        "name": "PlayerAmmoChanged",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after player's reserve ammo count changes.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose ammo is being affected."
          },
          {
            "name": "ammoID",
            "type": "number",
            "description": "The ammo type ID."
          },
          {
            "name": "oldCount",
            "type": "number",
            "description": "The old ammo count."
          },
          {
            "name": "newCount",
            "type": "number",
            "description": "The new ammo count."
          }
        ]
      },
      {
        "name": "PlayerCanPickupItem",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not a player is allowed to pick an item up. (ammo, health, armor)",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player attempting to pick up"
          },
          {
            "name": "item",
            "type": "Entity",
            "description": "The item the player is attempting to pick up"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Allow pick up"
          }
        ]
      },
      {
        "name": "PlayerDisconnected",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player leaves the server. See the <page text=\"player_disconnect gameevent\">gameevent/player_disconnect</page> for a shared version of this hook.\n<validate><page>Player:SteamID</page>, <page>Player:SteamID64</page>, and the like can return nil here.</validate>\n\n<bug issue=\"3523\">This is not called in single-player or listen servers for the host.</bug>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "the player"
          }
        ]
      },
      {
        "name": "PlayerEnteredVehicle",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player enters a vehicle.\n\nCalled just after <page>GM:CanPlayerEnterVehicle</page>.\n\nSee also <page>GM:PlayerLeaveVehicle</page>.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who entered vehicle."
          },
          {
            "name": "veh",
            "type": "Vehicle",
            "description": "Vehicle the player entered."
          },
          {
            "name": "role",
            "type": "number",
            "description": "The seat number."
          }
        ]
      },
      {
        "name": "PlayerFrozeObject",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player freezes an object.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who has frozen an object"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The frozen object"
          },
          {
            "name": "physobj",
            "type": "PhysObj",
            "description": "The frozen physics object of the frozen entity ( For ragdolls )"
          }
        ]
      },
      {
        "name": "PlayerNoClip",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player tries to switch noclip mode.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The person who entered/exited noclip"
          },
          {
            "name": "desiredState",
            "type": "boolean",
            "description": "Represents the noclip state (on/off) the user will enter if this hook allows them to."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow the switch."
          }
        ]
      },
      {
        "name": "PlayerSelectSpawn",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to determine a spawn point for a player to spawn at.\n<note>The spawn point entity will also impact the player's eye angle. For example, if the entity is upside down, the player's view will be as well.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who needs a spawn point"
          },
          {
            "name": "transition",
            "type": "boolean",
            "description": "If true, the player just spawned from a map transition (`trigger_changelevel`). You probably want to not return an entity for that case to not override player's position."
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "The spawn point entity to spawn the player at"
          }
        ]
      },
      {
        "name": "PlayerSelectTeamSpawn",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Find a team spawn point entity for this player.",
        "arguments": [
          {
            "name": "team",
            "type": "number",
            "description": "Players team"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity to use as a spawn point."
          }
        ]
      },
      {
        "name": "PlayerShouldTakeDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns true if the player should take damage from the given attacker.\n\n<warning>Applying damage from this hook to the player taking damage will lead to infinite loop/crash.</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "attacker",
            "type": "Entity",
            "description": "The attacker"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Allow damage"
          }
        ]
      },
      {
        "name": "PlayerSpawnAsSpectator",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to spawn the player as a spectator.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player to spawn as a spectator"
          }
        ]
      },
      {
        "name": "PlayerStartVoice",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a player starts using voice chat.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who started using voice chat."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Set true to hide player's `CHudVoiceStatus`."
          }
        ]
      },
      {
        "name": "PlayerSwitchFlashlight",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever a player attempts to either turn on or off their flashlight, returning false will deny the change.\n<note>Also gets called when using <page>Player:Flashlight</page>.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempts to change their flashlight state."
          },
          {
            "name": "enabled",
            "type": "boolean",
            "description": "The new state the player requested, true for on, false for off."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can toggle the flashlight or not"
          }
        ]
      },
      {
        "name": "PlayerTick",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "The Move hook is called for you to manipulate the player's <page>CMoveData</page>. This hook is called moments before <page>GM:Move</page> and <page>GM:PlayerNoClip</page>.\n\n<warning>This hook will not run when inside a vehicle. <page>GM:VehicleMove</page> will be called instead.</warning>",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "mv",
            "type": "CMoveData",
            "description": "The current movedata for the player."
          }
        ]
      },
      {
        "name": "PopulateMenuBar",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when it's time to populate the context menu menu bar at the top.",
        "arguments": [
          {
            "name": "menubar",
            "type": "Panel",
            "description": "The <page>DMenuBar</page> itself."
          }
        ]
      },
      {
        "name": "PostDrawEffects",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after rendering effects. This is where halos are drawn. Called just before <page>GM:PreDrawHUD</page>.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "PostDrawHUD",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after <page>GM:PreDrawHUD</page>,  <page>GM:HUDPaintBackground</page> and <page>GM:HUDPaint</page> but before  <page>GM:DrawOverlay</page>.\n\nUnlike <page>GM:HUDPaint</page>(<page text=\"Background\">GM:HUDPaintBackground</page>) hooks, this will still be called when the main menu is visible. And so will be <page>GM:PreDrawHUD</page>\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "PostDrawTranslucentRenderables",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after all translucent entities are drawn.\n\nSee also <page>GM:PostDrawOpaqueRenderables</page> and  <page>GM:PreDrawTranslucentRenderables</page>.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>\n\n<bug issue=\"3295\">This is still called when r_drawentities or r_drawopaquerenderables is disabled.</bug>\n<bug issue=\"3296\">This is not called when r_drawtranslucentworld is disabled.</bug>",
        "arguments": [
          {
            "name": "bDrawingDepth",
            "type": "boolean",
            "description": "Whether the current call is writing depth."
          },
          {
            "name": "bDrawingSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D or 2D skybox.\n\nIn case of 2D skyboxes it is possible for this hook to always be called with this parameter set to `true`."
          },
          {
            "name": "isDraw3DSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D."
          }
        ]
      },
      {
        "name": "PostDrawViewModel",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after view model is drawn.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>\n\n<note>The 3D rendering context in this event is different from the main view. Every render operation will only be accurate with the view model entity.</note>",
        "arguments": [
          {
            "name": "viewmodel",
            "type": "Entity",
            "description": "Players view model"
          },
          {
            "name": "player",
            "type": "Player",
            "description": "The owner of the weapon/view model"
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "The weapon the player is currently holding"
          }
        ]
      },
      {
        "name": "PostRenderVGUI",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after the VGUI has been drawn.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "PreDrawViewModels",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before view models and entities with `RENDERGROUP_VIEWMODEL` are drawn.\n\nYou can use <page>GM:PreDrawEffects</page> as a `PostDrawViewModel` hook as it is called just after the view model(s) are drawn.\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>"
      },
      {
        "name": "RenderScreenspaceEffects",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Used to render post processing effects.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "Restored",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the game is reloaded from a Source Engine save system ( not the Sandbox saves or dupes ).\n\nSee <page>GM:Saved</page> for a hook that is called when such a save file is created."
      },
      {
        "name": "ScaleNPCDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an NPC takes damage.\n\n<note>This hook is called only when a specific hit group of the NPC is hit. In cases where the hitgroup doesn't matter, you should use <page>GM:EntityTakeDamage</page> instead!</note>",
        "arguments": [
          {
            "name": "npc",
            "type": "NPC",
            "description": "The NPC that takes damage"
          },
          {
            "name": "hitgroup",
            "type": "number",
            "description": "The hitgroup (hitbox) enum where the NPC took damage. See <page>Enums/HITGROUP</page>"
          },
          {
            "name": "dmginfo",
            "type": "CTakeDamageInfo",
            "description": "Damage info"
          }
        ]
      },
      {
        "name": "ScoreboardHide",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when player released the scoreboard button (<key>TAB</key> by default)."
      },
      {
        "name": "ShowSpare2",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player executes `gm_showspare2` console command ( Default bind is <key>F4</key> ).",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who executed the command (or `nil` client-side)."
          }
        ]
      },
      {
        "name": "StartGame",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when you start a new game via the menu."
      },
      {
        "name": "Think",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every frame on client and server. This will be the same as <page>GM:Tick</page> on the server when there is no lag, but will only be called once every processed server frame during lag.\n\nSee <page>GM:Tick</page> for a hook that runs every tick on both the client and server.\n\n<note>This hook **WILL NOT** run if the server is empty, unless you set the <page>ConVar</page> `sv_hibernate_think` to 1</note>"
      },
      {
        "name": "Tick",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every server tick. Serverside, this is similar to <page>GM:Think</page>.\n\n<note>This hook **WILL NOT** run if the server is empty, unless you set the <page>ConVar</page> `sv_hibernate_think` to 1</note>"
      },
      {
        "name": "VGUIMousePressed",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a mouse button is pressed on a VGUI element or menu.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel that currently has focus."
          },
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The key that the player pressed using <page>Enums/MOUSE</page>."
          }
        ]
      },
      {
        "name": "WorkshopDownloadedFile",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when an addon from the Steam workshop finishes downloading. Used by default to update details on the workshop downloading panel.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "Workshop ID of addon."
          },
          {
            "name": "title",
            "type": "string",
            "description": "Name of addon."
          }
        ]
      },
      {
        "name": "WorkshopSubscriptionsMessage",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when a Workshop Message is received?. Currently, it seems like the message will be **#ugc.mounting** every time.\n<validate>When does this exactly get called?. If an addon is subscribed, unsubscribed, error occurs or on any event?</validate>",
        "arguments": [
          {
            "name": "message",
            "type": "string",
            "description": "The Message from the Workshop. Will be a phrase that needs to be translated."
          }
        ]
      }
    ]
  },
  {
    "name": "NEXTBOT",
    "functions": [
      {
        "name": "OnEntitySightLost",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the nextbot NPC loses sight of another Nextbot NPC or a Player.\n<note>This hook will only run after <page>NextBot:SetFOV</page> or other vision related function is called on the nextbot. See <page>NextBot:IsAbleToSee</page> for more details.</note>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "the entity that we lost sight of"
          }
        ]
      }
    ]
  },
  {
    "name": "PANEL",
    "functions": [
      {
        "name": "ActionSignal",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a panel receives a command signal from one of its children.\n\nThis hook is called when using <page>Panel:Command</page>, when clicking a <page>Button</page> with <page>Panel:SetCommand</page> set, and when clicking text within a <page>RichText</page> panel that is marked as click-able.",
        "arguments": [
          {
            "name": "signalName",
            "type": "string",
            "description": "The name of the signal, usually the sender of the signal or the command name."
          },
          {
            "name": "signalValue",
            "type": "string",
            "description": "The value of the signal, usually a command argument."
          }
        ]
      },
      {
        "name": "OnActivate",
        "parent": "PANEL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Called when we are activated during level load. Used by the loading screen panel."
      },
      {
        "name": "OnCursorExited",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the cursor left the panels bounds."
      },
      {
        "name": "OnFocusChanged",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the panel gained or lost focus.\n\n<note><page>Panel:HasFocus</page> will only be updated on the next frame and will return the \"old\" value at the time this hook is run. Same goes for <page>vgui.GetKeyboardFocus</page>.</note>",
        "arguments": [
          {
            "name": "gained",
            "type": "boolean",
            "description": "If the focus was gained (`true`) or lost (`false`)."
          }
        ]
      },
      {
        "name": "OnMousePressed",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a mouse key was pressed while the panel is focused.",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "They key code of the key pressed, see <page>Enums/MOUSE</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action such as right click opening edit menu for <page>DTextEntry</page>."
          }
        ]
      },
      {
        "name": "OnStartDragging",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called by <page>dragndrop.StartDragging</page> when the panel starts being dragged."
      },
      {
        "name": "PerformLayout",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the panels' layout needs to be performed again. This means all child panels must be re-positioned to fit the possibly new size of this panel.\n\nThis can be triggered in numerous ways:\n* <page>Panel:InvalidateLayout</page> was called this or previous frame (depending on the argument)\n* <page>Panel:SetPos</page> called more than once on the same panel ([Issue](https://github.com/Facepunch/garrysmod-issues/issues/5519))\n* A child element was added to this panel (TODO: Verify me)\n* The size of this panel has changed\n<warning>Do **NOT** call this function directly. Use <page>Panel:InvalidateLayout</page> instead!</warning>",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The panels current width."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The panels current height."
          }
        ]
      },
      {
        "name": "PostAutoRefresh",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Only works on elements defined with <page>derma.DefineControl</page> and only if the panel has **AllowAutoRefresh** set to true.\n\nCalled after <page>derma.DefineControl</page> is called with panel's class name.\n\nSee also <page>PANEL:PreAutoRefresh</page>"
      },
      {
        "name": "PreAutoRefresh",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Only works on elements defined with <page>derma.DefineControl</page> and only if the panel has **AllowAutoRefresh** set to true.\n\nCalled when <page>derma.DefineControl</page> is called with this panel's class name before applying changes to this panel.\n\nSee also <page>PANEL:PostAutoRefresh</page>"
      },
      {
        "name": "Think",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called every frame while <page>Panel:IsVisible</page> is true."
      }
    ]
  },
  {
    "name": "PLAYER",
    "functions": [
      {
        "name": "Death",
        "parent": "PLAYER",
        "realms": [
          "server"
        ],
        "description": "Called when the player dies"
      },
      {
        "name": "GetHandsModel",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called on player spawn to determine which hand model to use",
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing info about view model hands model to be set. See examples."
          }
        ]
      },
      {
        "name": "Loadout",
        "parent": "PLAYER",
        "realms": [
          "server"
        ],
        "description": "Called on spawn to give the player their default loadout"
      }
    ]
  },
  {
    "name": "SANDBOX",
    "functions": [
      {
        "name": "ContextMenuClosed",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu is supposedly closed.\n\nThis is simply an alias of <page>GM:OnContextMenuClose</page>.\n\nThis hook **will** be called even if the Sandbox's context menu doesn't actually exist, i.e. <page>SANDBOX:ContextMenuEnabled</page> blocked its creation."
      },
      {
        "name": "ContextMenuEnabled",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Allows to prevent the creation of the context menu. If the context menu is already created, this will have no effect.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to prevent the context menu from being created."
          }
        ]
      },
      {
        "name": "ContextMenuOpen",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu is trying to be opened.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to block the opening."
          }
        ]
      },
      {
        "name": "ContextMenuOpened",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu is supposedly opened.\n\nThis is simply an alias of <page>GM:OnContextMenuOpen</page> but will **not** be called if <page>SANDBOX:ContextMenuOpen</page> prevents the context menu from opening.\n\nThis hook **will** be called even if the context menu doesn't actually exist, i.e. <page>SANDBOX:ContextMenuEnabled</page> blocked its creation."
      },
      {
        "name": "OnSaveSpawnlist",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when a player saves his changes made to the spawnmenu"
      },
      {
        "name": "PaintNotes",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:HUDPaint</page>; does nothing by default.\n\n<note>This cannot be used with <page>hook.Add</page></note>"
      },
      {
        "name": "PersistenceSave",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when persistent props are saved.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Where to save. By default is convar \"sbox_persist\"."
          }
        ]
      },
      {
        "name": "PlayerSpawnedRagdoll",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player spawned a ragdoll.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the ragdoll"
          },
          {
            "name": "model",
            "type": "string",
            "description": "The ragdoll model that player wants to spawn"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The spawned ragdoll itself"
          }
        ]
      },
      {
        "name": "PlayerSpawnedSWEP",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player has spawned a scripted weapon from the spawnmenu with a middle mouse click.\n\nFor left mouse click spawns, see <page>SANDBOX:PlayerGiveSWEP</page>.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the SWEP"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The SWEP itself"
          }
        ]
      },
      {
        "name": "PlayerSpawnNPC",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called to ask if player allowed to spawn a particular NPC or not.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that wants to spawn that NPC"
          },
          {
            "name": "npc_type",
            "type": "string",
            "description": "The npc type that player is trying to spawn"
          },
          {
            "name": "weapon",
            "type": "string",
            "description": "The weapon of that NPC"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow spawning that NPC"
          }
        ]
      },
      {
        "name": "PlayerSpawnProp",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when a player attempts to spawn a prop from the Q menu.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to spawn a prop."
          },
          {
            "name": "model",
            "type": "string",
            "description": "Path to the model of the prop the player is attempting to spawn."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the player be able to spawn the prop or not."
          }
        ]
      },
      {
        "name": "PreReloadToolsMenu",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called right before the Lua Loaded tool menus are reloaded."
      },
      {
        "name": "SpawnlistContentChanged",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when changes were made to the spawnmenu like creating a new category."
      },
      {
        "name": "SpawnlistOpenGenericMenu",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nCalled when there's one or more items selected in the spawnmenu by the player, to open the multi selection right click menu (<page>DMenu</page>)",
        "arguments": [
          {
            "name": "canvas",
            "type": "Panel",
            "description": "The canvas that has the selection. (<page>SANDBOX:SpawnlistOpenGenericMenu</page>)"
          }
        ]
      }
    ]
  },
  {
    "name": "TOOL",
    "functions": [
      {
        "name": "BuildCPanel",
        "parent": "TOOL",
        "realms": [
          "client"
        ],
        "description": "Called when the tool's control panel needs to be rebuilt.\n\n<warning>Due to historical reasons, this hook does not provide the tool object as `self`! See examples.</warning>",
        "arguments": [
          {
            "name": "cpanel",
            "type": "Panel",
            "description": "The <page>DForm</page> control panel to add settings to."
          }
        ]
      },
      {
        "name": "DrawHUD",
        "parent": "TOOL",
        "realms": [
          "client"
        ],
        "description": "Called when <page>WEAPON:DrawHUD</page> of the toolgun is called, only when the user has this tool selected."
      },
      {
        "name": "Think",
        "parent": "TOOL",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when <page>WEAPON:Think</page> of the toolgun is called. This only happens when the tool gun is currently equipped/selected by the player and the selected tool is this tool."
      }
    ]
  },
  {
    "name": "WEAPON",
    "functions": [
      {
        "name": "CalcViewModelView",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Allows overriding the position and angle of the viewmodel. This hook only works if you haven't overridden <page>GM:CalcViewModelView</page>.",
        "arguments": [
          {
            "name": "ViewModel",
            "type": "Entity",
            "description": "The viewmodel entity"
          },
          {
            "name": "OldEyePos",
            "type": "Vector",
            "description": "Original position (before viewmodel bobbing and swaying)"
          },
          {
            "name": "OldEyeAng",
            "type": "Angle",
            "description": "Original angle (before viewmodel bobbing and swaying)"
          },
          {
            "name": "EyePos",
            "type": "Vector",
            "description": "Current position"
          },
          {
            "name": "EyeAng",
            "type": "Angle",
            "description": "Current angle"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "New position"
          },
          {
            "type": "Angle",
            "description": "New angle"
          }
        ]
      },
      {
        "name": "DoDrawCrosshair",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called when the crosshair is about to get drawn, and allows you to override it.\n\nThis function will **not** be called if `SWEP.DrawCrosshair` is set to false or if player is affected by <page>Player:CrosshairDisable</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "X coordinate of the crosshair."
          },
          {
            "name": "y",
            "type": "number",
            "description": "Y coordinate of the crosshair."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to override the default crosshair."
          }
        ]
      },
      {
        "name": "DrawWorldModel",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called when we are about to draw the world model.",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The <page text=\"STUDIO_\">Enums/STUDIO</page> flags for this render operation."
          }
        ]
      },
      {
        "name": "FireAnimationEvent",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called before firing animation events, such as muzzle flashes or shell ejections.\n\nThis will only be called serverside for 3000-range events, and clientside for 5000-range  and other events.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "Position of the effect."
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "Angle of the effect."
          },
          {
            "name": "event",
            "type": "number",
            "description": "The event ID of happened even. See [this page](http://developer.valvesoftware.com/wiki/Animation_Events)."
          },
          {
            "name": "options",
            "type": "string",
            "description": "Name or options of the event."
          },
          {
            "name": "source",
            "type": "Entity",
            "description": "The source entity. This will be a viewmodel on the client and the weapon itself on the server"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to disable the effect."
          }
        ]
      },
      {
        "name": "GetNPCRestTimes",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when the weapon is used by NPCs to tell the NPC how to use this weapon. Controls amount of time the NPC can rest (not shoot) between bursts.",
        "returnValues": [
          {
            "type": "number",
            "description": "Minimum amount of time the NPC can rest (not shoot) between bursts in seconds. Default is `0.3` seconds."
          },
          {
            "type": "number",
            "description": "Maximum amount of time the NPC can rest (not shoot) between bursts in seconds. Default is `0.66` seconds."
          }
        ]
      },
      {
        "name": "HUDShouldDraw",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "This hook determines which parts of the HUD to draw.",
        "arguments": [
          {
            "name": "element",
            "type": "string",
            "description": "The HUD element in question"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to hide this HUD element"
          }
        ]
      },
      {
        "name": "OnRestore",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the weapon entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).\n\nFor the <page>duplicator</page> callbacks, see <page>ENTITY:OnDuplicated</page>.\n\nSee also <page>saverestore</page> for relevant functions."
      },
      {
        "name": "PrintWeaponInfo",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "A convenience function that draws the weapon info box, used in <page>WEAPON:DrawWeaponSelection</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x co-ordinate of box position"
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y co-ordinate of box position"
          },
          {
            "name": "alpha",
            "type": "number",
            "description": "Alpha value for the box"
          }
        ]
      },
      {
        "name": "Reload",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the reload key ( +reload ) is pressed."
      },
      {
        "name": "ShootBullet",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "A convenient function to shoot bullets.",
        "arguments": [
          {
            "name": "damage",
            "type": "number",
            "description": "The damage of the bullet"
          },
          {
            "name": "num_bullets",
            "type": "number",
            "description": "Amount of bullets to shoot"
          },
          {
            "name": "aimcone",
            "type": "number",
            "description": "Spread of bullets"
          },
          {
            "name": "ammo_type",
            "type": "string",
            "default": "self.Primary.Ammo",
            "description": "Ammo type of the bullets"
          },
          {
            "name": "force",
            "type": "number",
            "default": "1",
            "description": "Force of the bullets"
          },
          {
            "name": "tracer",
            "type": "number",
            "default": "5",
            "description": "Show a tracer on every x bullets"
          }
        ]
      }
    ]
  }
]