[
  {
    "name": "achievements",
    "functions": [
      {
        "name": "SpawnMenuOpen",
        "parent": "achievements",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Adds one to the count of how many times the spawnmenu has been opened. Once this count reaches 100,000, the 'Menu User' achievement is unlocked."
      }
    ]
  },
  {
    "name": "ai_schedule",
    "description": "Allows you to set up a schedule for NPCs to follow. This lets you dictate their actions.",
    "functions": [
      {
        "name": "New",
        "parent": "ai_schedule",
        "realms": [
          "server"
        ],
        "description": "Creates a schedule for scripted NPC.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the schedule."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing schedule information to be used with <page>ENTITY:StartSchedule</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "ai",
    "functions": [
      {
        "name": "GetSquadMemberCount",
        "parent": "ai",
        "realms": [
          "server"
        ],
        "description": "Returns the amount of members a given squad has. See also <page>ai.GetSquadMembers</page>.",
        "arguments": [
          {
            "name": "squad",
            "type": "string",
            "description": "The squad name."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The member count."
          }
        ]
      },
      {
        "name": "GetTaskID",
        "parent": "ai",
        "realms": [
          "server"
        ],
        "description": "Translates a task name to its corresponding ID.",
        "arguments": [
          {
            "name": "task",
            "type": "string",
            "description": "The task name."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502). Returns -1 if the schedule name isn't valid."
          }
        ]
      }
    ]
  },
  {
    "name": "baseclass",
    "description": "The baseclass library. Used to lookup a field from a metatable.",
    "functions": [
      {
        "name": "Set",
        "parent": "baseclass",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Add a new base class that can be derived by others. This is done automatically for:\n* widgets\n* panels\n* drive modes\n* entities\n* weapons\n* gamemodes (with prefix \"gamemode_\")",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of this base class. Must be completely unique."
          },
          {
            "name": "tab",
            "type": "table",
            "description": "The base class."
          }
        ]
      }
    ]
  },
  {
    "name": "bit",
    "functions": [
      {
        "name": "band",
        "parent": "bit",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Performs the bitwise `and` for all values specified.",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "The value to be manipulated."
          },
          {
            "name": "otherValues",
            "type": "number",
            "default": "nil",
            "description": "Values bit to perform bitwise \"and\" with. Optional."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Result of bitwise \"and\" operation."
          }
        ]
      },
      {
        "name": "bnot",
        "parent": "bit",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the bitwise not of the value.",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "The value to be inverted."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "bitwiseNot"
          }
        ]
      },
      {
        "name": "rshift",
        "parent": "bit",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the right shifted value.\n<note>The returned value will be clamped to a signed 32-bit integer, even on 64-bit builds.</note>",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "The value to be manipulated."
          },
          {
            "name": "shiftCount",
            "type": "number",
            "description": "Amounts of bits to shift right by."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "shiftedValue"
          }
        ]
      }
    ]
  },
  {
    "name": "cam",
    "functions": [
      {
        "name": "End3D",
        "parent": "cam",
        "realms": [
          "client"
        ],
        "description": "Switches the renderer back to the previous drawing mode from a 3D context."
      },
      {
        "name": "Start3D2D",
        "parent": "cam",
        "realms": [
          "client"
        ],
        "description": "Sets up a new 2D rendering context. Must be finished by <page>cam.End3D2D</page>. This function pushes a new matrix onto the stack. (<page>cam.PushModelMatrix</page>)\n\nMatrix formula:\n```\nlocal m = Matrix()\nm:SetAngles(angles)\nm:SetTranslation(pos)\nm:SetScale(Vector(scale, -scale, 1))\n```\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>\n<warning>This should be closed by <page>cam.End3D2D</page> otherwise the game crashes</warning>",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "Origin of the 3D2D context, ie. the top left corner, (0, 0)."
          },
          {
            "name": "angles",
            "type": "Angle",
            "description": "Angles of the 3D2D context.\n+x in the 2d context corresponds to +x of the angle (its forward direction).\n+y in the 2d context corresponds to -y of the angle (its right direction).\n\nIf (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy))."
          },
          {
            "name": "scale",
            "type": "number",
            "description": "The scale of the render context.\nIf scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context."
          }
        ]
      }
    ]
  },
  {
    "name": "chat",
    "functions": [
      {
        "name": "PlaySound",
        "parent": "chat",
        "realms": [
          "client"
        ],
        "description": "Plays the chat \"tick\" sound."
      }
    ]
  },
  {
    "name": "cleanup",
    "functions": [
      {
        "name": "Add",
        "parent": "cleanup",
        "realms": [
          "server"
        ],
        "description": "Adds an entity to a player's cleanup list.",
        "arguments": [
          {
            "name": "pl",
            "type": "Player",
            "description": "Who's cleanup list to add the entity to."
          },
          {
            "name": "type",
            "type": "string",
            "description": "The type of cleanup."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to add to the player's cleanup list."
          }
        ]
      },
      {
        "name": "CC_Cleanup",
        "parent": "cleanup",
        "realms": [
          "server"
        ],
        "description": "<internal></internal> Called by the `gmod_cleanup` console command. Allows players to cleanup their own props.",
        "arguments": [
          {
            "name": "pl",
            "type": "Player",
            "description": "The player that called the console command."
          },
          {
            "name": "command",
            "type": "string",
            "description": "The console command that called this function."
          },
          {
            "name": "args",
            "type": "table",
            "description": "First and only argument is the cleanup type."
          }
        ]
      }
    ]
  },
  {
    "name": "constraint",
    "functions": [
      {
        "name": "Find",
        "parent": "constraint",
        "realms": [
          "server"
        ],
        "description": "Returns the constraint of a specified type between two entities, if it exists",
        "arguments": [
          {
            "name": "ent1",
            "type": "Entity",
            "description": "The first entity to check"
          },
          {
            "name": "ent2",
            "type": "Entity",
            "description": "The second entity to check"
          },
          {
            "name": "type",
            "type": "string",
            "description": "The type of constraint, case sensitive. List of default constrains is as follows:\n* `Weld`\n* `Axis`\n* `AdvBallsocket`\n* `Rope`\n* `Elastic`\n* `NoCollide`\n* `Motor`\n* `Pulley`\n* `Ballsocket`\n* `Winch`\n* `Hydraulic`\n* `Muscle`\n* `Keepupright`\n* `Slider`"
          },
          {
            "name": "bone1",
            "type": "number",
            "description": "The bone number for the first entity (0 for monoboned entities)"
          },
          {
            "name": "bone2",
            "type": "number",
            "description": "The bone number for the second entity"
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "constraint"
          }
        ]
      },
      {
        "name": "GetAllConstrainedEntities",
        "parent": "constraint",
        "realms": [
          "server"
        ],
        "description": "Returns a table of all entities recursively constrained to an entitiy.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to check"
          },
          {
            "name": "ResultTable",
            "type": "table",
            "default": "nil",
            "description": "Table used to return result. Optional."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing all of the constrained entities. This includes all entities constrained to entities constrained to the supplied entity, etc."
          }
        ]
      },
      {
        "name": "Slider",
        "parent": "constraint",
        "realms": [
          "server"
        ],
        "description": "Creates a slider constraint.",
        "arguments": [
          {
            "name": "Ent1",
            "type": "Entity",
            "description": "First entity."
          },
          {
            "name": "Ent2",
            "type": "Entity",
            "description": "Second entity."
          },
          {
            "name": "Bone1",
            "type": "number",
            "description": "Bone of first entity (0 for non-ragdolls),"
          },
          {
            "name": "Bone2",
            "type": "number",
            "description": "Bone of second entity (0 for non-ragdolls)."
          },
          {
            "name": "LPos1",
            "type": "Vector"
          },
          {
            "name": "LPos2",
            "type": "Vector"
          },
          {
            "name": "width",
            "type": "number",
            "description": "The width of the rope."
          },
          {
            "name": "material",
            "type": "string",
            "description": "The material of the rope."
          },
          {
            "name": "color",
            "type": "table",
            "description": "The color of the rope. See <page>Global.Color</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "Constraint. Will return false if the constraint could not be created."
          },
          {
            "type": "Entity",
            "description": "rope. Will return nil if the constraint could not be created."
          }
        ]
      },
      {
        "name": "Winch",
        "parent": "constraint",
        "realms": [
          "server"
        ],
        "description": "Creates a Winch constraint.",
        "arguments": [
          {
            "name": "pl",
            "type": "Player",
            "description": "The player that will be used to call <page>numpad.OnDown</page> and <page>numpad.OnUp</page>."
          },
          {
            "name": "Ent1",
            "type": "Entity",
            "description": "First entity."
          },
          {
            "name": "Ent2",
            "type": "Entity",
            "description": "Second entity."
          },
          {
            "name": "Bone1",
            "type": "number",
            "description": "Bone of first entity (0 for non-ragdolls),"
          },
          {
            "name": "Bone2",
            "type": "number",
            "description": "Bone of second entity (0 for non-ragdolls)."
          },
          {
            "name": "LPos1",
            "type": "Vector"
          },
          {
            "name": "LPos2",
            "type": "Vector"
          },
          {
            "name": "width",
            "type": "number",
            "description": "The width of the rope."
          },
          {
            "name": "fwd_bind",
            "type": "number",
            "description": "The key binding for \"forward\", corresponding to an <page>Enums/KEY</page>"
          },
          {
            "name": "bwd_bind",
            "type": "number",
            "description": "The key binding for \"backwards\", corresponding to an <page>Enums/KEY</page>"
          },
          {
            "name": "fwd_speed",
            "type": "number",
            "description": "Forward speed."
          },
          {
            "name": "bwd_speed",
            "type": "number",
            "description": "Backwards speed."
          },
          {
            "name": "material",
            "type": "string",
            "description": "The material of the rope."
          },
          {
            "name": "toggle",
            "type": "boolean",
            "description": "Whether the winch should be on toggle."
          },
          {
            "name": "color",
            "type": "table",
            "description": "The color of the rope. See <page>Global.Color</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "Constraint. Can return nil. Will return false if the constraint could not be created."
          },
          {
            "type": "Entity",
            "description": "rope. Will return nil if the constraint could not be created."
          },
          {
            "type": "Entity",
            "description": "controller. Can return nil."
          }
        ]
      }
    ]
  },
  {
    "name": "construct",
    "description": "The construct library is used to control the physical properties of entities.",
    "functions": [
      {
        "name": "SetPhysProp",
        "parent": "construct",
        "realms": [
          "server"
        ],
        "description": "Sets props physical properties.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player. This variable is not used and can be left out."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to apply properties to"
          },
          {
            "name": "physObjID",
            "type": "number",
            "description": "You can use this or the argument below. This will be used in case you don't provide argument below."
          },
          {
            "name": "physObj",
            "type": "PhysObj",
            "description": "The physics object to apply the properties to"
          },
          {
            "name": "data",
            "type": "table",
            "description": "The table containing properties to apply. See <page>Structures/PhysProperties</page>"
          }
        ]
      }
    ]
  },
  {
    "name": "cookie",
    "functions": [
      {
        "name": "GetNumber",
        "parent": "cookie",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Gets the value of a cookie on the client as a number.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the cookie that you want to get."
          },
          {
            "name": "default",
            "type": "any",
            "default": "nil",
            "description": "Value to return if the cookie does not exist."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The cookie value"
          }
        ]
      }
    ]
  },
  {
    "name": "coroutine",
    "functions": [
      {
        "name": "resume",
        "parent": "coroutine",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Resumes the given coroutine and passes the given vararg to either the function arguments or the <page>coroutine.yield</page> that is inside that function and returns whatever yield is called with the next time or by the final return in the function.",
        "arguments": [
          {
            "name": "coroutine",
            "type": "thread",
            "description": "Coroutine to resume."
          },
          {
            "name": "args",
            "type": "vararg",
            "description": "Arguments to be returned by <page>coroutine.yield</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "If the executed thread code had no errors occur within it."
          },
          {
            "type": "vararg",
            "description": "If an error occurred, this will be a string containing the error message. Otherwise, this will be arguments that were yielded."
          }
        ]
      },
      {
        "name": "yield",
        "parent": "coroutine",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Pauses the active coroutine and passes all additional variables to the call of <page>coroutine.resume</page> that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume.",
        "arguments": [
          {
            "name": "returnValue",
            "type": "vararg",
            "description": "Arguments to be returned by the last call of <page>coroutine.resume</page>."
          }
        ],
        "returnValues": [
          {
            "type": "vararg",
            "description": "Arguments that were set previously by <page>coroutine.resume</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "cvars",
    "functions": [
      {
        "name": "Bool",
        "parent": "cvars",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Retrieves console variable as a boolean.",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": "Name of console variable"
          },
          {
            "name": "default",
            "type": "boolean",
            "default": "false",
            "description": "The value to return if the console variable does not exist"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Retrieved value"
          }
        ]
      },
      {
        "name": "String",
        "parent": "cvars",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Retrieves console variable as a string.",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": "Name of console variable"
          },
          {
            "name": "default",
            "type": "any",
            "default": "nil",
            "description": "The value to return if the console variable does not exist"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Retrieved value"
          }
        ]
      }
    ]
  },
  {
    "name": "debug",
    "functions": [
      {
        "name": "getfenv",
        "parent": "debug",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the environment of the passed object. This can be set with <page>debug.setfenv</page>",
        "arguments": [
          {
            "name": "object",
            "type": "table",
            "description": "Object to get environment of"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Environment"
          }
        ]
      },
      {
        "name": "getupvalue",
        "parent": "debug",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Used for getting variable values in an index from the passed function. This does nothing for C functions.",
        "arguments": [
          {
            "name": "func",
            "type": "function",
            "description": "Function to get the upvalue indexed from."
          },
          {
            "name": "index",
            "type": "number",
            "description": "The index in the upvalue array. The max number of entries can be found in <page>debug.getinfo</page>'s \"<page text=\"nups\">Structures/DebugInfo</page>\" key."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Name of the upvalue. Will be nil if the index was out of range (< 1 or > <page>debug.getinfo</page>.nups), or the function was defined in C."
          },
          {
            "type": "any",
            "description": "Value of the upvalue."
          }
        ]
      },
      {
        "name": "setmetatable",
        "parent": "debug",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Sets the object's metatable. Unlike <page>Global.setmetatable</page>, this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil.",
        "arguments": [
          {
            "name": "object",
            "type": "any",
            "description": "Object to set the metatable for."
          },
          {
            "name": "metatable",
            "type": "table",
            "description": "The metatable to set for the object.\nIf this argument is nil, then the object's metatable is removed."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "true if the object's metatable was set successfully."
          }
        ]
      },
      {
        "name": "Trace",
        "parent": "debug",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Prints out the lua function call stack to the console."
      },
      {
        "name": "upvalueid",
        "parent": "debug",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "<removed>This function was removed due to security concerns.</removed>\n\nReturns an unique identifier for the upvalue indexed from func",
        "arguments": [
          {
            "name": "func",
            "type": "function",
            "description": "The function to index the upvalue from"
          },
          {
            "name": "index",
            "type": "number",
            "description": "The index from func"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "A unique identifier"
          }
        ]
      }
    ]
  },
  {
    "name": "debugoverlay",
    "functions": [
      {
        "name": "Box",
        "parent": "debugoverlay",
        "realms": [
          "client",
          "server"
        ],
        "description": "Displays a solid coloured box at the specified position.\n\n<note>This function will silently fail if the `developer` <page>ConVar</page> is set to `0`. It is not networked to clients, except for the <page text=\"listen server host\">Player:IsListenServerHost</page>.</note>",
        "arguments": [
          {
            "name": "origin",
            "type": "Vector",
            "description": "Position origin"
          },
          {
            "name": "mins",
            "type": "Vector",
            "description": "Minimum bounds of the box"
          },
          {
            "name": "maxs",
            "type": "Vector",
            "description": "Maximum bounds of the box"
          },
          {
            "name": "lifetime",
            "type": "number",
            "default": "1",
            "description": "Number of seconds to appear"
          },
          {
            "name": "color",
            "type": "table",
            "default": "Color( 255, 255, 255, 255 )",
            "description": "The color of the box. Uses the <page>Color</page>"
          }
        ]
      },
      {
        "name": "EntityTextAtPosition",
        "parent": "debugoverlay",
        "realms": [
          "client",
          "server"
        ],
        "description": "Displays 2D text at the specified coordinates.\n\n<note>This function will silently fail if the `developer` <page>ConVar</page> is set to `0`. It is not networked to clients, except for the <page text=\"listen server host\">Player:IsListenServerHost</page>.</note>",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position in 3D to display the text."
          },
          {
            "name": "line",
            "type": "number",
            "description": "Line of text, will offset text on the to display the new line unobstructed"
          },
          {
            "name": "text",
            "type": "string",
            "description": "The text to display"
          },
          {
            "name": "lifetime",
            "type": "number",
            "default": "1",
            "description": "Number of seconds to appear"
          },
          {
            "name": "color",
            "type": "table",
            "default": "Color( 255, 255, 255 )",
            "description": "The color of the box. Uses the <page>Color</page>"
          }
        ]
      },
      {
        "name": "Line",
        "parent": "debugoverlay",
        "realms": [
          "client",
          "server"
        ],
        "description": "Displays a coloured line at the specified position.\n\n<note>This function will silently fail if the `developer` <page>ConVar</page> is set to `0`. It is not networked to clients, except for the <page text=\"listen server host\">Player:IsListenServerHost</page>.</note>",
        "arguments": [
          {
            "name": "pos1",
            "type": "Vector",
            "description": "First position of the line"
          },
          {
            "name": "pos2",
            "type": "Vector",
            "description": "Second position of the line"
          },
          {
            "name": "lifetime",
            "type": "number",
            "default": "1",
            "description": "Number of seconds to appear"
          },
          {
            "name": "color",
            "type": "table",
            "default": "Color( 255, 255, 255 )",
            "description": "The color of the line. Uses the <page>Color</page>"
          },
          {
            "name": "ignoreZ",
            "type": "boolean",
            "default": "false",
            "description": "If true, will draw on top of everything; ignoring the Z buffer"
          }
        ]
      },
      {
        "name": "Sphere",
        "parent": "debugoverlay",
        "realms": [
          "client",
          "server"
        ],
        "description": "Displays a coloured sphere at the specified position.\n\n<note>This function will silently fail if the `developer` <page>ConVar</page> is set to `0`. It is not networked to clients, except for the <page text=\"listen server host\">Player:IsListenServerHost</page>.</note>",
        "arguments": [
          {
            "name": "origin",
            "type": "Vector",
            "description": "Position origin"
          },
          {
            "name": "size",
            "type": "number",
            "description": "Size of the sphere"
          },
          {
            "name": "lifetime",
            "type": "number",
            "default": "1",
            "description": "Number of seconds to appear"
          },
          {
            "name": "color",
            "type": "table",
            "default": "Color( 255, 255, 255 )",
            "description": "The color of the sphere. Uses the <page>Color</page>"
          },
          {
            "name": "ignoreZ",
            "type": "boolean",
            "default": "false",
            "description": "If true, will draw on top of everything; ignoring the Z buffer"
          }
        ]
      }
    ]
  },
  {
    "name": "derma",
    "functions": [
      {
        "name": "DefineControl",
        "parent": "derma",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Defines a new Derma control with an optional base.\n\nThis calls <page>vgui.Register</page> internally, but also does the following:\n* Adds the control to <page>derma.GetControlList</page>\n* Adds a key \"Derma\" - This is returned by <page>derma.GetControlList</page>\n* Makes a global table with the name of the control (This is technically deprecated and should not be relied upon)\n* If reloading (i.e. called this function with name of an existing panel), updates all existing instances of panels with this name. (Updates functions, calls <page>PANEL:PreAutoRefresh</page> and <page>PANEL:PostAutoRefresh</page>, etc.)",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the newly created control"
          },
          {
            "name": "description",
            "type": "string",
            "description": "Description of the control"
          },
          {
            "name": "tab",
            "type": "table",
            "description": "Table containing control methods and properties"
          },
          {
            "name": "base",
            "type": "string",
            "description": "Derma control to base the new control off of"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing the new control's methods and properties"
          }
        ]
      },
      {
        "name": "GetNamedSkin",
        "parent": "derma",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the skin table of the skin with the supplied name",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of skin"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Skin table"
          }
        ]
      }
    ]
  },
  {
    "name": "dragndrop",
    "functions": [
      {
        "name": "CallReceiverFunction",
        "parent": "dragndrop",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nCalls the receiver function of hovered panel.",
        "arguments": [
          {
            "name": "bDoDrop",
            "type": "boolean",
            "description": "true if the mouse was released, false if we right clicked."
          },
          {
            "name": "command",
            "type": "number",
            "description": "The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil )"
          },
          {
            "name": "mx",
            "type": "number",
            "description": "The local to the panel mouse cursor X position when the click happened."
          },
          {
            "name": "my",
            "type": "number",
            "description": "The local to the panel  mouse cursor Y position when the click happened."
          }
        ]
      },
      {
        "name": "Drop",
        "parent": "dragndrop",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Handles the drop action of drag'n'drop library."
      },
      {
        "name": "HoverThink",
        "parent": "dragndrop",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nHandles the hover think. Called from <page>dragndrop.Think</page>."
      },
      {
        "name": "IsDragging",
        "parent": "dragndrop",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the user is dragging something with the drag'n'drop system.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the user is dragging something with the drag'n'drop system."
          }
        ]
      }
    ]
  },
  {
    "name": "draw",
    "functions": [
      {
        "name": "NoTexture",
        "parent": "draw",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets drawing texture to a default white texture (vgui/white) via <page>surface.SetMaterial</page>. Useful for resetting the drawing texture.\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>"
      }
    ]
  },
  {
    "name": "drive",
    "functions": [
      {
        "name": "CalcView",
        "parent": "drive",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal>\nOptionally alter the view.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "view",
            "type": "table",
            "description": "The view, see <page>Structures/ViewData</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "true if succeeded"
          }
        ]
      }
    ]
  },
  {
    "name": "duplicator",
    "functions": [
      {
        "name": "ApplyEntityModifiers",
        "parent": "duplicator",
        "realms": [
          "server"
        ],
        "description": "Calls every function registered with <page>duplicator.RegisterEntityModifier</page> on the entity.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose entity this is"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity in question"
          }
        ]
      },
      {
        "name": "ConstraintType",
        "parent": "duplicator",
        "realms": [
          "client",
          "server"
        ],
        "description": "A list of all <page>constraint</page>s that can be duplicated. Registered with <page>duplicator.RegisterConstraint</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The list of all constraints that can be duplicated. Key = classname, Value = table."
          }
        ]
      },
      {
        "name": "Copy",
        "parent": "duplicator",
        "realms": [
          "server"
        ],
        "description": "Copies the entity, and all of its constraints and entities, then returns them in a table.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to duplicate. The function will automatically copy all constrained entities."
          },
          {
            "name": "tableToAdd",
            "type": "table",
            "default": "{}",
            "description": "A preexisting table to add entities and constraints in from.\nUses the same table format as the table returned from this function."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing duplication info which includes the following members:\n* <page>table</page> Entities\n* <page>table</page> Constraints\n* <page>Vector</page> Mins\n* <page>Vector</page> Maxs\n\nThe values of Mins & Maxs from the table are returned from <page>duplicator.WorkoutSize</page>"
          }
        ]
      },
      {
        "name": "CopyEnts",
        "parent": "duplicator",
        "realms": [
          "server"
        ],
        "description": "Copies the passed table of entities to save for later.",
        "arguments": [
          {
            "name": "ents",
            "type": "table",
            "description": "A table of entities to save/copy."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing duplication info which includes the following members:\n* <page>table</page> Entities\n* <page>table</page> Constraints\n* <page>Vector</page> Mins\n* <page>Vector</page> Maxs"
          }
        ]
      },
      {
        "name": "DoFlex",
        "parent": "duplicator",
        "realms": [
          "server"
        ],
        "description": "Restores the flex data using <page>Entity:SetFlexWeight</page> and <page>Entity:SetFlexScale</page>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to restore the flexes on"
          },
          {
            "name": "flex",
            "type": "table",
            "description": "The flexes to restore"
          },
          {
            "name": "scale",
            "type": "number",
            "default": "nil",
            "description": "The flex scale to apply. (Flex scale is unchanged if omitted)"
          }
        ]
      },
      {
        "name": "FindEntityClass",
        "parent": "duplicator",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the entity class factory registered with <page>duplicator.RegisterEntityClass</page>.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the entity class factory"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Is compromised of the following members:\n* <page>function</page> Func - The function that creates the entity\n* <page>table</page> Args - Arguments to pass to the function"
          }
        ]
      },
      {
        "name": "IsAllowed",
        "parent": "duplicator",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns whether the entity can be duplicated or not",
        "arguments": [
          {
            "name": "classname",
            "type": "string",
            "description": "An entity's classname"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns true if the entity can be duplicated (nil otherwise)"
          }
        ]
      },
      {
        "name": "Paste",
        "parent": "duplicator",
        "realms": [
          "server"
        ],
        "description": "\"Given entity list and constraint list, create all entities and return their tables\"\n\nCalls <page>duplicator.CreateEntityFromTable</page> on each sub-table of EntityList. If an entity is actually created, it calls <page>ENTITY:OnDuplicated</page> with the entity's duplicator data, then <page>duplicator.ApplyEntityModifiers</page>, <page>duplicator.ApplyBoneModifiers</page> and finally  <page>ENTITY:PostEntityPaste</page> is called.\n\nThe constraints are then created with <page>duplicator.CreateConstraintFromTable</page>.",
        "arguments": [
          {
            "name": "Player",
            "type": "Player",
            "description": "The player who wants to create something"
          },
          {
            "name": "EntityList",
            "type": "table",
            "description": "A table of duplicator data to create the entities from"
          },
          {
            "name": "ConstraintList",
            "type": "table",
            "description": "A table of duplicator data to create the constraints from"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "List of created entities"
          },
          {
            "type": "table",
            "description": "List of created constraints"
          }
        ]
      },
      {
        "name": "SetLocalPos",
        "parent": "duplicator",
        "realms": [
          "client",
          "server"
        ],
        "description": "\"When a copy is copied it will be translated according to these.\nIf you set them - make sure to set them back to 0 0 0!\"",
        "arguments": [
          {
            "name": "v",
            "type": "Vector",
            "description": "The position to offset all pastes from"
          }
        ]
      },
      {
        "name": "WorkoutSize",
        "parent": "duplicator",
        "realms": [
          "server"
        ],
        "description": "Works out the AABB size of the duplication",
        "arguments": [
          {
            "name": "Ents",
            "type": "table",
            "description": "A table of entity duplication datums."
          }
        ],
        "returnValues": [
          {
            "type": "vector",
            "name": "Mins",
            "description": "AABB mins vector"
          },
          {
            "type": "vector",
            "name": "Maxs",
            "description": "AABB maxs vector"
          }
        ]
      }
    ]
  },
  {
    "name": "effects",
    "description": "The effects library allows you to manually add scripted effects.",
    "functions": [
      {
        "name": "GetList",
        "parent": "effects",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Returns a list of all Lua-defined effects.",
        "returnValues": [
          {
            "type": "table",
            "description": "The effects table."
          }
        ]
      }
    ]
  },
  {
    "name": "engine",
    "functions": [
      {
        "name": "GetDemoPlaybackTick",
        "parent": "engine",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Current tick of currently loaded demo.\n\nIf not playing a demo, it will return amount of ticks since last demo playback.",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of ticks of currently loaded demo."
          }
        ]
      },
      {
        "name": "LightStyle",
        "parent": "engine",
        "realms": [
          "server"
        ],
        "description": "This is a direct binding to the function `engine->LightStyle`. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. You’ll need to call <page>render.RedownloadAllLightmaps</page> clientside to refresh the lightmaps to this new color.\n\n<bug issue=\"3626\">Calling this function with arguments 0 and \"a\" will cause dynamic lights such as those produced by the Light tool to stop working.</bug>",
        "arguments": [
          {
            "name": "lightstyle",
            "type": "number",
            "description": "The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0."
          },
          {
            "name": "pattern",
            "type": "string",
            "description": "The pattern to change the lightstyle to. `a` is the darkest, `z` is the brightest. You can use stuff like \"abcxyz\" to make flashing patterns. The normal brightness for a map is `m`. Values over `z` are allowed, `~` for instance."
          }
        ]
      },
      {
        "name": "SetMounted",
        "parent": "engine",
        "realms": [
          "menu"
        ],
        "description": "Sets the mounting options for mountable content.",
        "arguments": [
          {
            "name": "depotID",
            "type": "string",
            "description": "The depot id of the game to mount."
          },
          {
            "name": "doMount",
            "type": "boolean",
            "description": "The mount state, true to mount, false to unmount"
          }
        ]
      },
      {
        "name": "TickCount",
        "parent": "engine",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the number of ticks since the game server started.",
        "returnValues": [
          {
            "type": "number",
            "description": "Number of ticks since the game server started."
          }
        ]
      },
      {
        "name": "TickInterval",
        "parent": "engine",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the number of seconds between each gametick.",
        "returnValues": [
          {
            "type": "number",
            "description": "Number of seconds between each gametick."
          }
        ]
      }
    ]
  },
  {
    "name": "ents",
    "description": "The ents library provides functions for creating and finding entities in the game.",
    "functions": [
      {
        "name": "CreateClientProp",
        "parent": "ents",
        "realms": [
          "client"
        ],
        "description": "Creates a clientside only prop. See also <page>Global.ClientsideModel</page>.\n\n\nFor physics to work you **must** use the _model_ argument, a simple `SetModel` call will not be enough.\n<bug issue=\"861\">Parented clientside prop will become detached if the parent entity leaves the PVS. **A workaround is available on its github page.**</bug>",
        "arguments": [
          {
            "name": "model",
            "type": "string",
            "default": "models/error.mdl",
            "description": "The model for the entity to be created.\n<warning>Model must be precached with <page>util.PrecacheModel</page> on the server before usage.</warning>"
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "Created entity (`C_PhysPropClientside`)."
          }
        ]
      },
      {
        "name": "FindByName",
        "parent": "ents",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets all entities with the given hammer targetname. This works internally by iterating over <page>ents.GetAll</page>.\n\nDoesn't do anything on client.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The targetname to look for"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table of all found entities"
          }
        ]
      },
      {
        "name": "FindInBox",
        "parent": "ents",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns all entities within the specified box.\n\n<note>Clientside entities will not be returned by this function.</note>\n\n<warning>There is a limit of 512 entities for the output!</warning>",
        "arguments": [
          {
            "name": "boxMins",
            "type": "Vector",
            "description": "The box minimum coordinates."
          },
          {
            "name": "boxMaxs",
            "type": "Vector",
            "description": "The box maximum coordinates."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table of all found entities."
          }
        ]
      },
      {
        "name": "FindInPVS",
        "parent": "ents",
        "realms": [
          "server"
        ],
        "description": "Finds all entities that lie within a [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\").\n\n<note>The function won't take in to account <page>Global.AddOriginToPVS</page> and the like.</note>",
        "arguments": [
          {
            "name": "viewPoint",
            "type": "any",
            "description": "<page>Entity</page> or <page>Vector</page> to find entities within the PVS of. If a player is given, this function will use the player's view entity."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "The found <page>Entity</page>s."
          }
        ]
      }
    ]
  },
  {
    "name": "file",
    "functions": [
      {
        "name": "Append",
        "parent": "file",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Appends a file relative to the `data` folder.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The file's name."
          },
          {
            "name": "content",
            "type": "string",
            "description": "The content which should be appended to the file."
          }
        ]
      },
      {
        "name": "IsDir",
        "parent": "file",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns whether the given file is a directory or not.",
        "arguments": [
          {
            "name": "fileName",
            "type": "string",
            "description": "The file or directory's name."
          },
          {
            "name": "gamePath",
            "type": "string",
            "description": "The path to look for the files and directories in. See <page text=\"this list\">File_Search_Paths</page> for a list of valid paths."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` if the given path is a directory or `false` if it's a file."
          }
        ]
      },
      {
        "name": "Open",
        "parent": "file",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Attempts to open a file with the given mode.",
        "arguments": [
          {
            "name": "fileName",
            "type": "string",
            "description": "The files name. See <page>file.Write</page> for details on filename restrictions when writing to files."
          },
          {
            "name": "fileMode",
            "type": "string",
            "description": "The mode to open the file in. Possible values are:\n* **r** - read mode\n* **w** - write mode\n* **a** - append mode\n* **rb** - binary read mode\n* **wb** - binary write mode\n* **ab** - binary append mode"
          },
          {
            "name": "gamePath",
            "type": "string",
            "description": "The path to look for the files and directories in. See <page text=\"this list\">File_Search_Paths</page> for a list of valid paths."
          }
        ],
        "returnValues": [
          {
            "type": "file_class",
            "name": "File",
            "description": "The opened file object, or `nil` if it failed to open due to it not existing or being used by another process."
          }
        ]
      }
    ]
  },
  {
    "name": "game",
    "functions": [
      {
        "name": "AddParticles",
        "parent": "game",
        "realms": [
          "client",
          "server"
        ],
        "description": "Loads a particle file. Individual particle systems will still need to be precached with <page>Global.PrecacheParticleSystem</page>.\n\n<note>You will still need to call this function clientside regardless if you create the particle effects serverside.</note>",
        "arguments": [
          {
            "name": "particleFileName",
            "type": "string",
            "description": "The path of the file to add. Must be `(file).pcf`."
          }
        ]
      },
      {
        "name": "CleanUpMap",
        "parent": "game",
        "realms": [
          "client",
          "server"
        ],
        "description": "If called serverside it will remove **ALL** entities which were not created by the map (not players or weapons held by players).\nIt won't remove Entities who have the <page text=\"EFL_KEEP_ON_RECREATE_ENTITIES\">enums/EFL</page> Flag set.\n\nOn the client it will remove decals, sounds, gibs, dead NPCs, and entities created via <page>ents.CreateClientProp</page>.\n\nThis function calls <page>GM:PreCleanupMap</page> before cleaning up the map and <page>GM:PostCleanupMap</page> after cleaning up the map.\n\n<bug issue=\"1142\">Calling this in a <page>ENTITY:StartTouch</page> or <page>ENTITY:Touch</page> hook will crash the game.</bug>\n\n<bug issue=\"2874\">Calling this destroys all BASS streams.</bug>\n\n<bug issue=\"3637\">This can crash when removing _firesmoke entities. **You can use the example below to workaround this issue.**</bug>",
        "arguments": [
          {
            "name": "dontSendToClients",
            "type": "boolean",
            "default": "false",
            "description": "If set to `true`, don't run this functions on all clients."
          },
          {
            "name": "extraFilters",
            "type": "table",
            "default": "{}",
            "description": "Entity classes not to reset during cleanup."
          }
        ]
      },
      {
        "name": "GetAmmoID",
        "parent": "game",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the ammo type ID for given ammo type name.\n\nSee <page>game.GetAmmoName</page> for reverse.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the ammo type to look up ID of"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The ammo type ID of given ammo type name, or -1 if not found"
          }
        ]
      },
      {
        "name": "GetAmmoName",
        "parent": "game",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the ammo name for given ammo type ID.\n\nSee <page>game.GetAmmoID</page> for reverse.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "Ammo ID to retrieve the name of. Starts from 1."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The name of given ammo type ID or nil if ammo type ID is invalid."
          }
        ]
      },
      {
        "name": "GetGlobalState",
        "parent": "game",
        "realms": [
          "server"
        ],
        "description": "Returns whether a Global State is off, active or dead ( inactive )\n\nSee <page>Global States</page> for more information.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the Global State to retrieve the state of.\n\nIf the Global State by that name does not exist, **GLOBAL_DEAD** will be returned.\n\nSee <page>Global States</page> for a list of default global states."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The state of the Global State. See <page>Enums/GLOBAL</page>"
          }
        ]
      },
      {
        "name": "GetMapVersion",
        "parent": "game",
        "realms": [
          "server"
        ],
        "description": "Returns the revision (Not to be confused with [VBSP Version](https://developer.valvesoftware.com/wiki/Source_BSP_File_Format#Versions)) of the current map.",
        "returnValues": [
          {
            "type": "number",
            "description": "Revision of the currently loaded map."
          }
        ]
      },
      {
        "name": "IsDedicated",
        "parent": "game",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns true if the server is a dedicated server, false if it is a listen server or a singleplayer game.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is the server dedicated or not."
          }
        ]
      },
      {
        "name": "RemoveRagdolls",
        "parent": "game",
        "realms": [
          "client",
          "server"
        ],
        "description": "Removes all the clientside ragdolls."
      }
    ]
  },
  {
    "name": "gamemode",
    "functions": [
      {
        "name": "Register",
        "parent": "gamemode",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal>Called by the engine when a gamemode is being loaded.",
        "arguments": [
          {
            "name": "gm",
            "type": "table",
            "description": "Your GM table"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of your gamemode, lowercase, no spaces."
          },
          {
            "name": "derived",
            "type": "string",
            "description": "The gamemode name that your gamemode is derived from"
          }
        ]
      }
    ]
  },
  {
    "name": "gui",
    "functions": [
      {
        "name": "InternalCursorMoved",
        "parent": "gui",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Simulates a mouse move with the given deltas.",
        "arguments": [
          {
            "name": "deltaX",
            "type": "number",
            "description": "The movement delta on the x axis."
          },
          {
            "name": "deltaY",
            "type": "number",
            "description": "The movement delta on the y axis."
          }
        ]
      },
      {
        "name": "MouseX",
        "parent": "gui",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns x component of the mouse position.",
        "returnValues": [
          {
            "type": "number",
            "description": "mouseX"
          }
        ]
      }
    ]
  },
  {
    "name": "halo",
    "functions": [
      {
        "name": "Render",
        "parent": "halo",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Renders a halo according to the specified table, only used internally, called from a <page>GM:PostDrawEffects</page> hook added by the halo library.",
        "arguments": [
          {
            "name": "entry",
            "type": "table",
            "description": "Table with info about the halo to draw."
          }
        ]
      }
    ]
  },
  {
    "name": "hook",
    "functions": [
      {
        "name": "Call",
        "parent": "hook",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Calls all hooks associated with the given event until one returns something other than `nil`, and then returns that data.\n\nIn almost all cases, you should use <page>hook.Run</page> instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.",
        "arguments": [
          {
            "name": "eventName",
            "type": "string",
            "description": "The event to call hooks for."
          },
          {
            "name": "gamemodeTable",
            "type": "table",
            "description": "If the gamemode is specified, the gamemode hook within will be called, otherwise not."
          },
          {
            "name": "args",
            "type": "vararg",
            "description": "The arguments to be passed to the hooks."
          }
        ],
        "returnValues": [
          {
            "type": "vararg",
            "description": "Return data from called hooks. Limited to **6** return values."
          }
        ]
      }
    ]
  },
  {
    "name": "http",
    "description": "The http library allows either the server or client to communicate with external websites via HTTP, both `GET` (<page>http.Fetch</page>) and `POST` (<page>http.Post</page>) are supported. A more powerful & advanced method can be used via the global <page>Global.HTTP</page> function."
  },
  {
    "name": "input",
    "functions": [
      {
        "name": "GetKeyCode",
        "parent": "input",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the button code from a button name. This is opposite of <page>input.GetKeyName</page>.",
        "arguments": [
          {
            "name": "button",
            "type": "string",
            "description": "The internal button name, such as <key>E</key> or <key>SHIFT</key>."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The button code, see <page>Enums/BUTTON_CODE</page>."
          }
        ]
      },
      {
        "name": "IsButtonDown",
        "parent": "input",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether the specified button code is down.\n\nUnlike <page>input.IsKeyDown</page> this can also detect joystick presses from <page>Enums/JOYSTICK</page>",
        "arguments": [
          {
            "name": "button",
            "type": "number",
            "description": "The button, valid values are in the range of <page>Enums/BUTTON_CODE</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is the button down"
          }
        ]
      },
      {
        "name": "LookupKeyBinding",
        "parent": "input",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the bind string that the given key is bound to.",
        "arguments": [
          {
            "name": "key",
            "type": "number",
            "description": "Key from <page>Enums/BUTTON_CODE</page>"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The bind string of the given key."
          }
        ]
      }
    ]
  },
  {
    "name": "jit",
    "functions": [
      {
        "name": "attach",
        "parent": "jit",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "You can attach callbacks to a number of compiler events with jit.attach. The callback can be called:\n\n* when a function has been compiled to bytecode (\"bc\");\n* when trace recording starts or stops (\"trace\");\n* as a trace is being recorded (\"record\");\n* or when a trace exits through a side exit (\"texit\").\n\nSet a callback with jit.attach(callback, \"event\") and clear the same callback with jit.attach(callback)\n\n<warning>This function isn't officially documented on LuaJIT wiki, use it at your own risk.</warning>\n<warning>Using these constantly (especially bytecode) can be very performance heavy due to the constant stream of data being compiled at a time.</warning>",
        "arguments": [
          {
            "name": "callback",
            "type": "function",
            "description": "The callback function.\n\nThe arguments passed to the callback depend on the event being reported:\n\n* \"bc\":\n<page>function</page> func - The function that's just been recorded\n\n\n\n* \"trace\":\n<page>string</page> what - description of the trace event: \"flush\", \"start\", \"stop\", \"abort\". Available for all events.\n\n\n<page>number</page> tr - The trace number. Not available for flush.\n\n\n<page>function</page> func - The function being traced. Available for start and abort.\n\n\n<page>number</page> pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.\n\n\n<page>number</page> otr - start: the parent trace number if this is a side trace, abort: abort code\n\n\n<page>string</page> oex - start: the exit number for the parent trace, abort: abort reason (string)\n\n\n\n* \"record\":\n<page>number</page> tr - The trace number. Not available for flush.\n\n\n<page>function</page> func - The function being traced. Available for start and abort.\n\n\n<page>number</page> pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.\n\n\n<page>number</page> depth  - The depth of the inlining of the current bytecode.\n\n\n\n* \"texit\":\n<page>number</page> tr - The trace number. Not available for flush.\n\n\n<page>number</page> ex - The exit number\n\n\n<page>number</page> ngpr - The number of general-purpose and floating point registers that are active at the exit.\n\n\n<page>number</page> nfpr - The number of general-purpose and floating point registers that are active at the exit."
          },
          {
            "name": "event",
            "type": "string",
            "description": "The event to hook into."
          }
        ]
      },
      {
        "name": "util.funck",
        "parent": "jit",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Gets a constant at a certain index in a function.\n<warning>This function isn't officially documented on LuaJIT wiki, use it at your own risk.</warning>\n<note>Numbers constants goes from 0 (included) to n-1, n being the value of nconsts in <page>jit.util.funcinfo</page> in other words, the consts goes from (nconsts-1) to -n</note>\n<note>This function only works for Lua defined functions.</note>",
        "arguments": [
          {
            "name": "func",
            "type": "function",
            "description": "Function to get constant from"
          },
          {
            "name": "index",
            "type": "number",
            "description": "Constant index (counting down from the top of the function at -1)"
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The constant found.\n\n<note>This will return a <page>proto</page> for functions that are created inside the target function - see Example 2.</note>"
          }
        ]
      },
      {
        "name": "util.tracemc",
        "parent": "jit",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "arguments": [
          {
            "name": "tr",
            "type": "number"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "mcode"
          },
          {
            "type": "number",
            "description": "address"
          },
          {
            "type": "number",
            "description": "loop"
          }
        ]
      },
      {
        "name": "version_num",
        "parent": "jit",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "A variable containing the version number of the LuaJIT core.",
        "returnValues": [
          {
            "type": "number",
            "description": "The version number.  Version `xx.yy.zz` is represented by the decimal number `xxyyzz`. In GMod this is `20004`. On x86-64 branch it's `20100`."
          }
        ]
      }
    ]
  },
  {
    "name": "killicon",
    "functions": [
      {
        "name": "Add",
        "parent": "killicon",
        "realms": [
          "client"
        ],
        "description": "Creates new kill icon using a texture.",
        "arguments": [
          {
            "name": "class",
            "type": "string",
            "description": "Weapon or entity class"
          },
          {
            "name": "texture",
            "type": "string",
            "description": "Path to the texture"
          },
          {
            "name": "color",
            "type": "table",
            "description": "Color of the kill icon"
          }
        ]
      },
      {
        "name": "AddFont",
        "parent": "killicon",
        "realms": [
          "client"
        ],
        "description": "Adds kill icon for given weapon/entity class using special font.",
        "arguments": [
          {
            "name": "class",
            "type": "string",
            "description": "Weapon or entity class."
          },
          {
            "name": "font",
            "type": "string",
            "description": "Font to be used."
          },
          {
            "name": "symbol",
            "type": "string",
            "description": "The symbol to be used."
          },
          {
            "name": "color",
            "type": "table",
            "description": "Color of the killicon."
          },
          {
            "name": "heightScale ",
            "type": "number",
            "default": "1",
            "description": "Used internally to correct certain killicons to more closely match their visual size."
          }
        ]
      }
    ]
  },
  {
    "name": "language",
    "description": "The language library is used for translation."
  },
  {
    "name": "list",
    "description": "The list library allows you add and retrieve values to and from lists. The list library is basically a fancy wrapper for a table, but with much more limited functionality. See <page>Default Lists</page> for a page of default Sandbox lists.",
    "functions": [
      {
        "name": "GetForEdit",
        "parent": "list",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the actual table of the list stored at identifier. Modifying this will affect the stored list",
        "arguments": [
          {
            "name": "identifier",
            "type": "string",
            "description": "The list identifier"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "The actual list"
          }
        ]
      },
      {
        "name": "HasEntry",
        "parent": "list",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns true if the list contains the given key.\n\nFor a function that looks for values and not keys see <page>list.Contains</page>.",
        "arguments": [
          {
            "name": "list",
            "type": "string",
            "description": "List to search through"
          },
          {
            "name": "key",
            "type": "any",
            "description": "The key to test"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns true if the list contains the key, false otherwise"
          }
        ]
      }
    ]
  },
  {
    "name": "markup",
    "functions": [
      {
        "name": "Parse",
        "parent": "markup",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Parses markup into a <page>MarkupObject</page>. Currently, this only supports fonts and colors as demonstrated in the example.",
        "arguments": [
          {
            "name": "markup",
            "type": "string",
            "description": "The markup to be parsed."
          },
          {
            "name": "maxWidth",
            "type": "number",
            "default": "nil",
            "description": "The max width of the output"
          }
        ],
        "returnValues": [
          {
            "type": "MarkupObject",
            "description": "The parsed markup object ready to be drawn via <page>MarkupObject:Draw</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "math",
    "functions": [
      {
        "name": "atan2",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "functions like <page>math.atan</page>(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.\n\n<note>The Y argument comes first!</note>",
        "arguments": [
          {
            "name": "y",
            "type": "number",
            "description": "Y coordinate."
          },
          {
            "name": "x",
            "type": "number",
            "description": "X coordinate."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The angle of the line from (0, 0) to (x, y) in radians, in the left-open interval (-pi, pi]"
          }
        ]
      },
      {
        "name": "BSplinePoint",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Basic code for Bezier-Spline algorithm.",
        "arguments": [
          {
            "name": "tDiff",
            "type": "number",
            "description": "From 0 to 1, where alongside the spline the point will be."
          },
          {
            "name": "tPoints",
            "type": "table",
            "description": "A table of <page>Vector</page>s. The amount cannot be less than 4."
          },
          {
            "name": "tMax",
            "type": "number",
            "description": "Just leave this at 1."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "Point on Bezier curve, related to tDiff."
          }
        ]
      },
      {
        "name": "calcBSplineN",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "<internal>Use <page>math.BSplinePoint</page> instead.</internal>\n\nBasic code for Bezier-Spline algorithm, helper function for <page>math.BSplinePoint</page>.",
        "arguments": [
          {
            "name": "i",
            "type": "number"
          },
          {
            "name": "k",
            "type": "number",
            "description": "<bug pull=\"1477\">Sending in a value < 1 will result in an infinite loop.</bug>"
          },
          {
            "name": "t",
            "type": "number"
          },
          {
            "name": "tinc",
            "type": "number"
          }
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "CubicBezier",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Lerp point between 4 control points with cubic bezier.\n\nSee <page>math.QuadraticBezier</page> for a similar function which works with 3 control points.",
        "arguments": [
          {
            "name": "frac",
            "type": "number",
            "description": "The fraction for finding the result. This number is clamped between 0 and 1."
          },
          {
            "name": "p0",
            "type": "Vector",
            "description": "First control point"
          },
          {
            "name": "p1",
            "type": "Vector",
            "description": "First tangent"
          },
          {
            "name": "p2",
            "type": "Vector",
            "description": "Second tangent"
          },
          {
            "name": "p3",
            "type": "Vector",
            "description": "Second control point"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "Point between control points at the specified fraction"
          }
        ]
      },
      {
        "name": "DistanceSqr",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the squared difference between two points in 2D space. This is computationally faster than <page>math.Distance</page>.",
        "arguments": [
          {
            "name": "x1",
            "type": "number",
            "description": "X position of first point"
          },
          {
            "name": "y1",
            "type": "number",
            "description": "Y position of first point"
          },
          {
            "name": "x2",
            "type": "number",
            "description": "X position of second point"
          },
          {
            "name": "y2",
            "type": "number",
            "description": "Y position of second point"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The squared distance between the two points."
          }
        ]
      },
      {
        "name": "InBounce",
        "parent": "math.ease",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Eases in like a bouncy ball.\n<note>This doesn't work properly when used with <page>Global.Lerp</page> as it clamps the fraction between 0 and 1. Using your own version of <page>Global.Lerp</page> that is unclamped would be necessary instead.</note>",
        "arguments": [
          {
            "name": "fraction",
            "type": "number",
            "description": "Fraction of the progress to ease, from 0 to 1"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "\"Eased\" Value"
          }
        ]
      },
      {
        "name": "InCubic",
        "parent": "math.ease",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Eases in by cubing the fraction.",
        "arguments": [
          {
            "name": "fraction",
            "type": "number",
            "description": "Fraction of the progress to ease, from 0 to 1"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "\"Eased\" Value, from 0 to 1"
          }
        ]
      },
      {
        "name": "OutExpo",
        "parent": "math.ease",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Eases out using an exponential equation with a base of 2 and where the fraction is used in the exponent.",
        "arguments": [
          {
            "name": "fraction",
            "type": "number",
            "description": "Fraction of the progress to ease, from 0 to 1"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "\"Eased\" Value, from 0 to 1"
          }
        ]
      },
      {
        "name": "OutQuad",
        "parent": "math.ease",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Eases out by squaring the fraction.",
        "arguments": [
          {
            "name": "fraction",
            "type": "number",
            "description": "Fraction of the progress to ease, from 0 to 1"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "\"Eased\" Value, from 0 to 1"
          }
        ]
      },
      {
        "name": "OutQuart",
        "parent": "math.ease",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Eases out by raising the fraction to the power of 4.",
        "arguments": [
          {
            "name": "fraction",
            "type": "number",
            "description": "Fraction of the progress to ease, from 0 to 1"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "\"Eased\" Value, from 0 to 1"
          }
        ]
      },
      {
        "name": "EaseInOut",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Calculates the progress of a value fraction, taking in to account given easing fractions",
        "arguments": [
          {
            "name": "progress",
            "type": "number",
            "description": "Fraction of the progress to ease, from 0 to 1"
          },
          {
            "name": "easeIn",
            "type": "number",
            "description": "Fraction of how much easing to begin with"
          },
          {
            "name": "easeOut",
            "type": "number",
            "description": "Fraction of how much easing to end with"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "\"Eased\" Value, from 0 to 1"
          }
        ]
      },
      {
        "name": "exp",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the x power of the Euler constant.",
        "arguments": [
          {
            "name": "exponent",
            "type": "number",
            "description": "The exponent for the function."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "e to the specified power"
          }
        ]
      },
      {
        "name": "frexp",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "**Lua reference description**: Returns `m` and `e` such that `x = m2e`, `e` is an integer and the absolute value of `m` is in the range ((0.5, 1) (or zero when x is zero).\n\nUsed to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range `1/2` (**inclusive**) to `1` (**exclusive**) and the second is an integer exponent.\n\nThe result is such that `x = m*2^e`.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The value to get the normalized fraction and the exponent from."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "m, multiplier - between `0.5` and `1`."
          },
          {
            "type": "number",
            "description": "e, exponent - **always** an integer."
          }
        ]
      },
      {
        "name": "huge",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "A variable that effectively represents infinity, in the sense that in any numerical comparison every number will be less than this.\n\nFor example, if `x` is a number, `x > math.huge` will **NEVER** be `true` except in the case of overflow (see below).\n\nLua will consider any number greater than or equal to `2^1024` (the exponent limit of a [double](http://en.wikipedia.org/wiki/Double-precision_floating-point_format)) as `inf` and hence equal to this.",
        "returnValues": [
          {
            "type": "number",
            "description": "The effective infinity."
          }
        ]
      },
      {
        "name": "mod",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "<deprecated>This is removed in Lua versions later than what GMod is currently using. You should use the % operator or <page>math.fmod</page> instead.</deprecated>\n\nReturns the modulus of the specified values. Same as <page>math.fmod</page>.",
        "arguments": [
          {
            "name": "base",
            "type": "number",
            "description": "The base value"
          },
          {
            "name": "modulator",
            "type": "number",
            "description": "Modulator"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The calculated modulus"
          }
        ]
      },
      {
        "name": "NormalizeAngle",
        "parent": "math",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Normalizes angle, so it returns value between -180 and 180.",
        "arguments": [
          {
            "name": "angle",
            "type": "number",
            "description": "The angle to normalize, in degrees."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The normalized angle, in the range of -180 to 180 degrees."
          }
        ]
      }
    ]
  },
  {
    "name": "matproxy",
    "functions": [
      {
        "name": "ProxyList",
        "parent": "matproxy",
        "realms": [
          "client"
        ],
        "description": "A list of all material proxies registered with <page>matproxy.Add</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The list of all material proxies."
          }
        ]
      }
    ]
  },
  {
    "name": "menubar",
    "functions": [
      {
        "name": "IsParent",
        "parent": "menubar",
        "realms": [
          "client"
        ],
        "description": "Checks if the supplied panel is parent to the menubar",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to check"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is parent or not"
          }
        ]
      }
    ]
  },
  {
    "name": "mesh",
    "functions": [
      {
        "name": "Normal",
        "parent": "mesh",
        "realms": [
          "client"
        ],
        "description": "Sets the normal to be used for the next vertex.",
        "arguments": [
          {
            "name": "normal",
            "type": "Vector",
            "description": "The normal of the vertex."
          }
        ]
      },
      {
        "name": "Quad",
        "parent": "mesh",
        "realms": [
          "client"
        ],
        "description": "Draws a quad using 4 vertices.",
        "arguments": [
          {
            "name": "vertex1",
            "type": "Vector",
            "description": "The first vertex."
          },
          {
            "name": "vertex2",
            "type": "Vector",
            "description": "The second vertex."
          },
          {
            "name": "vertex3",
            "type": "Vector",
            "description": "The third vertex."
          },
          {
            "name": "vertex4",
            "type": "Vector",
            "description": "The fourth vertex."
          }
        ]
      },
      {
        "name": "TangentS",
        "parent": "mesh",
        "realms": [
          "client"
        ],
        "description": "Sets the s tangent to be used.\n\nThis function actually does nothing.",
        "arguments": [
          {
            "name": "sTanger",
            "type": "Vector",
            "description": "The s tangent."
          }
        ]
      },
      {
        "name": "VertexCount",
        "parent": "mesh",
        "realms": [
          "client"
        ],
        "description": "Returns the amount of vertex that have yet been pushed.",
        "returnValues": [
          {
            "type": "number",
            "description": "vertexCount"
          }
        ]
      }
    ]
  },
  {
    "name": "motionsensor",
    "functions": [
      {
        "name": "GetSkeleton",
        "parent": "motionsensor",
        "realms": [
          "client"
        ],
        "description": "Returns players skeletal data if they are using Kinect. See <page>Using The Kinect</page> and <page>Kinect developing</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The skeleton data."
          }
        ]
      },
      {
        "name": "ProcessPositionTable",
        "parent": "motionsensor",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal> Used internally by <page>motionsensor.BuildSkeleton</page>. See <page>Using The Kinect</page> and <page>Kinect developing</page>.",
        "arguments": [
          {
            "name": "translator",
            "type": "table"
          },
          {
            "name": "sensor",
            "type": "table"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Positions. if `!translator.PositionTable` then return - `{}`"
          }
        ]
      }
    ]
  },
  {
    "name": "navmesh",
    "functions": [
      {
        "name": "AddWalkableSeed",
        "parent": "navmesh",
        "realms": [
          "server"
        ],
        "description": "Add this position and normal to the list of walkable positions, used before map generation with <page>navmesh.BeginGeneration</page>",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The terrain position."
          },
          {
            "name": "dir",
            "type": "Vector",
            "description": "The normal of this terrain position."
          }
        ]
      },
      {
        "name": "GetAllNavAreas",
        "parent": "navmesh",
        "realms": [
          "server"
        ],
        "description": "Returns an integer indexed table of all <page>CNavArea</page>s on the current map. If the map doesn't have a navmesh generated then this will return an empty table.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of all the <page>CNavArea</page>s on the current map."
          }
        ]
      },
      {
        "name": "SetMarkedArea",
        "parent": "navmesh",
        "realms": [
          "server"
        ],
        "description": "Sets the <page>CNavArea</page> as marked, so it can be used with editing console commands.",
        "arguments": [
          {
            "name": "area",
            "type": "CNavArea",
            "description": "The <page>CNavArea</page> to set as the marked area."
          }
        ]
      }
    ]
  },
  {
    "name": "net",
    "functions": [
      {
        "name": "ReadEntity",
        "parent": "net",
        "realms": [
          "client",
          "server"
        ],
        "description": "Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefore `NULL` if it is outside of the players [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\") or was already removed.\n\n<warning>You **must** read information in same order as you write it.</warning>",
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity, or `Entity(0)` if no entity could be read."
          }
        ]
      },
      {
        "name": "ReadMatrix",
        "parent": "net",
        "realms": [
          "client",
          "server"
        ],
        "description": "Reads a <page>VMatrix</page> from the received net message.\n<warning>You **must** read information in same order as you write it.</warning>",
        "returnValues": [
          {
            "type": "VMatrix",
            "description": "The matrix, or an empty matrix if no matrix could be read."
          }
        ]
      },
      {
        "name": "Receive",
        "parent": "net",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adds a net message handler. Only one receiver can be used to receive the net message.\n<note>The message-name is converted to lower-case so the message-names \"`BigBlue`\" and \"`bigblue`\" would be equal.</note>\n<warning>You **must** put this function **outside** of any other function or hook for it to work properly unless you know what you are doing!\n\nYou **must** read information in the same order as you write it.\n\nEach net message has a length limit of **64KB**!</warning>",
        "arguments": [
          {
            "name": "messageName",
            "type": "string",
            "description": "The message name to hook to."
          },
          {
            "name": "callback",
            "type": "function",
            "description": "The function to be called if the specified message was received. Arguments are:\n\n* <page>number</page> len - Length of the message, in bits.<br>\n* <page>Player</page> ply - The player that sent the message, works **only** server-side."
          }
        ]
      },
      {
        "name": "SendOmit",
        "parent": "net",
        "realms": [
          "server"
        ],
        "description": "Sends the current message to all except the specified, or to all except all players in the table.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player(s) to **NOT** send the message to. Can be a table of players."
          }
        ]
      },
      {
        "name": "SendPVS",
        "parent": "net",
        "realms": [
          "server"
        ],
        "description": "Sends the message to all players in the [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\") of the position, or, more simply said, sends the message to players that can potentially see this position.",
        "arguments": [
          {
            "name": "position",
            "type": "Vector",
            "description": "Position that must be in players' visibility set."
          }
        ]
      },
      {
        "name": "WritePlayer",
        "parent": "net",
        "realms": [
          "client",
          "server"
        ],
        "description": "Appends a player entity to the current net message using its <page>Entity:EntIndex</page>. This saves a small amount of network bandwidth over <page>net.WriteEntity</page>.\n\nSee <page>net.ReadPlayer</page> for the function to read the entity.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player to be sent."
          }
        ]
      },
      {
        "name": "WriteString",
        "parent": "net",
        "realms": [
          "client",
          "server"
        ],
        "description": "Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is **65532 characters**.",
        "arguments": [
          {
            "name": "string",
            "type": "string",
            "description": "The string to be sent."
          }
        ]
      }
    ]
  },
  {
    "name": "numpad",
    "functions": [
      {
        "name": "Activate",
        "parent": "numpad",
        "realms": [
          "server"
        ],
        "description": "Activates numpad key owned by the player",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose numpad should be simulated"
          },
          {
            "name": "key",
            "type": "number",
            "description": "The key to press, see <page>Enums/KEY</page>"
          },
          {
            "name": "isButton",
            "type": "boolean",
            "description": "Should this keypress pretend to be a from a gmod_button? (causes <page>numpad.FromButton</page> to return true)"
          }
        ]
      },
      {
        "name": "Deactivate",
        "parent": "numpad",
        "realms": [
          "server"
        ],
        "description": "Deactivates numpad key owned by the player",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose numpad should be simulated"
          },
          {
            "name": "key",
            "type": "number",
            "description": "The key to press, corresponding to <page>Enums/KEY</page>"
          },
          {
            "name": "isButton",
            "type": "boolean",
            "description": "Should this keypress pretend to be a from a gmod_button? (causes <page>numpad.FromButton</page> to return true)"
          }
        ]
      },
      {
        "name": "OnDown",
        "parent": "numpad",
        "realms": [
          "server"
        ],
        "description": "Calls a function registered with <page>numpad.Register</page> when a player presses specified key.\n\nSee for key released action: <page>numpad.OnUp</page>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose numpad should be watched"
          },
          {
            "name": "key",
            "type": "number",
            "description": "The key, corresponding to <page>Enums/KEY</page>"
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name of the function to run, corresponding with the one used in <page>numpad.Register</page>"
          },
          {
            "name": "...",
            "type": "vararg",
            "description": "Arguments to pass to the function passed to <page>numpad.Register</page>."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The impulse ID"
          }
        ]
      },
      {
        "name": "Remove",
        "parent": "numpad",
        "realms": [
          "server"
        ],
        "description": "Removes a function added by either <page>numpad.OnUp</page> or <page>numpad.OnDown</page>",
        "arguments": [
          {
            "name": "ID",
            "type": "number",
            "description": "The impulse ID returned by <page>numpad.OnUp</page> or <page>numpad.OnDown</page>"
          }
        ]
      }
    ]
  },
  {
    "name": "os",
    "functions": [
      {
        "name": "date",
        "parent": "os",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the date/time as a formatted string or in a table.",
        "arguments": [
          {
            "name": "format",
            "type": "string",
            "description": "The format string.\n\nIf this is equal to `*t` or `!*t` then this function will return a <page>Structures/DateData</page>, otherwise it will return a string.\n\nIf this starts with an `!`, the returned data will use the UTC timezone rather than the local timezone.\n\nSee http://www.mkssoftware.com/docs/man3/strftime.3.asp for available format flags.\n\n<bug issue=\"329\">**Not all flags are available on all operating systems** and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the **#** flags also crashes the game on Windows.</bug>\n\nKnown formats that work on all platforms:\n\n| Format | Description | Example of the output |\n|:------:|:-----------:|:---------------------:|\n| `%a` | Abbreviated weekday name | `Wed` |\n| `%A` | Full weekday name | `Wednesday` |\n| `%b` | Abbreviated month name | `Sep` |\n| `%B` | Full month name | `September` |\n| `%c` | Locale-appropriate date and time | Varies by platform and language settings |\n| `%d` | Day of the month [01-31] | `16` |\n| `%H` | Hour, using a 24-hour clock [00-23] | `23` |\n| `%I` | Hour, using a 12-hour clock [01-12] | `11` |\n| `%j` | Day of the year [001-365] | `259` |\n| `%m` | Month [01-12] | `09` |\n| `%M` | Minute [00-59] | `48` |\n| `%p` | Either `am` or `pm` | `pm` |\n| `%S` | Second [00-60] | `10` |\n| `%w` | Weekday [0-6 = Sunday-Saturday] | `3` |\n| `%W` | Week of the year [00-53] | `37` |\n| `%x` | Date (Same as `%m/%d/%y`) | `09/16/98` |\n| `%X` | Time (Same as `%H:%M:%S`) | `24:48:10` |\n| `%y` | Two-digit year [00-99] | `98` |\n| `%Y` | Full year | `1998` |\n| `%z` | Timezone | `-0300` |\n| `%%` | A percent sign | `%` |"
          },
          {
            "name": "time",
            "type": "number",
            "default": "os.time()",
            "description": "Time to use for the format."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Formatted date\n<note>This will be a <page>Structures/DateData</page> if the first argument equals to `*t` or `!*t`</note>"
          }
        ]
      },
      {
        "name": "difftime",
        "parent": "os",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Subtracts the second from the first value and rounds the result.",
        "arguments": [
          {
            "name": "timeA",
            "type": "number",
            "description": "The first value."
          },
          {
            "name": "timeB",
            "type": "number",
            "description": "The value to subtract."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "diffTime"
          }
        ]
      },
      {
        "name": "time",
        "parent": "os",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members.",
        "arguments": [
          {
            "name": "dateData",
            "type": "table",
            "default": "nil",
            "description": "Table to generate the time from. This table's data is interpreted as being in the local timezone. See <page>Structures/DateData</page>"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Seconds passed since Unix epoch"
          }
        ]
      }
    ]
  },
  {
    "name": "package",
    "description": "The package library is a standard Lua library, it's mainly for use with the module system built into Lua.",
    "functions": [
      {
        "name": "loaded",
        "parent": "package",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "A list of all loaded packages.",
        "returnValues": [
          {
            "type": "table",
            "description": "The list of all loaded packages."
          }
        ]
      }
    ]
  },
  {
    "name": "permissions",
    "description": "Used to ask player for various potentially dangerous permissions.",
    "functions": [
      {
        "name": "EnableVoiceChat",
        "parent": "permissions",
        "realms": [
          "client"
        ],
        "description": "Activates player's microphone as if they pressed the speak button themself. The player will be prompted with a confirmation window which grants permission temporarily/permanently(depending on checkbox state) for the connected server (revokable).\nThis is used for TTT's traitor voice channel.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "Enable or disable voice activity. `true` will run `+voicerecord` command, anything else `-voicerecord`."
          }
        ]
      },
      {
        "name": "GetAll",
        "parent": "permissions",
        "realms": [
          "menu"
        ],
        "description": "Returns all permissions per server. Permanent permissions are stored in `settings/permissions.bin`.",
        "returnValues": [
          {
            "type": "table",
            "name": "permissions",
            "description": "A table of permanent and temporary permissions granted for servers.\n\nExample structure:\n```lua\npermanent = {\n[\"123.123.123.123\"] = \"connect\" -- this server has a permission to connect player to any server even after restarting the game\n},\ntemporary = {\n[\"111.111.111.111\"] = \"voicerecord\" -- this server can enable voice activity on player during this game session\n}\n```"
          }
        ]
      },
      {
        "name": "Revoke",
        "parent": "permissions",
        "realms": [
          "menu"
        ],
        "description": "Revokes permission from the server.",
        "arguments": [
          {
            "name": "permission",
            "type": "string",
            "description": "Permission to revoke from the server."
          },
          {
            "name": "ip",
            "type": "string",
            "description": "IP of the server."
          }
        ]
      }
    ]
  },
  {
    "name": "player_manager",
    "functions": [
      {
        "name": "TranslateToPlayerModelName",
        "parent": "player_manager",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the simplified name for a valid model path of a player model.\n\nOpposite of <page>player_manager.TranslatePlayerModel</page>.",
        "arguments": [
          {
            "name": "model",
            "type": "string",
            "description": "The model path to a player model"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The simplified name for that model"
          }
        ]
      }
    ]
  },
  {
    "name": "player",
    "functions": [
      {
        "name": "CreateNextBot",
        "parent": "player",
        "realms": [
          "server"
        ],
        "description": "Similar to the serverside command \"bot\", this function creates a new Player bot with the given name. This bot will not obey to the usual \"bot_*\" commands, and it's the same bot base used in TF2 and CS:S.\n\nThe best way to control the behaviour of a Player bot right now is to use the <page>GM:StartCommand</page> hook and modify its input serverside.\n\n<note>Despite this Player being fake, it has to be removed from the server by using <page>Player:Kick</page> and **NOT** <page>Entity:Remove</page>.\nAlso keep in mind that these bots still use player slots, so you won't be able to spawn them in singleplayer!</note>\n\n<note>Any Bot created using this method will be considered UnAuthed by Garry's Mod</note>",
        "arguments": [
          {
            "name": "botName",
            "type": "string",
            "description": "The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.\n\nExample: \"Bot name test\", \"Bot name test(1)\"."
          }
        ],
        "returnValues": [
          {
            "type": "Player",
            "description": "The newly created Player bot. Returns NULL if there's no Player slots available to host it."
          }
        ]
      },
      {
        "name": "GetBySteamID64",
        "parent": "player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets the player with the specified SteamID64.\n<warning>Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.</warning>",
        "arguments": [
          {
            "name": "steamID64",
            "type": "string",
            "description": "The <page>Player:SteamID64</page> to find the player by."
          }
        ],
        "returnValues": [
          {
            "type": "Player",
            "description": "Player if one is found, false otherwise."
          }
        ]
      },
      {
        "name": "GetHumans",
        "parent": "player",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a table containing all human players (non-bot/AI).\n\nUnlike <page>player.GetAll</page>, this does not include bots.\n<note>This function returns a sequential table, meaning it should be looped with <page>Global.ipairs</page> instead of <page>Global.pairs</page> for efficiency reasons.</note>",
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing all human (non-bot/AI) players."
          }
        ]
      }
    ]
  },
  {
    "name": "presets",
    "functions": [
      {
        "name": "Remove",
        "parent": "presets",
        "realms": [
          "client"
        ],
        "description": "Removes a preset entry from a preset group.",
        "arguments": [
          {
            "name": "groupname",
            "type": "string",
            "description": "Preset group to remove from"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of preset to remove"
          }
        ]
      },
      {
        "name": "Rename",
        "parent": "presets",
        "realms": [
          "client"
        ],
        "description": "Renames preset.",
        "arguments": [
          {
            "name": "groupname",
            "type": "string",
            "description": "Preset group name"
          },
          {
            "name": "oldname",
            "type": "string",
            "description": "Old preset name"
          },
          {
            "name": "newname",
            "type": "string",
            "description": "New preset name"
          }
        ]
      }
    ]
  },
  {
    "name": "render",
    "functions": [
      {
        "name": "ClearBuffersObeyStencil",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Clears the current rendertarget for obeying the current stencil buffer conditions.",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "description": "Value of the **red** channel to clear the current rt with."
          },
          {
            "name": "g",
            "type": "number",
            "description": "Value of the **green** channel to clear the current rt with."
          },
          {
            "name": "b",
            "type": "number",
            "description": "Value of the **blue** channel to clear the current rt with."
          },
          {
            "name": "a",
            "type": "number",
            "description": "Value of the **alpha** channel to clear the current rt with."
          },
          {
            "name": "depth",
            "type": "boolean",
            "description": "Clear the depth buffer."
          }
        ]
      },
      {
        "name": "ComputePixelDiameterOfSphere",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Calculates diameter of a 3D sphere on a 2D screen.\n\n<rendercontext hook=\"false\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "point",
            "type": "Vector",
            "description": "The position of the sphere in 3D space."
          },
          {
            "name": "radius",
            "type": "number",
            "description": "The radius of the sphere in 3D space."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The diameter of the sphere in 2D screen space."
          }
        ]
      },
      {
        "name": "DrawBeam",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Draws textured beam.\n\n<rendercontext hook=\"false\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "startPos",
            "type": "Vector",
            "description": "Beam start position."
          },
          {
            "name": "endPos",
            "type": "Vector",
            "description": "Beam end position."
          },
          {
            "name": "width",
            "type": "number",
            "description": "The width of the beam."
          },
          {
            "name": "textureStart",
            "type": "number",
            "description": "The start coordinate of the texture used."
          },
          {
            "name": "textureEnd",
            "type": "number",
            "description": "The end coordinate of the texture used."
          },
          {
            "name": "color",
            "type": "table",
            "default": "Color( 255, 255, 255 )",
            "description": "The color to be used. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "DrawTextureToScreen",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Draws a texture over the whole screen.\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "arguments": [
          {
            "name": "tex",
            "type": "ITexture",
            "description": "The texture to draw"
          }
        ]
      },
      {
        "name": "DrawTextureToScreenRect",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Draws a textured rectangle.\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "arguments": [
          {
            "name": "tex",
            "type": "ITexture",
            "description": "The texture to draw"
          },
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the rectangle to draw."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the rectangle to draw."
          },
          {
            "name": "width",
            "type": "number",
            "description": "The width of the rectangle to draw."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The height of the rectangle to draw."
          }
        ]
      },
      {
        "name": "DrawWireframeSphere",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Draws a wireframe sphere in 3d space.\n\n<rendercontext hook=\"false\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "position",
            "type": "Vector",
            "description": "Position of the sphere."
          },
          {
            "name": "radius",
            "type": "number",
            "description": "The size of the sphere."
          },
          {
            "name": "longitudeSteps",
            "type": "number",
            "description": "The amount of longitude steps.\nThe larger this number is, the smoother the sphere is."
          },
          {
            "name": "latitudeSteps",
            "type": "number",
            "description": "The amount of latitude steps.\nThe larger this number is, the smoother the sphere is."
          },
          {
            "name": "color",
            "type": "table",
            "default": "Color( 255, 255, 255 )",
            "description": "The color of the wireframe. Uses the <page>Color</page>."
          },
          {
            "name": "writeZ",
            "type": "boolean",
            "default": "false",
            "description": "Whether or not to consider the Z buffer. If false, the wireframe will be drawn over everything currently drawn. If true, it will be drawn with depth considered, as if it were a regular object in 3D space."
          }
        ]
      },
      {
        "name": "GetBloomTex1",
        "parent": "render",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "ITexture"
          }
        ]
      },
      {
        "name": "GetDXLevel",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum available directX version.",
        "returnValues": [
          {
            "type": "number",
            "description": "dxLevel"
          }
        ]
      },
      {
        "name": "GetScreenEffectTexture",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Obtain an <page>ITexture</page> of the screen. You must call <page>render.UpdateScreenEffectTexture</page> in order to update this texture with the currently rendered scene.\n\nThis texture is mainly used within <page>GM:RenderScreenspaceEffects</page>",
        "arguments": [
          {
            "name": "textureIndex",
            "type": "number",
            "default": "0",
            "description": "Max index is 3, but engine only creates the first two for you."
          }
        ],
        "returnValues": [
          {
            "type": "ITexture",
            "description": "The requested texture."
          }
        ]
      },
      {
        "name": "GetToneMappingScaleLinear",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Returns a vector representing linear tone mapping scale.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The vector representing linear tone mapping scale."
          }
        ]
      },
      {
        "name": "MaterialOverrideByIndex",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Similar to <page>render.MaterialOverride</page>, but overrides the materials per index. Similar to <page>Entity:SetSubMaterial</page>\n\n<page>render.MaterialOverride</page> overrides effects of this function.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the material to override, in range of 0 to 31."
          },
          {
            "name": "material",
            "type": "IMaterial",
            "description": "The material to override with"
          }
        ]
      },
      {
        "name": "MaxTextureWidth",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum texture width the renderer can handle.",
        "returnValues": [
          {
            "type": "number",
            "description": "maxTextureWidth"
          }
        ]
      },
      {
        "name": "OverrideDepthEnable",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Overrides the write behaviour of all next rendering operations towards the depth buffer.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "Enable or disable the override."
          },
          {
            "name": "shouldWrite",
            "type": "boolean",
            "description": "If the previous argument is true, sets whether the next rendering operations should write to the depth buffer or not. Has no effect if the previous argument is false."
          }
        ]
      },
      {
        "name": "PerformFullScreenStencilOperation",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Perform stencil operations to every pixel on the screen."
      },
      {
        "name": "PushCustomClipPlane",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Pushes a new clipping plane of the clip plane stack and sets it as active.\n\n<bug issue=\"2687\">A max of 2 clip planes are supported on Linux/POSIX, and 6 on Windows.</bug>",
        "arguments": [
          {
            "name": "normal",
            "type": "Vector",
            "description": "The normal of the clipping plane."
          },
          {
            "name": "distance",
            "type": "number",
            "description": "The distance of the plane from the world origin. You can use <page>Vector:Dot</page> between the normal and any point on the plane to find this."
          }
        ]
      },
      {
        "name": "ReadPixel",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Reads the color of the specified pixel from the RenderTarget sent by <page>render.CapturePixels</page>",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "name": "r",
            "description": "The red channel value."
          },
          {
            "type": "number",
            "name": "g",
            "description": "The green channel value."
          },
          {
            "type": "number",
            "name": "b",
            "description": "The blue channel value."
          },
          {
            "type": "number",
            "name": "a",
            "description": "The alpha channel value or <page>no value</page> if the render target has no alpha channel."
          }
        ]
      },
      {
        "name": "RenderView",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Renders the scene with the specified viewData to the current active render target.\n\n<bug issue=\"1330\">Static props and LODs are rendered improperly due to incorrectly perceived distance.</bug>",
        "arguments": [
          {
            "name": "view",
            "type": "table",
            "default": "nil",
            "description": "The view data to be used in the rendering. See <page>Structures/ViewData</page>. Any missing value is assumed to be that of the current view. Similarly, you can make a normal render by simply not passing this table at all."
          }
        ]
      },
      {
        "name": "SetColorMaterialIgnoreZ",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Sets the current drawing material to `color_ignorez`.\n\nThe material is defined as:\n```\n\n\"UnlitGeneric\"\n{\n\"$basetexture\" \"color/white\"\n\"$model\" \t\t1\n\"$translucent\" \t1\n\"$vertexalpha\" \t1\n\"$vertexcolor\" \t1\n\"$ignorez\"\t\t1\n}\n```"
      },
      {
        "name": "SetColorModulation",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Sets the color modulation.",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "description": "The red channel multiplier normal ranging from 0-1."
          },
          {
            "name": "g",
            "type": "number",
            "description": "The green channel multiplier normal ranging from 0-1."
          },
          {
            "name": "b",
            "type": "number",
            "description": "The blue channel multiplier normal ranging from 0-1."
          }
        ]
      },
      {
        "name": "SetMaterial",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Sets the material to be used in any upcoming render operation using the <page>render</page>.\n\nNot to be confused with <page>surface.SetMaterial</page>.",
        "arguments": [
          {
            "name": "mat",
            "type": "IMaterial",
            "description": "The material to be used."
          }
        ]
      },
      {
        "name": "SetRenderTargetEx",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Sets the render target with the specified index to the specified rt.",
        "arguments": [
          {
            "name": "rtIndex",
            "type": "number",
            "description": "The index of the rt to set."
          },
          {
            "name": "texture",
            "type": "ITexture",
            "description": "The new render target to be used."
          }
        ]
      },
      {
        "name": "SetShadowDirection",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Sets the shadow projection direction.",
        "arguments": [
          {
            "name": "shadowDirections",
            "type": "Vector",
            "description": "The new shadow direction."
          }
        ]
      },
      {
        "name": "SetStencilFailOperation",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the operation to be performed on the stencil buffer values if the compare function was not successful.\nNote that this takes place **before** depth testing.",
        "arguments": [
          {
            "name": "failOperation",
            "type": "number",
            "description": "Fail operation function, see <page>Enums/STENCILOPERATION</page>."
          }
        ]
      },
      {
        "name": "SetStencilPassOperation",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the operation to be performed on the stencil buffer values if the compare function was successful.",
        "arguments": [
          {
            "name": "passOperation",
            "type": "number",
            "description": "Pass operation function, see <page>Enums/STENCILOPERATION</page>."
          }
        ]
      },
      {
        "name": "StartBeam",
        "parent": "render",
        "realms": [
          "client"
        ],
        "description": "Start a new beam draw operation.\n\n<rendercontext hook=\"false\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "segmentCount",
            "type": "number",
            "description": "Amount of beam segments that are about to be drawn."
          }
        ]
      },
      {
        "name": "SupportsVertexShaders_2_0",
        "parent": "render",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns if the current settings and the system allow the usage of vertex shaders 2.0.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether Vertex Shaders 2.0 are supported or not."
          }
        ]
      }
    ]
  },
  {
    "name": "resource",
    "functions": [
      {
        "name": "AddFile",
        "parent": "resource",
        "realms": [
          "server"
        ],
        "description": "Adds the specified and all related files to the files the client should download.\n\nFor convenience, this function will automatically add any other files that are related to the selected one, and throw an error if it can't find them. For example, a `.vmt` file will automatically add the `.vtf` with the same name, and a `.mdl` file will automatically add all `.vvd`, `.ani`, `.dx80.vtx`, `.dx90.vtx`, `.sw.vtx`, `.phy` and `.jpg` files with the same name, with a separate error for each missing file.\n\nIf you do not want it to do this, use <page>resource.AddSingleFile</page>.\n\n<warning>There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - <page>resource.AddWorkshop</page>. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.</warning>\n\n<note>Running this function using a path relative to the main `garrysmod/` folder will not work for files in addons and gamemodes. Instead, the files must be added relative to their respective content folders. For example, a sound file from an addon would use the path \"sound/[FILENAME_AND_EXTENSION],\" despite the file being located in `addons/[ADDON_NAME]/sound/[FILENAME_AND_EXTENSION]`</note>\n\n<note>The file must exist on the server or players will not download it!</note>",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "Virtual path of the file to be added, relative to `garrysmod/`. Do not add `.bz2` to the filepath. Do not put `gamemodes/*gamemodename*/content/` or `addons/*addonname*/` into the path."
          }
        ]
      }
    ]
  },
  {
    "name": "saverestore",
    "functions": [
      {
        "name": "AddSaveHook",
        "parent": "saverestore",
        "realms": [
          "client",
          "server"
        ],
        "description": "Adds a save hook for the Half-Life 2 save system. You can this to carry data through level transitions in Half-Life 2.",
        "arguments": [
          {
            "name": "identifier",
            "type": "string",
            "description": "The unique identifier for this hook."
          },
          {
            "name": "callback",
            "type": "function",
            "description": "The function to be called when an engine save is being saved. It has one argument:\n\n\n<page>ISave</page> save - The save object to be used to write data to the save file that is being saved\n\n\n\n\n\nYou can also use those functions to save data:\n\n\n<page>saverestore.WriteVar</page>\n\n\n<page>saverestore.WriteTable</page>\n\n\n<page>saverestore.SaveEntity</page>"
          }
        ]
      },
      {
        "name": "LoadGlobal",
        "parent": "saverestore",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal>\n\nCalled by engine when a save is being loaded.\n\nThis handles loading gamemode and calls all of the hooks added with <page>saverestore.AddRestoreHook</page>.",
        "arguments": [
          {
            "name": "save",
            "type": "IRestore",
            "description": "The restore object to read data from the save file with."
          }
        ]
      },
      {
        "name": "PreRestore",
        "parent": "saverestore",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal>\n\nCalled by the engine just before <page>saverestore.LoadGlobal</page> is."
      },
      {
        "name": "ReadVar",
        "parent": "saverestore",
        "realms": [
          "client",
          "server"
        ],
        "description": "Loads a variable from the save game file that is being loaded.\n\nVariables will be read in the save order you have saved them.",
        "arguments": [
          {
            "name": "save",
            "type": "IRestore",
            "description": "The restore object to read variables from."
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The variable that was read, if any."
          }
        ]
      },
      {
        "name": "SaveGlobal",
        "parent": "saverestore",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal>\n\nCalled by engine when a save is being saved.\n\nThis handles saving gamemode and calls all of the hooks added with <page>saverestore.AddSaveHook</page>.",
        "arguments": [
          {
            "name": "save",
            "type": "ISave",
            "description": "The save object to write data into the save file."
          }
        ]
      }
    ]
  },
  {
    "name": "scripted_ents",
    "functions": [
      {
        "name": "GetMember",
        "parent": "scripted_ents",
        "realms": [
          "client",
          "server"
        ],
        "description": "Retrieves a member of entity's table.",
        "arguments": [
          {
            "name": "class",
            "type": "string",
            "description": "Entity's class name"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of member to retrieve"
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The member or nil if failed"
          }
        ]
      }
    ]
  },
  {
    "name": "serverlist",
    "description": "Menu state library to query the master server list.",
    "functions": [
      {
        "name": "PingServer",
        "parent": "serverlist",
        "realms": [
          "menu"
        ],
        "description": "Queries a server for its information/ping.",
        "arguments": [
          {
            "name": "ip",
            "type": "string",
            "description": "The IP address of the server, including the port."
          },
          {
            "name": "callback",
            "type": "function",
            "description": "The function to be called if and when the request finishes. Function has the same arguments as the callback of <page>serverlist.Query</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "sound",
    "functions": [
      {
        "name": "Play",
        "parent": "sound",
        "realms": [
          "client",
          "server"
        ],
        "description": "Plays a sound from the specified position in the world.\nIf you want to play a sound without a position, such as a UI sound, use <page>surface.PlaySound</page> instead.\n\nThis function is similar to <page>Global.EmitSound</page>, but with less options.",
        "arguments": [
          {
            "name": "snd",
            "type": "string",
            "description": "The sound to play. This should either be a sound script name (<page>sound.Add</page>) or a file path relative to the `sound/` folder. (Make note that it's not sound**s**)"
          },
          {
            "name": "pos",
            "type": "Vector",
            "description": "Where the sound should play."
          },
          {
            "name": "level",
            "type": "number",
            "default": "75",
            "description": "Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard."
          },
          {
            "name": "pitch",
            "type": "number",
            "default": "100",
            "description": "The sound pitch. Range is from 0 to 255. 100 is normal pitch."
          },
          {
            "name": "volume",
            "type": "number",
            "default": "1",
            "description": "Output volume of the sound in range 0 to 1."
          }
        ]
      }
    ]
  },
  {
    "name": "spawnmenu",
    "description": "The spawnmenu library is a set of functions that allow you to control the spawn (Q) menu.",
    "functions": [
      {
        "name": "ActiveControlPanel",
        "parent": "spawnmenu",
        "realms": [
          "client"
        ],
        "description": "Returns currently opened control panel of a tool, post process effect or some other menu in spawnmenu.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The currently opened control panel, if any."
          }
        ]
      },
      {
        "name": "AddToolCategory",
        "parent": "spawnmenu",
        "realms": [
          "client"
        ],
        "description": "Used to create a new category in the list inside of a spawnmenu ToolTab.\n\nYou must call this function from <page>SANDBOX:AddToolMenuCategories</page> for it to work properly.",
        "arguments": [
          {
            "name": "tab",
            "type": "string",
            "description": "The ToolTab name, as created with <page>spawnmenu.AddToolTab</page>.\n\nYou can also use the default ToolTab names \"Main\" and \"Utilities\"."
          },
          {
            "name": "RealName",
            "type": "string",
            "description": "The identifier name"
          },
          {
            "name": "PrintName",
            "type": "string",
            "description": "The displayed name"
          }
        ]
      },
      {
        "name": "DoSaveToTextFiles",
        "parent": "spawnmenu",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nCalls <page>spawnmenu.SaveToTextFiles</page>.",
        "arguments": [
          {
            "name": "spawnlists",
            "type": "table",
            "description": "A table containing spawnlists."
          }
        ]
      },
      {
        "name": "GetToolMenu",
        "parent": "spawnmenu",
        "realms": [
          "client"
        ],
        "description": "Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the <page>SANDBOX:AddToolMenuTabs</page> hook.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The internal name of the tab. This is used for sorting."
          },
          {
            "name": "label",
            "type": "string",
            "default": "name",
            "description": "The 'nice' name of the tab"
          },
          {
            "name": "icon",
            "type": "string",
            "default": "icon16/wrench.png",
            "description": "The filepath to the icon of the tab. Should be a .png"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table of tables representing categories and items in the left part of the tab. See example below to example structure."
          }
        ]
      },
      {
        "name": "GetTools",
        "parent": "spawnmenu",
        "realms": [
          "client"
        ],
        "description": "Gets a table of tools on the client.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table with groups of tools, along with information on each tool."
          }
        ]
      },
      {
        "name": "SaveToTextFiles",
        "parent": "spawnmenu",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nSaves a table of spawnlists to files.",
        "arguments": [
          {
            "name": "spawnlists",
            "type": "table",
            "description": "A table containing spawnlists."
          }
        ]
      }
    ]
  },
  {
    "name": "steamworks",
    "functions": [
      {
        "name": "GetList",
        "parent": "steamworks",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Retrieves a customized list of Steam Workshop addons.",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of items to retrieve. Possible values include:\n* popular (All invalid options will equal to this)\n* trending\n* latest\n* friends\n* followed - Items of people the player is following on Steam\n* friend_favs - Favorites of player's friends\n* favorite - Player's favorites"
          },
          {
            "name": "tags",
            "type": "table",
            "description": "A table of tags to match."
          },
          {
            "name": "offset",
            "type": "number",
            "description": "How much of results to skip from first one. This is useful for pagination. Negative values are invalid."
          },
          {
            "name": "numRetrieve",
            "type": "number",
            "description": "How many items to retrieve, up to 50 at a time. Negative values are invalid."
          },
          {
            "name": "days",
            "type": "number",
            "description": "When getting `popular` or `trending` content from Steam, this determines a time period, in range of days from 0 to 365. ( 7 = most popular addons in last 7 days, 30 = most popular addons in the last month, etc ). If given a zero, will automatically choose a value, which is 7 for `trending`."
          },
          {
            "name": "userID",
            "type": "string",
            "description": "\"0\" to retrieve all addons, \"1\" to retrieve addons only published by you, or a valid SteamID64 of a user to get workshop items of."
          },
          {
            "name": "resultCallback",
            "type": "function",
            "description": "The function to process retrieved data. The first and only argument is a table, containing all the info, or nil in case of error"
          }
        ]
      },
      {
        "name": "Publish",
        "parent": "steamworks",
        "realms": [
          "menu"
        ],
        "description": "<internal></internal>\nPublishes dupes, saves or demos to workshop.",
        "arguments": [
          {
            "name": "tags",
            "type": "table",
            "description": "The workshop tags to apply"
          },
          {
            "name": "filename",
            "type": "string",
            "description": "Path to the file to upload"
          },
          {
            "name": "image",
            "type": "string",
            "description": "Path to the image to use as icon"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the Workshop submission"
          },
          {
            "name": "desc",
            "type": "string",
            "description": "Description of the Workshop submission"
          }
        ]
      },
      {
        "name": "SetFileCompleted",
        "parent": "steamworks",
        "realms": [
          "menu"
        ],
        "description": "Sets the workshop item as \"completed\" by the player. There will be a visual indicator on the Steam Workshop for completed items.",
        "arguments": [
          {
            "name": "workshopid",
            "type": "string",
            "description": "The Steam Workshop item id"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Whatever you have put in as first argument"
          }
        ]
      },
      {
        "name": "SetShouldMountAddon",
        "parent": "steamworks",
        "realms": [
          "menu"
        ],
        "description": "Sets if an addon should be enabled or disabled. Call <page>steamworks.ApplyAddons</page> afterwards to update.",
        "arguments": [
          {
            "name": "workshopItemID",
            "type": "string",
            "description": "The ID of the Steam Workshop item we should enable/disable"
          },
          {
            "name": "shouldMount",
            "type": "boolean",
            "description": "true to enable the item, false to disable."
          }
        ]
      },
      {
        "name": "ShouldMountAddon",
        "parent": "steamworks",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whenever the specified Steam Workshop addon will be mounted or not.",
        "arguments": [
          {
            "name": "workshopItemID",
            "type": "string",
            "description": "The ID of the Steam Workshop"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Will the workshop item be mounted or not"
          }
        ]
      },
      {
        "name": "ViewFile",
        "parent": "steamworks",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Opens the workshop website for specified Steam Workshop item in the Steam overlay browser.",
        "arguments": [
          {
            "name": "workshopItemID",
            "type": "string",
            "description": "The ID of workshop item."
          }
        ]
      },
      {
        "name": "Vote",
        "parent": "steamworks",
        "realms": [
          "menu"
        ],
        "description": "<internal></internal> Makes the user vote for the specified addon",
        "arguments": [
          {
            "name": "workshopItemID",
            "type": "string",
            "description": "The ID of workshop item."
          },
          {
            "name": "upOrDown",
            "type": "boolean",
            "description": "Sets if the user should vote up/down. True makes them upvote, false down"
          }
        ]
      }
    ]
  },
  {
    "name": "string",
    "description": "The string *type* is a sequence of characters.\n\nThe string *library* is a standard Lua library which provides functions for the manipulation of strings.[[1]](https://www.lua.org/pil/20.html)\n\nIn Garry's Mod there are several extra useful functions and features added to this library.<br>\nMost notably all strings will access this library through the string metatable index function.[[2]](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/string.lua#L311-L322)\n\nThis means all strings are treated like table objects and the string library as its <page text=\"Meta Table\">Meta_Tables</page>\n\n```lua\nlocal x = \"Kittens\"\nfunction string.Foobar(self) return self:Right(4) end\n\nstring.Right(x,4) == x:Right(4) == x:Foobar() == (\"Kittens\"):Right(4) == x[-4]..x[-3]..x[-2]..x[-1]\n```\n\n\nThe string *metatable* however is something else, and to access that you must use `getmetatable(\"\")`.\n\nThe difference here is related to <page>Metamethods</page>, such as using (+) instead of (..) to concatenate strings.\n<warning>Using `+` operator for concatenation breaks lua metamethod to sum string as numbers (Example: `\"10\" + \"1\"` return `11` (number)) and this is 400 times SLOWER!</warning>\n\n```lua\nlocal stringmeta = getmetatable(\"\")\nfunction stringmeta.__add(str,x) return str..x end -- This will work\nfunction string.__add(str,x) return str..x end -- But this will not.\n\nprint(\"Kittens\" + \" And \" + \"Puppies\")\n```\n\nSee <page>Meta Tables</page> and <page>Metamethods</page> for more information.\n<warning>Making changes to the string *metatable* is not a good idea unless you know what you are doing. Use the string *library* instead.</warning>\n\nThis category lists functions available in the string *library*.",
    "functions": [
      {
        "name": "CardinalToOrdinal",
        "parent": "string",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Converts a cardinal (`111`) number to its [ordinal/sequential variation](https://en.wikipedia.org/wiki/Ordinal_numeral) (`111th`).\n\nSee also <page>Global.STNDRD</page> for a function that returns just the suffix.",
        "arguments": [
          {
            "name": "input",
            "type": "number",
            "description": "A number to convert to ordinal."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The ordinal numeral."
          }
        ]
      },
      {
        "name": "FormattedTime",
        "parent": "string",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the time as a formatted string or as a table if no format is given.",
        "arguments": [
          {
            "name": "float",
            "type": "number",
            "description": "The time in seconds to format."
          },
          {
            "name": "format",
            "type": "string",
            "default": "nil",
            "description": "An optional formatting to use. If no format it specified, a table will be returned instead."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Returns the time as a formatted string only if a format was specified.\n\nReturns a table only if no format was specified. The table will contain these fields:\n* <page>number</page> ms - milliseconds\n* <page>number</page> s - seconds\n* <page>number</page> m - minutes\n* <page>number</page> h - hours"
          }
        ]
      },
      {
        "name": "JavascriptSafe",
        "parent": "string",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings.",
        "arguments": [
          {
            "name": "str",
            "type": "string",
            "description": "The string that should be escaped."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The escaped string."
          }
        ]
      }
    ]
  },
  {
    "name": "surface",
    "functions": [
      {
        "name": "DrawCircle",
        "parent": "surface",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Draws a hollow circle, made of lines. For a filled circle, see examples for <page>surface.DrawPoly</page>.\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "arguments": [
          {
            "name": "originX",
            "type": "number",
            "description": "The center x integer coordinate."
          },
          {
            "name": "originY",
            "type": "number",
            "description": "The center y integer coordinate."
          },
          {
            "name": "radius",
            "type": "number",
            "description": "The radius of the circle."
          },
          {
            "name": "r",
            "type": "number",
            "description": "The red value of the color to draw the circle with, or a <page>Color</page>."
          },
          {
            "name": "g",
            "type": "number",
            "description": "The green value of the color to draw the circle with. Unused if a <page>Color</page> was given."
          },
          {
            "name": "b",
            "type": "number",
            "description": "The blue value of the color to draw the circle with. Unused if a <page>Color</page> was given."
          },
          {
            "name": "a",
            "type": "number",
            "default": "255",
            "description": "The alpha value of the color to draw the circle with. Unused if a <page>Color</page> was given."
          }
        ]
      },
      {
        "name": "DrawRect",
        "parent": "surface",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Draws a solid rectangle on the screen.\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The X integer co-ordinate."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The Y integer co-ordinate."
          },
          {
            "name": "width",
            "type": "number",
            "description": "The integer width of the rectangle."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The integer height of the rectangle."
          }
        ]
      },
      {
        "name": "GetDrawColor",
        "parent": "surface",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the current color affecting draw operations.\n\n<bug issue=\"2407\">The returned color will not have the color metatable.</bug>",
        "returnValues": [
          {
            "type": "table",
            "description": "The color that drawing operations will use as a <page>Color</page>."
          }
        ]
      },
      {
        "name": "PlaySound",
        "parent": "surface",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Play a sound file directly on the client (such as UI sounds, etc).\n\n<note>\nValid sample rates: **11025 Hz, 22050 Hz and 44100 Hz**, otherwise you may see this kind of message:\n\n`Unsupported 32-bit wave file your_sound.wav` and\n`Invalid sample rate (48000) for sound 'your_sound.wav'`\n</note>",
        "arguments": [
          {
            "name": "soundfile",
            "type": "string",
            "description": "The path to the sound file.\n\n<bug issue=\"4504\"> Currently does not work with sound scripts (<page>sound.Add</page>)</bug>\nThis should either be a sound script name (<page>sound.Add</page>) or a file path relative to the `sound/` folder. (Make note that it's not sound**s**)"
          }
        ]
      },
      {
        "name": "SetTexture",
        "parent": "surface",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the texture to be used in all upcoming draw operations using the surface library.\n\nSee <page>surface.SetMaterial</page> for an <page>IMaterial</page> alternative.\n\n<note>It's probably best to use the alternative mentioned above.</note>",
        "arguments": [
          {
            "name": "textureID",
            "type": "number",
            "description": "The ID of the texture to draw with returned by <page>surface.GetTextureID</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "system",
    "functions": [
      {
        "name": "IsOSX",
        "parent": "system",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns whether the current OS is OSX.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the game is running on OSX."
          }
        ]
      },
      {
        "name": "IsWindowed",
        "parent": "system",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the game is being run in a window or in fullscreen (you can change this by opening the menu, clicking 'Options', then clicking the 'Video' tab, and changing the Display Mode using the dropdown menu):\n\n<img src=\"DisplayModeDropdown.jpeg\">",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is the game running in a window?"
          }
        ]
      },
      {
        "name": "SteamTime",
        "parent": "system",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the synchronized Steam time. This is the number of seconds since the [Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n\n<note>This function does not work on Dedicated Servers and will instead return no value.</note>",
        "returnValues": [
          {
            "type": "number",
            "description": "Current Steam-synchronized Unix time."
          }
        ]
      }
    ]
  },
  {
    "name": "table",
    "functions": [
      {
        "name": "concat",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Concatenates the contents of a table to a string.",
        "arguments": [
          {
            "name": "tbl",
            "type": "table",
            "description": "The table to concatenate."
          },
          {
            "name": "concatenator",
            "type": "string",
            "default": "\\",
            "description": "A separator to insert between strings"
          },
          {
            "name": "startPos",
            "type": "number",
            "default": "1",
            "description": "The key to start at"
          },
          {
            "name": "endPos",
            "type": "number",
            "default": "#tbl",
            "description": "The key to end at"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Concatenated values"
          }
        ]
      },
      {
        "name": "Empty",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Removes all values from a table.",
        "arguments": [
          {
            "name": "tbl",
            "type": "table",
            "description": "The table to empty."
          }
        ]
      },
      {
        "name": "Flip",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Flips key-value pairs of each element within a table, so that each value becomes the key, and each key becomes the value.\n\n<warning>Take care when using this function, as a Lua table cannot contain multiple instances of the same key. As such, data loss is possible when using this function on tables with duplicate values.\n\n```\nlocal test = { test = 1, test2 = 1 }\nlocal f = table.Flip( test )\nPrintTable( f )\n-- Outputs \"1\t=\ttest2\"\n```\n</warning>",
        "arguments": [
          {
            "name": "input",
            "type": "table",
            "description": "The table to flip items of."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "The flipped table."
          }
        ]
      },
      {
        "name": "GetLastValue",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "<deprecated>Instead, index the table with the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.</deprecated>\nReturns the last value found in the given table",
        "arguments": [
          {
            "name": "tab",
            "type": "table",
            "description": "Table to retrieve value from"
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "Value"
          }
        ]
      },
      {
        "name": "insert",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Inserts a value into a table at the end of the table or at the given position.\n<note>This function does not call the `__newindex` [metamethod](Metamethods).</note>",
        "arguments": [
          {
            "name": "tbl",
            "type": "table",
            "description": "The table to insert the variable into."
          },
          {
            "name": "position",
            "type": "number",
            "description": "The position in the table to insert the variable. If the third argument is nil this argument becomes the value to insert at the end of given table."
          },
          {
            "name": "value",
            "type": "any",
            "description": "The variable to insert into the table."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The index the object was placed at."
          }
        ]
      },
      {
        "name": "KeysFromValue",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns a table of keys containing the supplied value",
        "arguments": [
          {
            "name": "tab",
            "type": "table",
            "description": "Table to search"
          },
          {
            "name": "value",
            "type": "any",
            "description": "Value to search for"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Keys"
          }
        ]
      },
      {
        "name": "sort",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Sorts a sequential table either ascending or by the given sort function.\n<note>This function modifies the table you give to it and internally uses the [quick sort algorithm](http://www.lua.org/source/5.2/ltablib.c.html#sort).</note>",
        "arguments": [
          {
            "name": "tbl",
            "type": "table",
            "description": "The table to sort."
          },
          {
            "name": "sorter",
            "type": "function",
            "description": "If specified, the function will be called with 2 parameters each.\nReturn true in this function if you want the first parameter to come first in the sorted array."
          }
        ]
      },
      {
        "name": "SortByMember",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Sorts a table by a named member.",
        "arguments": [
          {
            "name": "tab",
            "type": "table",
            "description": "Table to sort."
          },
          {
            "name": "memberKey",
            "type": "any",
            "description": "The key used to identify the member."
          },
          {
            "name": "ascending",
            "type": "boolean",
            "default": "false",
            "description": "Whether or not the order should be ascending."
          }
        ]
      },
      {
        "name": "SortDesc",
        "parent": "table",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Sorts a table in reverse order from <page>table.sort</page>.\n<note>This function modifies the table you give to it. Like table.sort, it does not return anything.</note>",
        "arguments": [
          {
            "name": "tbl",
            "type": "table",
            "description": "The table to sort in descending order."
          }
        ]
      }
    ]
  },
  {
    "name": "team",
    "functions": [
      {
        "name": "BestAutoJoinTeam",
        "parent": "team",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED",
        "returnValues": [
          {
            "type": "number",
            "description": "Team index"
          }
        ]
      },
      {
        "name": "GetClass",
        "parent": "team",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the selectable classes for the given team. This can be added to with <page>team.SetClass</page>",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "Index of the team"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Selectable classes"
          }
        ]
      },
      {
        "name": "GetColor",
        "parent": "team",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the team's color.",
        "arguments": [
          {
            "name": "teamIndex",
            "type": "number",
            "description": "The team index."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "The team's color as a <page>Color</page>."
          }
        ]
      },
      {
        "name": "GetPlayers",
        "parent": "team",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a table with all player of the specified team.\n<note>This function returns a sequential table, meaning it should be looped with <page>Global.ipairs</page> instead of <page>Global.pairs</page> for efficiency reasons.</note>",
        "arguments": [
          {
            "name": "teamIndex",
            "type": "number",
            "description": "The team index."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A sequential table of <page>Player</page>s that belong to the requested team."
          }
        ]
      },
      {
        "name": "GetScore",
        "parent": "team",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns the score of the team.",
        "arguments": [
          {
            "name": "teamIndex",
            "type": "number",
            "description": "The team index."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "score"
          }
        ]
      },
      {
        "name": "GetSpawnPoint",
        "parent": "team",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns a table of valid spawnpoint classes the team can use. These are set with <page>team.SetSpawnPoint</page>.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "Index of the team"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Valid spawnpoint classes"
          }
        ]
      },
      {
        "name": "TotalFrags",
        "parent": "team",
        "realms": [
          "client",
          "server"
        ],
        "description": "Get's the total frags in a team.",
        "arguments": [
          {
            "name": "Entity or number",
            "type": "Entity",
            "description": "Entity or number."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "index"
          }
        ]
      }
    ]
  },
  {
    "name": "timer",
    "functions": [
      {
        "name": "Start",
        "parent": "timer",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Restarts the given timer.\n\n<note>Timers use <page>Global.CurTime</page> for timing.</note>\n<warning>Timers won't advance while the client is timing out from the server.</warning>",
        "arguments": [
          {
            "name": "identifier",
            "type": "any",
            "description": "Identifier of the timer."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "true if the timer exists, false if it doesn't."
          }
        ]
      },
      {
        "name": "Toggle",
        "parent": "timer",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Runs either <page>timer.Pause</page> or <page>timer.UnPause</page> based on the timer's current status.",
        "arguments": [
          {
            "name": "identifier",
            "type": "any",
            "description": "Identifier of the timer."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "status of the timer."
          }
        ]
      },
      {
        "name": "UnPause",
        "parent": "timer",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Unpauses the timer.",
        "arguments": [
          {
            "name": "identifier",
            "type": "any",
            "description": "Identifier of the timer."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "false if the timer didn't exist or was already running, true otherwise."
          }
        ]
      }
    ]
  },
  {
    "name": "umsg",
    "description": "<deprecated>You should be using the <page>net</page> library instead</deprecated>\n\nThe umsg (user message) library was previously the most common way of sending information from the server to the client.\n\n<warning>Usermessages have a limit of only 256 bytes!</warning>",
    "functions": [
      {
        "name": "Bool",
        "parent": "umsg",
        "realms": [
          "server"
        ],
        "description": "Writes a bool to the usermessage.",
        "arguments": [
          {
            "name": "bool",
            "type": "boolean",
            "description": "The bool to be sent."
          }
        ]
      }
    ]
  },
  {
    "name": "undo",
    "description": "The undo library allows you to add custom entities to the undo list, allowing users to \"undo\" their creation with their undo (default: <key>Z</key>) key.",
    "functions": [
      {
        "name": "Create",
        "parent": "undo",
        "realms": [
          "server"
        ],
        "description": "Begins a new undo entry",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the undo message to show to players"
          }
        ]
      },
      {
        "name": "Do_Undo",
        "parent": "undo",
        "realms": [
          "server"
        ],
        "description": "Processes an undo block (in table form). This is used internally by the undo manager when a player presses Z.\n\nYou should use `gm_undo` or `gm_undonum *num*` console commands instead of calling this function directly.",
        "arguments": [
          {
            "name": "tab",
            "type": "table",
            "description": "The undo block to process as an <page>Structures/Undo</page>"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Number of removed entities"
          }
        ]
      },
      {
        "name": "Finish",
        "parent": "undo",
        "realms": [
          "server"
        ],
        "description": "Completes an undo entry, and registers it with the player's client",
        "arguments": [
          {
            "name": "NiceText",
            "type": "string",
            "description": "Text that appears in the player's undo history"
          }
        ]
      },
      {
        "name": "GetTable",
        "parent": "undo",
        "realms": [
          "client",
          "server"
        ],
        "description": "Serverside, returns a table containing all undo blocks of all players. Clientside, returns a table of the local player's undo blocks.\n<note>Serverside, this table's keys use <page>Player:UniqueID</page> to store a player's undo blocks.</note>",
        "returnValues": [
          {
            "type": "table",
            "description": "The undo table."
          }
        ]
      }
    ]
  },
  {
    "name": "usermessage",
    "functions": [
      {
        "name": "IncomingMessage",
        "parent": "usermessage",
        "realms": [
          "client",
          "server"
        ],
        "description": "<internal></internal>\nCalled by the engine when a usermessage arrives, this method calls the hook function specified by <page>usermessage.Hook</page> if any.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The message name."
          },
          {
            "name": "msg",
            "type": "bf_read",
            "description": "The message."
          }
        ]
      }
    ]
  },
  {
    "name": "utf8",
    "functions": [
      {
        "name": "char",
        "parent": "utf8",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.",
        "arguments": [
          {
            "name": "codepoints",
            "type": "vararg",
            "description": "Unicode code points to be converted in to a UTF-8 string."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "UTF-8 string generated from given arguments."
          }
        ]
      },
      {
        "name": "offset",
        "parent": "utf8",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the byte-index of the n'th UTF-8-character after the given startPos (nil if none). startPos defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character startPos lies within.",
        "arguments": [
          {
            "name": "string",
            "type": "string",
            "description": "The string that you will get the byte position from."
          },
          {
            "name": "n",
            "type": "number",
            "description": "The position to get the beginning byte position from."
          },
          {
            "name": "startPos",
            "type": "number",
            "default": "1 when n>=0, -1 otherwise",
            "description": "The offset for n."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Starting byte-index of the given position."
          }
        ]
      }
    ]
  },
  {
    "name": "util",
    "functions": [
      {
        "name": "BlastDamage",
        "parent": "util",
        "realms": [
          "server"
        ],
        "description": "Applies explosion damage to all entities in the specified radius. Performs block checking.",
        "arguments": [
          {
            "name": "inflictor",
            "type": "Entity",
            "description": "The entity that caused the damage."
          },
          {
            "name": "attacker",
            "type": "Entity",
            "description": "The entity that attacked."
          },
          {
            "name": "damageOrigin",
            "type": "Vector",
            "description": "The center of the explosion"
          },
          {
            "name": "damageRadius",
            "type": "number",
            "description": "The radius in which entities will be damaged."
          },
          {
            "name": "damage",
            "type": "number",
            "description": "The amount of damage to be applied."
          }
        ]
      },
      {
        "name": "DateStamp",
        "parent": "util",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the current date formatted like '2012-10-31 18-00-00'",
        "returnValues": [
          {
            "type": "string",
            "description": "date"
          }
        ]
      },
      {
        "name": "DecalMaterial",
        "parent": "util",
        "realms": [
          "client",
          "server"
        ],
        "description": "Gets the full material path by the decal name. Used with <page>util.DecalEx</page>.",
        "arguments": [
          {
            "name": "decalName",
            "type": "string",
            "description": "Name of the decal."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "Material path of the decal."
          }
        ]
      },
      {
        "name": "Effect",
        "parent": "util",
        "realms": [
          "client",
          "server"
        ],
        "description": "Creates an effect with the specified data.\n\nFor Orange Box `.pcf` particles, see <page>Global.ParticleEffect</page>, <page>Global.ParticleEffectAttach</page> and  <page>Global.CreateParticleSystem</page>.\n\n<note>\nWhen dispatching an effect from the server, some values may be clamped for networking optimizations. Visit the Set accessors on <page>CEffectData</page> to see which ones are affected.\n\nYou will need to couple this function with <page>Global.IsFirstTimePredicted</page> if you want to use it in a <page text=\"predicted hook\">Prediction</page>.\n</note>",
        "arguments": [
          {
            "name": "effectName",
            "type": "string",
            "description": "The name of the effect to create.\n\nYou can find a list of <page text=\"built-in engine effects here\">Effects</page>. You can create your own, [example effects can be found here](https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/sandbox/entities/effects) and [here](https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/base/entities/effects)."
          },
          {
            "name": "effectData",
            "type": "CEffectData",
            "description": "The effect data describing the effect."
          },
          {
            "name": "allowOverride",
            "type": "boolean",
            "default": "true",
            "description": "Whether Lua-defined effects should override engine-defined effects with the same name for this/single function call."
          },
          {
            "name": "ignorePredictionOrRecipientFilter",
            "type": "any",
            "default": "nil",
            "description": "Can either be a boolean to ignore the prediction filter or a <page>CRecipientFilter</page>.\n\nSet this to true if you wish to call this function in multiplayer from server."
          }
        ]
      },
      {
        "name": "GetPlayerTrace",
        "parent": "util",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Utility function to quickly generate a trace table that starts at the players view position, and ends `32768` units along a specified direction.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player the trace should be based on"
          },
          {
            "name": "dir",
            "type": "Vector",
            "default": "ply:GetAimVector()",
            "description": "The direction of the trace"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "The trace data. See <page>Structures/Trace</page>"
          }
        ]
      },
      {
        "name": "IsOBBIntersectingOBB",
        "parent": "util",
        "realms": [
          "client",
          "server"
        ],
        "description": "Performs OBB on OBB intersection test.",
        "arguments": [
          {
            "name": "box1Origin",
            "type": "Vector",
            "description": "The center of the first box."
          },
          {
            "name": "box1Angles",
            "type": "Angle",
            "description": "The angles of the first box."
          },
          {
            "name": "box1Mins",
            "type": "Vector",
            "description": "The min position of the first box."
          },
          {
            "name": "box1Maxs",
            "type": "Vector",
            "description": "The max position of the first box."
          },
          {
            "name": "box2Origin",
            "type": "Vector",
            "description": "The center of the second box."
          },
          {
            "name": "box2Angles",
            "type": "Angle",
            "description": "The angles of the second box."
          },
          {
            "name": "box2Mins",
            "type": "Vector",
            "description": "The min position of the second box."
          },
          {
            "name": "box2Maxs",
            "type": "Vector",
            "description": "The max position of the second box."
          },
          {
            "name": "tolerance",
            "type": "number",
            "description": "Tolerance for error. Leave at 0 if unsure."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether there is an intersection."
          }
        ]
      },
      {
        "name": "KeyValuesToTablePreserveOrder",
        "parent": "util",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Similar to <page>util.KeyValuesToTable</page> but it also preserves order of keys.",
        "arguments": [
          {
            "name": "keyvals",
            "type": "string",
            "description": "The key value string"
          },
          {
            "name": "usesEscapeSequences",
            "type": "boolean",
            "default": "false",
            "description": "If set to true, will replace `\\t`, `\\n`, `\\\"` and `\\\\` in the input text with their escaped variants"
          },
          {
            "name": "preserveKeyCase",
            "type": "boolean",
            "default": "false",
            "description": "Whether we should preserve key case (may fail) or not (always lowercase)"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "The output table"
          }
        ]
      },
      {
        "name": "LocalToWorld",
        "parent": "util",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns a vector in world coordinates based on an entity and local coordinates",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity lpos is local to"
          },
          {
            "name": "lpos",
            "type": "Vector",
            "description": "Coordinates local to the ent"
          },
          {
            "name": "bonenum",
            "type": "number",
            "description": "The bonenumber of the ent lpos is local to"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "wpos"
          }
        ]
      },
      {
        "name": "MD5",
        "parent": "util",
        "realms": [
          "client",
          "server"
        ],
        "description": "Generates the [MD5 hash](https://en.wikipedia.org/wiki/MD5) of the specified string.\n<warning>MD5 is considered cryptographically broken and is known to be vulnerable to a variety of attacks including duplicate return values. If security or duplicate returns is a concern, use <page>util.SHA256</page>.</warning>",
        "arguments": [
          {
            "name": "stringToHash",
            "type": "string",
            "description": "The string to calculate the MD5 hash of."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The MD5 hash of the string in hexadecimal form."
          }
        ]
      },
      {
        "name": "PrecacheSound",
        "parent": "util",
        "realms": [
          "client",
          "server"
        ],
        "description": "Precaches a sound for later use. Sound is cached after being loaded once.\n<note>Soundcache is limited to 16384 unique sounds on the server.</note>\n\n<bug>Broken on purpose because hitting the limit above causes the server to shutdown</bug>\n<bug>Ultimately does nothing on client, and only works with sound scripts, not direct paths.</bug>",
        "arguments": [
          {
            "name": "soundName",
            "type": "string",
            "description": "The sound to precache."
          }
        ]
      },
      {
        "name": "SetPData",
        "parent": "util",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Sets persistent data for offline player using their SteamID.\n\nSee also <page>Player:SetPData</page> for a more convenient version of this function for online players, <page>util.RemovePData</page> and\n<page>util.GetPData</page> for the other accompanying functions.\n<warning>This function internally uses <page>Player:UniqueID</page>, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.</warning>",
        "arguments": [
          {
            "name": "steamID",
            "type": "string",
            "description": "SteamID of the player, in the `STEAM_0:0:0` format. See <page>Player:SteamID</page>."
          },
          {
            "name": "name",
            "type": "string",
            "description": "Variable name to store the value in."
          },
          {
            "name": "value",
            "type": "any",
            "description": "The value to store."
          }
        ]
      },
      {
        "name": "SpriteTrail",
        "parent": "util",
        "realms": [
          "server"
        ],
        "description": "Adds a trail to the specified entity.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity to attach trail to"
          },
          {
            "name": "attachmentID",
            "type": "number",
            "description": "Attachment ID of the entities model to attach trail to. If you are not sure, set this to 0"
          },
          {
            "name": "color",
            "type": "table",
            "description": "Color of the trail, use <page>Global.Color</page>"
          },
          {
            "name": "additive",
            "type": "boolean",
            "description": "Should the trail be additive or not"
          },
          {
            "name": "startWidth",
            "type": "number",
            "description": "Start width of the trail"
          },
          {
            "name": "endWidth",
            "type": "number",
            "description": "End width of the trail"
          },
          {
            "name": "lifetime",
            "type": "number",
            "description": "How long it takes to transition from startWidth to endWidth"
          },
          {
            "name": "textureRes",
            "type": "number",
            "description": "The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5"
          },
          {
            "name": "texture",
            "type": "string",
            "description": "Path to the texture to use as a trail."
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "Entity of created trail ([env_spritetrail](https://developer.valvesoftware.com/wiki/Env_spritetrail))"
          }
        ]
      },
      {
        "name": "TimerCycle",
        "parent": "util",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Returns the time since this function has been last called",
        "returnValues": [
          {
            "type": "number",
            "description": "Time since this function has been last called in ms"
          }
        ]
      },
      {
        "name": "tobool",
        "parent": "util",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "<deprecated>You should use <page>Global.tobool</page> instead.</deprecated>\n\nConverts string or a number to a bool, if possible. Alias of <page>Global.tobool</page>.",
        "arguments": [
          {
            "name": "input",
            "type": "any",
            "description": "A string or a number to convert."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "False if the input is equal to the string or boolean \"false\", if the input is equal to the string or number \"0\", or if the input is nil. Returns true otherwise."
          }
        ]
      }
    ],
    "description": "`util.worldpicker` is for picking an entity in the world while [GUI](gui) is open."
  },
  {
    "name": "vgui",
    "functions": [
      {
        "name": "Create",
        "parent": "vgui",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a panel by the specified classname.\n<note>Custom VGUI elements are not loaded instantly. Use <page>GM:OnGamemodeLoaded</page> to create them on startup.</note>",
        "arguments": [
          {
            "name": "classname",
            "type": "string",
            "description": "Classname of the panel to create.\n\nDefault panel classnames can be found on the <page>VGUI Element List</page>.\n\nNew panels can be registered via <page>vgui.Register</page>"
          },
          {
            "name": "parent",
            "type": "Panel",
            "default": "nil",
            "description": "Panel to parent to."
          },
          {
            "name": "name",
            "type": "string",
            "default": "nil",
            "description": "Custom name of the created panel for scripting/debugging purposes. Can be retrieved with <page>Panel:GetName</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created panel, or `nil` if creation failed for whatever reason."
          }
        ]
      },
      {
        "name": "CreateFromTable",
        "parent": "vgui",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a panel from table. Typically used with <page>vgui.RegisterFile</page> and <page>vgui.RegisterTable</page>.",
        "arguments": [
          {
            "name": "metatable",
            "type": "table",
            "description": "Your PANEL table."
          },
          {
            "name": "parent",
            "type": "Panel",
            "default": "nil",
            "description": "Which panel to parent the newly created panel to."
          },
          {
            "name": "name",
            "type": "string",
            "default": "nil",
            "description": "Custom name of the created panel for scripting/debugging purposes. Can be retrieved with <page>Panel:GetName</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created panel, or `nil` if creation failed for whatever reason."
          }
        ]
      },
      {
        "name": "Exists",
        "parent": "vgui",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if Lua-defined panel exists by name. Uses <page>vgui.GetControlTable</page> internally.",
        "arguments": [
          {
            "name": "Panelname",
            "type": "string",
            "description": "The name of the panel to get test."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether a panel with given name was registered yet or not."
          }
        ]
      },
      {
        "name": "GetWorldPanel",
        "parent": "vgui",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the global world panel which is the parent to all others, except for the HUD panel.\n\nSee also <page>Global.GetHUDPanel</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The world panel"
          }
        ]
      }
    ]
  },
  {
    "name": "video",
    "functions": [
      {
        "name": "Record",
        "parent": "video",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Attempts to create an <page>IVideoWriter</page>.",
        "arguments": [
          {
            "name": "config",
            "type": "table",
            "description": "The video config. See <page>Structures/VideoData</page>."
          }
        ],
        "returnValues": [
          {
            "type": "IVideoWriter",
            "description": "The video object (returns **false** if there is an error)"
          },
          {
            "type": "string",
            "description": "The error string, if there is an error"
          }
        ]
      }
    ]
  },
  {
    "name": "weapons",
    "functions": [
      {
        "name": "IsBasedOn",
        "parent": "weapons",
        "realms": [
          "client",
          "server"
        ],
        "description": "Checks if name is based on base",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Entity's class name to be checked"
          },
          {
            "name": "base",
            "type": "string",
            "description": "Base class name to be checked"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns true if class name is based on base, else false."
          }
        ]
      }
    ]
  }
]